<!DOCTYPE html><html><head>

<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="referrer" content="no-referrer">
<base target="_blank">

<title>8kun Authentigator</title>

<style type="text/css">

body {
  text-align: center; padding: 0 30px;
  font-size: 16px; line-height: 19px;
  font-family: 'times new roman', serif;
  color: brown; background-color: navajowhite;
}

input {
  height: 17px; font-size: 16px; outline: none;
  font-family: 'consolas', 'lucida console', monospace;
  padding: 3px 5px 3px 5px; caret-color: navy;
  color: crimson; background-color: seashell;
  border: 2px solid burlywood; border-radius: 4px;
  text-align: center; margin: 5px 0;
}

button {
  width: auto; height: auto;
  font-size: 15px; line-height: 19px;
  padding: 1px 6px 0 6px; margin: 8px 0 10px 0;
  font-family: 'helvetica', sans-serif;
  color: purple; background-color: powderblue;
  outline: none; border-color: #e8e8e8 #9c9c9c #9c9c9c #ececec;
}

button:hover:active {
  border-color: #a8a8a8 #f8f8f8 #f4f4f4 #acacac;
}

h1 {
  margin: 20px 0 20px 0;
}

::selection {
  color: yellow; background-color: orchid;
}

r_ { color: crimson; }
g_ { color: green; }
b_ { color: blue; }

</style></head><body onload="javascript:start()"><h1><g_>8kun Authentigator</g_></h1>

<input type=text style="width:196px"><br>
<input type=text style="width:196px" disabled><br>
<input type=text style="width:60px"  disabled> &nbsp;
<input type=text style="width:110px" disabled><br>
<button onclick="javascript:timesync()">Time Sync</button>&nbsp;
<button onclick="javascript:copycode()">Copy Code</button>

<p>Copy the password from the 8kun thread reply box and paste it into the top input box on this page.
<br>A 6-digit code based on the password will be calculated every second. If the password is invalid, no code will appear.
<br>You will see a new code every 30 seconds. Press the "Copy Code" button to copy the code to the clipboard.
<p>TOTP (<g_>Time-based One-Time Password</g_>) requires your system clock to be synchronized with the Internet time.
<br>Press the "Time Sync" button to connect to a time server in order to synchronize the Authentigator. Confirmation
<a href="https://time.is">here</a>.
<br><r_>No connection is established with any server other than the time server. No data is transmitted.</r_>

</body>

<script src="crypto.js"></script>

<script>

var offset = 0, box = document.getElementsByTagName ("input");

var start = function ()
{
  setInterval (function() { nextcode(); }, 1000); box [1].value = "";
}

var copycode = function ()
{
  box [3].removeAttribute ("disabled");
  box [3].select(); document.execCommand ("copy");
  box [3].setAttribute ("disabled", true);
}

var timesync = async () =>
{
  var resp, data, time = Date.now(); box [1].value = "Checking the time...";

  try {
    resp = await fetch ("http://worldtimeapi.org/api/ip");
    data = await resp.json();
  } catch (e) { data = ""; }

  if (!data || !data.unixtime) data = "Timer server down"; else
  {
    offset = data.unixtime * 1000 - time;
    data = "Time sync: " + Math.round (offset / 1000);
  }

  box [1].value = data;
}

var nextcode = function ()
{
  var time = Math.trunc ((Date.now() + offset) / 1000);
  var key = box [0].value; box [2].value = 30 - (time % 30);

  if (!(key = frombase32 (key))) key = "error"; else
  {
    key = CryptoJS.enc.Hex.parse (key);
    key = get_token (1, time, 30, key, 6);
  }

  box [3].value = key;
}

var frombase32 = function (key)  // implementation of RFC 3548
{
  var n, p, bits = [], hex = "";
  var base16 = "0123456789ABCDEF", base32 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=";

  for (n = 0; n < key.length; n++)
  {
    p = base32.indexOf (key [n]);
    if (p < 0) return (""); if (p == 32) p = 0; bits.push (p);
  }

  if (bits.length & 7) return ("");

  for (n = 0; n < bits.length; n += 4)
  {
    hex += base16 [bits [n+0] >> 1];
    hex += base16 [((bits [n+0] & 1) << 3) + (bits [n+1] >> 2)];
    hex += base16 [((bits [n+1] & 3) << 2) + (bits [n+2] >> 3)];
    hex += base16 [((bits [n+2] & 7) << 1) + (bits [n+3] >> 4)];
    hex += base16 [bits [n+3] & 15];
  }

  return (hex);
}

var get_token = function (hmac, time, step, key, digits)  // implementation of RFC 6238
{
  var hash, val = Math.trunc (time / step).toString (16);
  val = "0".repeat (16 - val.length) + val;
  val = CryptoJS.enc.Hex.parse (val);

  if (hmac == 1) hash = CryptoJS.HmacSHA1   (val, key).toString();
  if (hmac == 2) hash = CryptoJS.HmacSHA256 (val, key).toString();
  if (hmac == 3) hash = CryptoJS.HmacSHA512 (val, key).toString();

  var z = hex2dec (hash.substr (-1)) * 2;
  var a = hex2dec (hash.substr (z + 0, 2));
  var b = hex2dec (hash.substr (z + 2, 2));
  var c = hex2dec (hash.substr (z + 4, 2));
  var d = hex2dec (hash.substr (z + 6, 2));

  z = ((a & 127) << 24) + (b << 16) + (c << 8) + d;
  z = (z % (Math.pow (10, digits))).toString();
  z = "0".repeat (digits - z.length) + z;

  return (z);
}

var hex2dec = function (val)
{
  return (parseInt (val, 16));
}

</script></html>
