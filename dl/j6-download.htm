<!DOCTYPE html><html><head>
<meta name='viewport' content='width=device-width, initial-scale=1.0'>
<meta charset='utf-8'>

<title>J6 Download</title>

<style type='text/css'>

body {
  line-height: 17px; font-size: 16px;
  font-family: 'times new roman', serif; 
  color: maroon; background-color: navajowhite;
  text-align: center;
}

input {
  height: 17px; font-size: 13px;
  font-family: 'helvetica', sans-serif;
  border-width: 2px; border-style: solid;
  border-color: tan lemonchiffon lemonchiffon burlywood;
  padding: 3px 5px 1px 5px; caret-color: navy; outline: none;
}

input.static {
  margin: 0 1px 0 2px; padding: 4px 0 3px 0; text-align: center;
  color: mediumvioletred; background-color: papayawhip;
  border-radius: 3px; border: 1px solid darkorange;
}

button {
  width: auto; height: auto;
  font-size: 13px; line-height: 19px;
  padding: 2px 6px 0 6px; margin: 0;
  font-family: 'helvetica', sans-serif;
  color: darkblue; background-color: powderblue;
  outline: none; border-style: solid;
  border-color: #e8e8e8 #9c9c9c #9c9c9c #ececec;
}

button:hover:active {
  border-color: #a8a8a8 #f8f8f8 #f4f4f4 #acacac;
}

div.help {
  display: none; position: fixed; top: 74px; width: 75%;
  left: 0; right: 0; margin: auto; padding: 5px 12px 7px;
  border: 2px solid darkorange; border-radius: 12px;
  text-align: left; font-size: 16px; line-height: 22px;
  color: mediumblue; background-color: snow;
}

div.viewer {
  width: 100%; height: calc(100vh - 100px); outline: none; margin-top: 12px;
  overflow-y: scroll; text-align: left; border: 1px solid sandybrown;
}

.viewer span {
  display: inline-block; width: 100%; line-height: 14px;
  box-sizing: border-box; padding: 5px; margin: 0 0 4px 0;
  color: purple; background-color: lemonchiffon;
}

.viewer img {
  width: 320px; height: 180px; margin: 0 11px 0 0; float: left;
}

.viewer button {
  border: 1px solid orange; border-radius: 6px;
  margin-top: 2px; color: maroon; background-color: gold;
}

.viewer button:hover:active {
  border: 1px solid chocolate;
}

span.status {
  display: inline-block; width: auto; margin: 0; padding: 0; color: firebrick;
}

textarea {
  width: calc(100% - 350px); height: 52px; resize: none; vertical-align: top;
  margin: 3px 0 0 0; padding: 0 6px; border: 1px solid pink; border-radius: 6px;
  line-height: 17px; white-space: pre-wrap; font-family: 'times new roman', serif; 
  outline: none; color: maroon; background-color: lightyellow;
}

::selection {
  color: yellow; background-color: orchid;
}

r_ { color: crimson; }
g_ { color: seagreen; }
b_ { color: blue; }

</style></head><body onload="javascript:init()">

<h2 style="margin:8px"><r_>J6 Video Download</r_></h2>
<input type=text style="width:calc(90% - 180px)">&nbsp;
<button onclick="javascript:show()">Go</button> &nbsp;
<input type=text class="static" disabled style="width:90px"> &nbsp;
<a href="javascript:help()">Help</a>

<div class="viewer" tabindex="-1"></div>

<div class="help" onclick="this.style.display='none'">
This app can save the video as a DASH file with the ".mpd" extension. Inside the file, the links to the video segments
are modified to include the full path and a security token. The token will expire in one hour so you need to use the
file immediately after saving.
<p></p>
The file may be used with an external video player (VLC or SMPlayer) or with FFMPEG or any app which
can handle the DASH format. There are two video resolutions available: 480p and 1080p.
<p></p>
You can also save the video as an MP4 file. This works by concatenating the video segments. You have the option to play
the video inside the browser though this is a very basic feature. The videos are listed in ascending order by file name.
A text area is provided with each video for notes (caution: your notes will not be saved).
<p></p>
This app uses a proxy server in order to bypass the CORS restrictions.
<p></p>
<r_>Click in this box to close.</r_>
</div>

<script src="https://reference.dashif.org/dash.js/v3.2.0/dist/dash.all.min.js"></script>

<script>

var m, n, p, q, resp, data, link, name, cookie, token, url, sub, box, halt, busy = 0, msg_timer, msg_result;

var post = document.querySelector ("div");
var line = document.querySelectorAll ("input")[0];
var stat = document.querySelectorAll ("input")[1];

var site = "https://cha.house.gov/cha-subcommittee-reading-room-fe781e74-d577-4f64-93cc-fc3a8dd8df18";
var file = ["https://public.boxcloud.com/api/2.0/internal_files/", "/versions/", "/representations/dash/content/"];

var proxy = "https://kraker-remote.vercel.app/?url=", blank_page = "widget.htm#black";

//proxy = "/~"; blank_page = proxy + blank_page;

var pullstring = function (s, t, u)
{
  var m = t.length, n = s.indexOf (t) + m;
  m = n < m ? -1 : (u ? s.indexOf (u, n) : s.length);
  return (m < 0 ? "" : s.substr (n, m - n));
}

var getmessage = function (msg)
{
  if (typeof (msg) == "number")
  {
    msg_timer = setTimeout (function() { getmessage ("@"); }, msg * 1000);
    return new Promise (function (success, failure) { msg_result = success; });
  }
  else
  {
    if (msg_result) msg_result (msg.substr (1));
    clearTimeout (msg_timer); msg_timer = msg_result = null;
  }
}

var init = function ()
{
  line.value = site; stat.value = "Ready";

  window.onmessage = function (e) { if (e.data [0] == "@") getmessage (e.data); }
}

var help = function ()
{
  document.querySelector (".help").style.display = "inline-block";
}

var grab = function ()
{
  sub = pullstring (data, "Box.postStreamData = ", ";<\/script>");

  try { sub = JSON.parse (sub) ["/app-api/enduserapp/shared-folder"];
      } catch { return (0) }

  var m = sub.pageCount, n, p, q, r, s, t; sub = sub.items;

  for (n = 0; n < sub.length; n++) if ((s = sub [n].name).includes (".mp4"))
  {
    p = sub [n].thumbnailURLs.large;
    p = p ? "https://app.box.com" + p + "?shared_name=" + name : "";

    q = (sub [n].itemSize / 1048576).toFixed (0) + " MB";
    r = ("00" + (post.children.length + 1)).substr (-3);

    q = "<img src='" + p + "'><br>" + s + "<br><br># <b_>" + r + "</b_> &nbsp; <r_>Size:</r_> " + q;
    q += " &nbsp; <r_>Date:</r_> " + (new Date (sub [n].contentUpdated * 1000)).toUTCString();

    if (t = pullstring (p, "version_", "/"))
    {
      s = "'" + s + "','" + sub [n].id + "','" + t + "','" + r;
      t = "<button onclick=save(this,0," + s + "')>Play Video</button> &nbsp;&nbsp; " +
          "<button onclick=save(this,1," + s + "')>Save DASH file</button> &nbsp;&nbsp; " +
          "<button onclick=save(this,2," + s + "')>Save as MP4</button> &nbsp;&nbsp; " +
          "<span class='status'></span><br><br><textarea></textarea>";
    }

    box = document.createElement ("SPAN");
    box.innerHTML = q + "<br><br>&nbsp;" + t; post.appendChild (box);
  }

  return (m);
}

var show = async () =>
{
  post.innerHTML = ""; post.scrollTo (0,0); stat.value = "Working...";

  try { resp = await fetch (proxy + line.value); data = await resp.text();
      } catch { data = "" }

  link = pullstring (data, "<iframe", ">"); link = pullstring (link, 'src="', '?');
  if (!link) { stat.value = "Error"; return; }

  n = link.lastIndexOf ("/"); name = link.substr (n + 1);
  url = proxy + link + "?sortColumn=name&sortDirection=ASC";

  try { resp = await fetch (url, { headers: { accept: '**' }}); data = await resp.text();
      } catch { data = "" }

  m = resp.headers.get ("zz-set-cookie");
  cookie = "**z=" + pullstring (m || "", "z=", ";");
  token = pullstring (data, '"requestToken":"', '"');

  n = grab(); if (!n) { stat.value = "Error"; return; }

  for (m = 2; n > 1; n--, m++) try
  {
    resp = await fetch (url + "&page=" + m); data = await resp.text(); if (!grab()) throw ("");
  }
  catch { stat.value = "Error"; return; }

  box = document.createElement ("SPAN"); box.style = "height:190px;margin:0";
  stat.value = post.children.length + " videos"; post.appendChild (box); post.focus();
}

var save = async (box, mode, id, id1, id2, cnt) =>
{
  var blob; if (mode > 2) busy = 0; else for (n = 3 - mode; n > 0; n--) box = box.nextElementSibling;

  if (mode == 2) if (busy) { halt = box; return; } else
  {
    busy = -1; box.innerHTML = "";
    blob = document.createElement ("BUTTON"); blob.onclick = function() { save (box,480,id,id1,id2,cnt); }
    blob.style = "margin-right:10px"; blob.innerHTML = "480p"; box.appendChild (blob);
    blob = document.createElement ("BUTTON"); blob.onclick = function() { save (box,1080,id,id1,id2,cnt); }
    blob.style = "margin-right:10px"; blob.innerHTML = "1080p"; box.appendChild (blob);
    blob = document.createElement ("BUTTON"); blob.onclick = function() { busy = 0; box.innerHTML = ""; }
    blob.innerHTML = "Cancel"; box.appendChild (blob); return;
  }

  box.innerHTML = "Loading..."; url = "https://app.box.com/app-api/enduserapp/elements/tokens";

  data = {
    method: 'POST', body: '{"fileIDs":["file_' + id1 + '"]}',
    headers: { 'content-type': 'application/json', accept: cookie, 'x-request-token': token }
  }

  try { resp = await fetch (proxy + url, data); data = await resp.text();
      } catch { data = "" }

  data = pullstring (data, '"read":"', '"'); if (!data) { box.innerHTML = "Error"; return; }

  p = file[0] + id1 + file[1] + id2 + file[2]; q = "?access_token=" + data + "&shared_link=" + link;

  try { resp = await fetch (proxy + p + "manifest.mpd" + q); data = await resp.text();
      } catch { data = "" }

  box.innerHTML = ""; if (!data) { box.innerHTML = "Error"; return; }

  data = data.replace (/ media="/g, ' media="' + p);
  data = data.replace (/ initialization="/g, ' initialization="' + p);
  q = q.replace (/&/g, "&amp;"); data = data.replace (/\.m4s"/g, '.m4s' + q + '"');

  if (mode)
  {
    if (mode == 1) { id += ".mpd"; blob = new Blob ([data]); }
      else if (!(blob = await download (box, mode, data))) return;

    box = document.createElement ('A');
    box.download = id; box.href = URL.createObjectURL (blob);
    box.click(); URL.revokeObjectURL (box.href); return;
  }

  if (!window.dashjs) { box.innerHTML = "DASH player not found!"; return; }

  var insert =
    "<body style='margin:0;padding:0;overflow:hidden;background-color:black'>" +
    "<video style='position:absolute;border:none;outline:none;width:100%;height:100%'" +
    " controls autoplay allowfullscreen></video></body>";

  var win = window.open (blank_page); await getmessage (3); var doc = win.document;

  if (doc.doctype)
  {
    var dom = new DOMParser();
    dom = dom.parseFromString (insert, "text/html");
    doc.body.replaceWith (dom.body);
  }
  else { doc.open(); doc.write ("<!DOCTYPE html>" + insert); doc.close(); }

  box = document.createElement ("SCRIPT");
  box.src = document.querySelector ("script").src;
  box.onload = function() { window.postMessage ("@video", "*"); }

  doc.title = "# " + cnt; doc = doc.body; doc.appendChild (box); await getmessage (3);

  blob = URL.createObjectURL (new Blob ([data]));
  var vid = (win.dashjs || dashjs).MediaPlayer().create();
  vid.initialize (doc.querySelector ("video"), blob, true);

  vid.updateSettings ({ streaming: { abr:
    { autoSwitchBitrate: {video: false}, minBitrate: {video: 0}, maxBitrate: {video: 0} }
  }});

  doc.onbeforeunload = function() { vid.reset(); URL.revokeObjectURL (blob); }
}

var download = async (box, mode, dash) =>
{
  var m, n, p, q, res, buffer = []; busy = 1; halt = null;

  p = pullstring (dash, 'height="' + mode + '"', "").replace (/&amp;/g, "&");
  q = pullstring (p, 'initialization="', '"'); p = pullstring (p, 'media="', '"');

  try
  {
    if (!p || !q) throw ("Unknown error");
    res = await fetch (q); if (res.status != 200) throw ("Status " + res.status);

    while (busy)
    {
      buffer.push (await res.arrayBuffer()); if (halt == box) throw ("Download stopped");
      box.innerHTML = "Loading " + mode + "p at segment " + busy; q = p.replace ("$Number$", busy++);

      res = await fetch (q); if (res.status == 404) break;
      if (res.status != 200) throw ("Status " + res.status);
    }

    busy = 0; box.innerHTML = "MP4 done"; return (new Blob (buffer));
  }
  catch(e) { busy = 0; box.innerHTML = e; return null; }
}

</script></body></html>
