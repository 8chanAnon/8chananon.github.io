<!DOCTYPE html><html><head>

<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">

<title>Free TV Channels</title>

<style type="text/css">

body {
  font-size: 17px; line-height: 20px;
  font-family: 'times new roman', serif; 
  color: maroon; background-color: navajowhite;
  text-align: center;
}

.widevid {
  width: 736px; height: 414px;
  position: relative; overflow: hidden;
  border: 2px solid red; background-color: indigo;
}

.widevid:fullscreen {
  border: none;
}

.msgbox {
  position: absolute; top: 36%; left: 40%; right: 40%; display: block;
  text-align: center; border-radius: 10px;
  color: paleturquoise; background-color: slateblue;
  font-style: italic; cursor: pointer;
}

iframe {
  width: 100%; height: 100%;
  position: absolute; border: none;
  background-color: transparent;
  pointer-events: auto;
}

input {
  height: 17px; font-size: 13px;
  font-family: 'helvetica', sans-serif;
  border-width: 2px; border-style: solid;
  border-color: tan lemonchiffon lemonchiffon burlywood;
  padding: 3px 5px 1px 5px; caret-color: navy; outline: none;
}

input[type=radio] {
  vertical-align: middle; margin: -2px 1px 1px 2px;
  filter: contrast(1.0) brightness(1.2) opacity(90%);
}

table {
  display: inline-block; border: 3px solid green;
}

td.textbox {
  width: 30vw; max-width: 250px;
  padding: 0 2px 0 0; vertical-align: top;
  text-align: center; white-space: nowrap;
}

td.vidbox {
  font-size: 15px; line-height: normal;
  padding: 0 0 0 2px; vertical-align: middle;
  text-align: left; border-left: 1px solid firebrick;
}

button {
  width: auto; height: auto; margin: 0; padding: 2px 12px 1px;
  line-height: 20px; font-size: 14px; font-family: helvetica, sans-serif;
  outline: none; border: 1px solid peru; border-radius: 5px;
  color: slateblue; background-color: blanchedalmond;
}

button:hover:not(:active) {
  background-color: gainsboro;
}

hr {
  border-color: thistle; border-style: solid; margin: 12px 0;
}

::selection {
  color: yellow; background-color: orchid;
}

r_ { color: crimson; }
g_ { color: seagreen; }
b_ { color: blue; }

</style></head><body onload="javascript:start()">

<h2 style="text-align:center;margin:7px 0 10px 0"><r_>Free TV Channels</r_></h2>

<table><tr><td class="textbox">

<span style="display:block;font-size:22px;margin:15px 0 -8px">&#x1f408;</span>
<span style="display:inline-block;text-align:left">

<br><input type=radio name="tv" onclick="javascript:tv(this)"> <span></span>
<br><input type=radio name="tv" onclick="javascript:tv(this)"> <span></span>
<br><input type=radio name="tv" onclick="javascript:tv(this)"> <span></span>
<br><input type=radio name="tv" onclick="javascript:tv(this)"> <span></span>
<br><input type=radio name="tv" onclick="javascript:tv(this)"> <span></span>
<br><input type=radio name="tv" onclick="javascript:tv(this)"> <span></span>
<br><input type=radio name="tv" onclick="javascript:tv(this)"> <span></span>
<br><input type=radio name="tv" onclick="javascript:tv(this)"> <span></span>
<br><input type=radio name="tv" onclick="javascript:tv(this)"> <span></span>
<br><input type=radio name="tv" onclick="javascript:tv(this)"> <span></span>
<br><input type=radio name="tv" onclick="javascript:tv(this)"> <span></span>
<br><input type=radio name="tv" onclick="javascript:tv(this)"> <span></span>
<br><input type=radio name="tv" onclick="javascript:tv(this)"> <span></span>
<br><input type=radio name="tv" onclick="javascript:tv(this)"> <span></span>
<br><input type=radio name="tv" onclick="javascript:tv(this)"> <span></span>
<br><input type=radio name="tv" onclick="javascript:tv(this)"> <span></span>

</span><span style="display:block;font-size:22px;margin:14px 0 0;transform:scale(-1,1)">&#x1f408;</span>

</td><td class="vidbox">

<div class="widevid"><h2 id="msg" class="msgbox">No Video</h2>
<iframe id="frame" autoplay allowfullscreen controls></iframe>

</div></td></tr></table>

<div style="margin:12px 0 12px 0">
<button onclick="javascript:new_list(1)">Alternative</button>&nbsp;
<button onclick="javascript:new_list(2)">Mainstream</button>&nbsp;
<button onclick="javascript:new_list(3)">Specialty</button> &nbsp;
<input type=radio name="format" style="vertical-align:middle" value="18"> 360p &nbsp;
<input type=radio name="format" style="vertical-align:middle" value="19" checked> 480p &nbsp;
<input type=radio name="format" style="vertical-align:middle" value="22"> 720p &nbsp;&nbsp;
<button onclick="javascript:clear_video()">Stop</button> &nbsp;&nbsp; <g_>Updated July 23, 2024</g_>

</div><script>

var cors_bypass = cors_kraker = "https://kraker-remote.vercel.app/?url=";
var response, textData, jsonData, busy = 0, cookies = {}, msg_timer, msg_result;

var list_1 = [
  "https://oan-lg.amagi.tv/playlist.m3u8==One America News",
  "https://dai.google.com/linear/hls/event/c-oMNcDLTeuszRKPugMj9Q/master.m3u8==Real America's Voice",
  "https://nmxlive.akamaized.net/hls/live/529965/Live_1/index.m3u8==NewsMax TV",
  "https://dai2.xumo.com/amagi_hls_data_xumo1234A-lawcrime/CDN/master.m3u8==Law & Crime",
  "https://content.uplynk.com/channel/87c82188ea944bcb961c34236b9648b0.m3u8==Court TV",
  "https://live-hls-web-aje.getaj.net/AJE/index.m3u8==Al Jazeera",
  "https://rt-glb.rttv.com/live/rtnews/playlist.m3u8==RT News",
  "*distro*live/wion-world-is-one-news==World Is One News",
  "https://tyt-xumo-us.amagi.tv/hls/amagi_hls_data_tytnetwor-tyt-xumo/CDN/master.m3u8==The Young Turks",
  "https://freespeech.akamaized.net/hls/live/2016712/live1/playlist.m3u8==InfoWars - Main",
  "https://freespeech.akamaized.net/hls/live/2024573/live2/playlist.m3u8==InfoWars - Alex Jones",
  "https://freespeech.akamaized.net/hls/live/2016873/live3/playlist.m3u8==InfoWars - Harrison Smith",
  "https://freespeech.akamaized.net/hls/live/2024574/live4/playlist.m3u8==InfoWars - Owen Shroyer",
  "*lindell*lindell-1==Lindell TV 1",
  "*lindell*lindell-2==Lindell TV 2",
  "*lindell*lindell-3==Lindell TV 3"
];

var list_2 = [
  "*tvapp*wabc-new-york-abc-east-live-stream==ABC",
  "https://content.uplynk.com/channel/3324f2467c414329b3b0cc5cd987b6be.m3u8==ABC News",
  "*tvapp*wcbs-new-york-cbs-east-live-stream==CBS",
  "https://cbsn-us.cbsnstream.cbsnews.com/out/v1/55a8648e8f134e82a470f83d562deeca/master.m3u8==CBS News",
  "*tvapp*cnbc-live-stream==CNBC",
  "*tvapp*cnn-live-stream==CNN",
  "*tvapp*cspan-live-stream==C-SPAN",
  "*tvapp*cspan-2-live-stream==C-SPAN 2",
  "*tvapp*wnyw-new-york-fox-east-live-stream==Fox",
  "*tvapp*fox-business-network-live-stream==Fox Business",
  "*tvapp*fox-news-channel-live-stream==Fox News",
  "https://fox-foxnewsnow-samsungus.amagi.tv/playlist.m3u8==Fox News Now",
  "*tvapp*msnbc-live-stream==MSNBC",
  "*tvapp*wnbc-new-york-nbc-east-live-stream==NBC",
  "https://dai2.xumo.com/amagi_hls_data_xumo1212A-xumo-nbcnewsnow/CDN/master.m3u8==NBC News",
  "*tvapp*pbs-13-wnet-new-york-live-stream==PBS"
];

var list_3 = [
  "https://classicarts.akamaized.net/hls/live/1024257/CAS/master.m3u8==Classic Arts Showcase",
  "*distro*live/comedy-dynamics==Comedy Dynamics",
  "*distro*live/dot-esports==Dot Esports",
  "*plextv*channel/dungeon-tv-2==Dungeon TV",
  "*distro*live/entrepreneur-1==Entrepreneur",
  "*tvapp*fx-live-stream==FX",
  "*tvapp*hbo-east-live-stream==HBO",
  "https://1111296894.rsc.cdn77.org/LS-ATL-56868-1/index.m3u8==Hunt Channel",
  "https://live-manifest.production-public.tubi.io/live/e81816aa-19a0-4408-ac23-88e90a86fde2/playlist.m3u8==MotorTrend",
  "*olympic*==Olympic Channel",
  "https://rbmn-live.akamaized.net/hls/live/590964/BoRB-AT/master.m3u8==Red Bull TV",
  "*plextv*channel/scream-factory-tv==Scream Factory",
  "*tvapp*syfy-live-stream==Syfy",
  "https://tastemade-xumo.amagi.tv/hls/amagi_hls_data_tastemade-tastemadefreetv16xumo/CDN/master.m3u8==Tastemade",
  "https://cdn-uw2-prod.tsv2.amagi.tv/linear/amg01201-cinedigmenterta-filmdetective-cineverse/playlist.m3u8==The Film Detective",
  "*plextv*channel/the-pet-collective-2==The Pet Collective",
];

var start = function ()
{
  new_list (1); window.onmessage = function (e) { if (e.data [0] == "@") getmessage (e.data); }
}
////////////////////

var getmessage = function (msg)
{
  if (typeof (msg) == "number")
  {
    msg_timer = setTimeout (function() { getmessage ("@"); }, msg * 1000);
    return new Promise (function (success, failure) { msg_result = success; });
  }
  else
  {
    if (msg_result) msg_result (msg.substr (1));
    clearTimeout (msg_timer); msg_timer = msg_result = null;
  }
}
////////////////////

var new_list = function (list)
{
  var n, p, q = document.getElementsByName ("tv");

  if (list == 1) list = list_1; if (list == 2) list = list_2; if (list == 3) list = list_3;

  for (n = 0; n < q.length; n++)
  {
    p = n < list.length ? list [n].split ("==") : ["",""];
    q[n].value = p[0]; q[n].checked = false; q[n].nextElementSibling.innerHTML = p[1];
  }
}
////////////////////

var clear_video = function ()
{
  var vid = document.getElementById ("frame"), win = vid.parentNode;
  vid.src = "about:blank"; win.removeChild (vid); win.appendChild (vid);
  document.getElementById ("msg").innerHTML = "No Video";
}
////////////////////

var is_busy = function ()
{
  if (busy) return 1;
  document.getElementById ("msg").innerHTML = "Busy";
  busy = 1; return 0;
}
////////////////////

var no_fail = function ()
{
  if (!busy) document.getElementById ("msg").innerHTML = "Error";
  var Busy = busy; busy = 0; return (Busy);
}
////////////////////

var pullstring = function (s, t, u)
{
  var m = t.length, n = s.indexOf (t) + m;
  m = n < m ? -1 : (u ? s.indexOf (u, n) : s.length);
  return (m < 0 ? "" : s.substr (n, m - n));
}
////////////////////

var get_checked = function (name, value)
{
  var i = 0, j = value, k = document.getElementsByName (name);
  if (k && k.length) for (; i < k.length; i++) if (k [i].checked) j = k [i].value;
  if (isNaN (i = parseFloat (j))) return (j); else return (i);
}
////////////////////

var tv = async (item) =>
{
  item = item.value; if (busy || !item) return;
  clear_video(); var fmt = get_checked ("format", 18);
  if (item [0] != "*") { load_stream (item, fmt); return; }

  is_busy(); item = item.split ("*"); var src = item [1], id = item [2], url = "";

  if (src == "distro")  url = await req_distro (id);
  if (src == "lindell") url = await req_lindell (id);
  if (src == "olympic") url = await req_olympic (id);
  if (src == "plextv")  url = await req_plextv (id);
  if (src == "tvapp")   url = await req_tvapp (id);

  if (!url || url.indexOf ("http")) busy = 0; if (no_fail()) load_stream (url, fmt);
}
////////////////////

var req_distro = async (url) =>
{
  try
  {
    response = await fetch (cors_kraker + "https://www.distro.tv/" + url + "/");
    textData = await response.text();

    url = pullstring (textData, '"contentUrl":"', '"'); if (!url) throw ("");
    var n = url.indexOf ("&url="); if (n > 0) url = url.substr (n + 5);
    n = url.indexOf ("?"); if (n > 0) url = url.substr (0, n);
  }
  catch { url = "" }; return (url);
}
////////////////////

var req_lindell = async (url) =>
{
  try
  {
    response = await fetch (cors_kraker + "https://frankspeech.com");
    textData = await response.text();

    var a = textData.indexOf ("<video ");
    var b = textData.indexOf ("<video ", a + 1);
    var c = textData.indexOf ("<video ", b + 1);
    if (url == "lindell-1") url = textData.substr (a, 500);
    if (url == "lindell-2") url = textData.substr (b, 500);
    if (url == "lindell-3") url = textData.substr (c, 500);
    url = pullstring (url, 'application/x-mpegURL" src="', '"');
  }
  catch { url = "" }; return (url);
}
////////////////////

var req_olympic = async (url) =>
{
  try
  {
    url = "https://olympics.com/tokenGenerator?url=https://ott-dai-oc.akamaized.net/OC1/master.m3u8&domain=";

    response = await fetch (cors_bypass + url);
    textData = await response.text();

    url = pullstring (textData, '"', '"');
  }
  catch { url = "" }; return (url);
}
////////////////////

var req_plextv = async (url) =>
{
  try
  {
    var s, t, src = "https://watch.plex.tv";

    s = { accept: 'application/json', 'X-Plex-Product': 'Plex Mediaverse', 'X-Plex-Client-Identifier': 'x' };

    response = await fetch (cors_kraker + "https://plex.tv/api/v2/users/anonymous", { method: 'POST', headers: s });
    textData = await response.text(); if (!(t = pullstring (textData, '"authToken":"', '"'))) throw("");

    response = await fetch (cors_kraker + src + "/en-GB/live-tv/" + url);
    textData = await response.text();

    if (!(s = pullstring (textData, '"hidden\\":false,\\"id\\":\\"', '\\'))) throw ("");

    url = "https://epg.provider.plex.tv/library/parts/" + s + ".m3u8?X-Plex-Token=" + t;
  }
  catch { url = "" }; return (url);
}
////////////////////

var req_tvapp = async (url) =>
{
try
{
  var a, b, s, t, u, v, src = "https://thetvapp.to";

  const get_link = async () =>
  {
    response = await fetch (cors_kraker + src + u, { method: 'POST', body: t, headers: s });
    url = await response.text(); url = pullstring (url, '"', '"').replace (/\\/g, "");
    if (!url.includes (".m3u8")) url = ""; return (url);
  }

  response = await fetch (cors_kraker + src + "/tv/" + url, { headers: { accept: "**" }});
  textData = await response.text();

  s = response.headers.get ("zz-set-cookie") || "";
  a = (a = "tvnow_session=") + pullstring (s, a, ";");
  b = pullstring (textData, '"csrf-token" content="', '"');
  s = { accept: "**" + a, 'content-type': 'application/json', 'x-csrf-token': b }
  u = pullstring (textData, '"get-m3u8-link" data="', '"'); if (!a || !b || !u) throw ("!!!");

  if (!(t = cookies ["thetvapp"]) || !await get_link())
  {
    t = pullstring (textData, '<script type="module" src="', '"'); if (!t) throw ("!!!");
    response = await fetch (cors_bypass + t); textData = await response.text();

    a = textData.indexOf ('"get-m3u8-link"') - 100; if (a < 0) throw ("!!!");
    t = textData.substr (a, 100); b = t.lastIndexOf ("const", t.lastIndexOf ("const") - 1);
    a += t.indexOf (";", b) + 1; t = pullstring (t.substr (b), " ", "=");

    b = textData.indexOf ("body:", a); b = pullstring (textData.substr (b, 50), "{", ":");
    if (!t || !b) throw ("!!!");

    t = '<!DOCTYPE html><html><body style="display:none"><div id="get-m3u8-link" data="">\n' +
        '<button id="loadVideoBtnOne"></button><button id="loadVideoBtnTwo"></button>\n<script>' +
        textData.substr (0, a) + '\nparent.postMessage ("@" + ' + t + ', "*");\n' +
        textData.substr (a) + '\n<\/script></body></html>';

    a = document.getElementById ("frame"); v = a.contentDocument;
    v.open(); v.write (t); v.close(); t = await getmessage (3); a.src = ""; if (!t) throw ("!!!");
    t = cookies ["thetvapp"] = '{"' + b + '":"' + t + '"}'; await get_link();
  }
}
  catch { url = "" }; return (url);
}
////////////////////

var load_stream = function (url, fmt)
{
  var bstyle = "<body style='margin:0;padding:0;overflow:hidden;background-color:";
  var istyle = " style='position:absolute;border:none;outline:none;width:100%;height:100%'";
  var vstyle = " autoplay controls allowfullscreen ";

  var insert = bstyle + "black'><video" + istyle + vstyle + "id='video'></video></body>";

  var doc = document.getElementById ("frame").contentDocument;
  doc.open(); doc.write ("<!DOCTYPE html>" + insert); doc.close();
  var win = doc.getElementById ("video"); doc = doc.body; 

  var js = get_js ("HLS", !window.Hls);
  js.onload = function() { play_hls (0, url, doc, win, fmt); }
  if (window.Hls) js.onload(); else js.src = "hls_player-1-1-3.js";
}
////////////////////

var get_js = function (type, replace)
{
  var name = type + "_player", js = document.getElementById (name);
  if (js) if (!replace) return js; else js.parentNode.removeChild (js);
  js = document.createElement ("SCRIPT"); js.onerror = function() { err_play (type); }
  js.id = name; document.body.appendChild (js); return js;
}
////////////////////

var err_play = function (error)
{
  alert (error + " player seems to be missing! Server not serving.\n\n" +
    " (o o)  ((( Could be that THEY are watching you ! )))  (o o)\n \n");
}
////////////////////

var hls_quality = function (levels, fmt)
{
  if (!fmt) return (-1); var f = formats_m3u8 (levels);
  fmt = getformat (f, fmt); fmt = argformat (fmt);
  if (fmt >= 0) fmt = f [fmt] - 1; return (fmt);
}
////////////////////

var play_hls = function (frame, url, doc, win, fmt)
{
  var hls_cfg = {
    debug: false,
    startLevel: 2,
    autoStartLoad: false,
    capLevelOnFPSDrop: true,
    capLevelToPlayerSize: true,
    defaultAudioCodec: "mp4a.40.5",
    fpsDroppedMonitoringPeriod: 3000,
    fpsDroppedMonitoringThreshold: 0.1,
    minAutoBitrate: 350000,
    enableWebVTT: false,
    enableCEA708Captions: false
  };

  var vid = new Hls (hls_cfg); vid.loadSource (url); vid.attachMedia (win);

  vid.on (Hls.Events.MANIFEST_LOADED, function (event,data)
    { vid.loadLevel = hls_quality (vid.levels, fmt); vid.startLoad(); });

  doc.onbeforeunload = function() { vid.destroy(); }
}
////////////////////

var formats_m3u8 = function (levels)
{
  var i, j, k, w, h, b, f = [0,0,0,0,0,0,0,0], p = [0,0,0,0], r = [0,0,0,0];

  if (!levels || !levels.length) return (f);

  for (i = 0; i < levels.length; i++)
  {
    k = levels [i]; w = k.width || 0; h = k.height || 0; b = k.bitrate || 0;

    if (!h) if ((b -= 175000) < 0) continue; else
      { h = Math.trunc (Math.sqrt (b * 0.2)); b = -1 } else
        { if (b) b -= w * h * 2 + 250000; if (b > 0) b *= 3; else b *= -2; }

    if ((j = chkformat (h)) < 0 || (b < 0 && r[j])) continue;

    k = ((b >= 0 && !r[j]) || (p[j] == h && b < r[j]));
    if (k || p[j] < h) { f[j] = i + 1; p[j] = h; r[j] = b + 1; }
  }

  if (f[1] && p[0] < 240) f[0] = 0; return (f);
}
////////////////////

var chkformat = function (q)
{
  if (q > 100 && q <= 432) return 0;
  if (q > 432 && q <= 580) return 1;
  if (q > 580 && q <= 800) return 2;

  return -1;
}
////////////////////

var argformat = function (fmt)
{
  if (fmt == 18) return 0;
  if (fmt == 19) return 1;
  if (fmt == 22) return 2;
  if (fmt == 37) return 3;
  if (fmt == 43) return 4;
  if (fmt == 44) return 5;
  if (fmt == 45) return 6;
  if (fmt == 46) return 7;

  return -1;
}
////////////////////

var getformat = function (f, fmt)
{
  if (f[0] <= 0 && f[1] <= 0 && f[2] <= 0 && f[3] <= 0)
  {
    if (fmt == 18) fmt = 43;
    if (fmt == 19) fmt = 44;
    if (fmt == 22) fmt = 45;
    if (fmt == 37) fmt = 46;
  }

  if (f[4] <= 0 && f[5] <= 0 && f[6] <= 0 && f[7] <= 0)
  {
    if (fmt == 43) fmt = 18;
    if (fmt == 44) fmt = 19;
    if (fmt == 45) fmt = 22;
    if (fmt == 46) fmt = 37;
  }

  var m = 0, n = fmt;

  if (n == 37) if (f[3]) m = n; else n = 22;
  if (n == 22) if (f[2]) m = n; else n = 19;
  if (n == 19) if (f[1]) m = n; else n = 18;
  if (n == 18) if (f[0]) m = n;

  n = fmt; if (m) return m;

  if (n == 18) if (f[0]) m = n; else n = 19;
  if (n == 19) if (f[1]) m = n; else n = 22;
  if (n == 22) if (f[2]) m = n; else n = 37;
  if (n == 37) if (f[3]) m = n;

  n = fmt; if (m) return m;

  if (n == 46) if (f[7]) m = n; else n = 45;
  if (n == 45) if (f[6]) m = n; else n = 44;
  if (n == 44) if (f[5]) m = n; else n = 43;
  if (n == 43) if (f[4]) m = n;

  n = fmt; if (m) return m;

  if (n == 43) if (f[4]) m = n; else n = 44;
  if (n == 44) if (f[5]) m = n; else n = 45;
  if (n == 45) if (f[6]) m = n; else n = 46;
  if (n == 46) if (f[7]) m = n;

  return m;
}
////////////////////

</script></body></html>

