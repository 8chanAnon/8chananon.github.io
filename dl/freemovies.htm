<!DOCTYPE html><html><head>

<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">

<title>Free Movies</title>

<style type="text/css">

body {
  font-size: 17px; line-height: 20px;
  font-family: 'times new roman', serif; 
  color: maroon; background-color: navajowhite;
  text-align: center;
}

.widevid {
  width: 736px; height: 414px;
  position: relative; overflow: hidden;
  border: 2px solid red; background-color: indigo;
}

.widevid:fullscreen {
  border: none;
}

.msgbox {
  position: absolute; top: 36%; left: 40%; right: 40%; display: block;
  text-align: center; border-radius: 10px;
  color: paleturquoise; background-color: slateblue;
  font-style: italic; cursor: pointer;
}

iframe {
  width: 100%; height: 100%;
  position: absolute; border: none;
  background-color: transparent;
  pointer-events: auto;
}

input {
  height: 17px; font-size: 13px;
  font-family: 'helvetica', sans-serif;
  border-width: 2px; border-style: solid;
  border-color: tan lemonchiffon lemonchiffon burlywood;
  padding: 3px 5px 1px 5px; caret-color: navy; outline: none;
}

input[type=radio], input[type=checkbox] {
  vertical-align: middle; margin: -2px 1px 1px 2px;
  filter: contrast(1.0) brightness(1.2) opacity(90%);
}

table {
  display: inline-block; border: 3px solid green;
}

td.textbox {
  width: 30vw; max-width: 250px;
  padding: 0 2px 0 0; vertical-align: top;
  text-align: center; white-space: nowrap;
}

td.vidbox {
  font-size: 15px; line-height: normal;
  padding: 0 0 0 2px; vertical-align: middle;
  text-align: left; border-left: 1px solid firebrick;
}

button {
  width: auto; height: auto; margin: 0; padding: 2px 12px 1px;
  line-height: 20px; font-size: 14px; font-family: helvetica, sans-serif;
  outline: none; border: 1px solid peru; border-radius: 5px;
  color: slateblue; background-color: blanchedalmond;
}

button:hover:not(:active) {
  background-color: gainsboro;
}

::selection {
  color: yellow; background-color: orchid;
}

r_ { color: crimson; }
g_ { color: seagreen; }
b_ { color: blue; }

</style></head><body onload="javascript:start()">

<h2 style="text-align:center;margin:7px 0 10px 0"><r_>Free Movies</r_></h2>

<table><tr><td class="textbox">

<span style="display:block;font-size:22px;margin:15px 0 -8px">&#x1f408;</span>
<span style="display:inline-block;text-align:left;font-size:16px">

<br><input type=radio name="tv" onclick="javascript:tv(this)" value="v=ewtimoghnf49"> Beverly Hills Cop: Axel F
<br><input type=radio name="tv" onclick="javascript:tv(this)" value="v=nk2w6eywf5t3"> Civil War
<br><input type=radio name="tv" onclick="javascript:tv(this)" value="v=w3dzakp1wset"> Deadpool & Wolverine
<br><input type=radio name="tv" onclick="javascript:tv(this)" value="v=e3kdf5hizg45"> Dune: Part Two
<br><input type=radio name="tv" onclick="javascript:tv(this)" value="v=pzi61060s8sv"> Furiosa: A Mad Max Saga
<br><input type=radio name="tv" onclick="javascript:tv(this)" value="v=je7wtgvohy94"> Godzilla Minus One
<br><input type=radio name="tv" onclick="javascript:tv(this)" value="v=lem3xsvj2em4"> Godzilla x Kong: New Empire
<br><input type=radio name="tv" onclick="javascript:tv(this)" value="v=48c2w6pehna3"> Monkey Man
<br><input type=radio name="tv" onclick="javascript:tv(this)" value="v=1c2fqm0jhenj"> Oppenheimer
<br><input type=radio name="tv" onclick="javascript:tv(this)" value="v=gc8i2g5od4g4"> Poor Things
<br><input type=radio name="tv" onclick="javascript:tv(this)" value="v=j0nk5ln4s107"> Road House
<br><input type=radio name="tv" onclick="javascript:tv(this)" value="v=42cfvx3kjwh7"> The Beekeeper
<br><input type=radio name="tv" onclick="javascript:tv(this)" value="v=vsqmgcmdg4bv"> The Creator
<br><input type=radio name="tv" onclick="javascript:tv(this)" value="v=zmidmog422pt"> The Fall Guy
<br><input type=radio name="tv" onclick="javascript:tv(this)" value="v=nzlpa8ucp66e"> The Watchers

</span><span style="display:block;font-size:22px;margin:14px 0 0;transform:scale(-1,1)">&#x1f408;</span>

</td><td class="vidbox">

<div class="widevid"><h2 id="msg" class="msgbox">No Video</h2>
<iframe id="frame" autoplay allowfullscreen controls></iframe>

</div></td></tr></table>

<div style="margin:12px 0 12px 0;color:green">
<button onclick="javascript:play_video()">Play</button> &nbsp;
<input type=text style="width:400px"> &nbsp;
<input type=radio name="scale" onclick="javascript:vid_scaler()" value="0" checked> Normal&nbsp;
<input type=radio name="scale" onclick="javascript:vid_scaler()" value="1"> Auto-fit&nbsp;
<input type=radio name="scale" onclick="javascript:vid_scaler()" value="2"> Force-fit &nbsp;
<input type=checkbox name="brite" onclick="javascript:vid_scaler()"> Brighter &nbsp;
<button onclick="javascript:stop_video()">Stop</button>

</div><script>

var cors_bypass = cors_kraker = "https://kraker-remote.vercel.app/?url=";
var response, textData, jsonData, video, busy = 0;

var line = document.querySelector ("input[type=text]");

var start = function ()
{
}
////////////////////

var is_busy = function ()
{
  if (busy) return 1;
  document.getElementById ("msg").innerHTML = "Busy";
  busy = 1; return 0;
}
////////////////////

var no_fail = function ()
{
  if (!busy) document.getElementById ("msg").innerHTML = "Error";
  var Busy = busy; busy = 0; return (Busy);
}
////////////////////

var pullstring = function (s, t, u)
{
  var m = t.length, n = s.indexOf (t) + m;
  m = n < m ? -1 : (u ? s.indexOf (u, n) : s.length);
  return (m < 0 ? "" : s.substr (n, m - n));
}
////////////////////

var get_checked = function (name, value)
{
  var i = 0, j = value, k = document.getElementsByName (name);
  if (k && k.length) for (; i < k.length; i++) if (k [i].checked) j = k [i].value;
  if (isNaN (i = parseFloat (j))) return (j); else return (i);
}
////////////////////

var stop_video = function ()
{
  var vid = document.getElementById ("frame"), win = vid.parentNode;
  vid.src = "about:blank"; win.removeChild (vid); win.appendChild (vid);
  video = null; if (!busy) document.getElementById ("msg").innerHTML = "No Video";
}
////////////////////

var play_video = function ()
{
  var url = line.value.trim(); if (busy || !url) return;
  stop_video(); load_stream (url, url.includes (".m3u8"));
}
////////////////////

var tv = function (item)
{
  if (busy) return; stop_video(); item = item.value.split ("=");

  if (item [0] == "v") req_vtube (item [1]);
}
////////////////////

const req_vtube = async (id) =>
{
  if (is_busy ()) return; var url = "https://vtube.network/" + id;

try
{
  response = await fetch (cors_bypass + url);
  textData = await response.text();

  var sub = pullstring (textData, "p,a,c,k,e,d", "<\/script>"); if (!sub) throw ("!!!");
  eval ("(sub=function(p,a,c,k,e,d" + sub); url = pullstring (sub, 'file:"', '"');

} catch (err) { console.log (err); busy = 0; }

  if (no_fail (frame)) load_stream (url, url.includes (".m3u8"));
}
////////////////////

var load_stream = function (url, hls)
{
  var bstyle = "<body style='margin:0;padding:0;overflow:hidden;background-color:";
  var istyle = " style='position:absolute;border:none;outline:none;width:100%;height:100%'";
  var vstyle = " autoplay allowfullscreen ";

  var insert = bstyle + "black'><video" + istyle + vstyle + "id='video'></video></body>";

  var doc = document.getElementById ("frame").contentDocument;
  doc.open(); doc.write ("<!DOCTYPE html>" + insert); doc.close();
  var win = doc.getElementById ("video"); doc = doc.body;

  line.value = url; video = win; video_w = video_h = 0; create_controls (win);

  win.onerror = function() { vid_error (win); }
  win.onloadedmetadata = function() { vid_scaler (this.videoWidth, this.videoHeight); }

  if (!hls) { win.src = url; return; }

  var js = get_js ("HLS", !window.Hls);
  js.onload = function() { play_hls (0, url, doc, win, 19); }
  if (window.Hls) js.onload(); else js.src = "hls_player-1-1-3.js";
}
////////////////////

var get_js = function (type, replace)
{
  var name = type + "_player", js = document.getElementById (name);
  if (js) if (!replace) return js; else js.parentNode.removeChild (js);
  js = document.createElement ("SCRIPT"); js.onerror = function() { err_play (type); }
  js.id = name; document.body.appendChild (js); return js;
}
////////////////////

var err_play = function (error)
{
  alert (error + " player seems to be missing! Server not serving.\n\n" +
    " (o o)  ((( Could be that THEY are watching you ! )))  (o o)\n \n");
}
////////////////////

var hls_quality = function (levels, fmt)
{
  if (!fmt) return (-1); var f = formats_m3u8 (levels);
  fmt = getformat (f, fmt); fmt = argformat (fmt);
  if (fmt >= 0) fmt = f [fmt] - 1; return (fmt);
}
////////////////////

var play_hls = function (frame, url, doc, win, fmt)
{
  var hls_cfg = {
    debug: false,
    startLevel: 2,
    autoStartLoad: false,
    capLevelOnFPSDrop: true,
    capLevelToPlayerSize: true,
    defaultAudioCodec: "mp4a.40.5",
    fpsDroppedMonitoringPeriod: 3000,
    fpsDroppedMonitoringThreshold: 0.1,
    minAutoBitrate: 350000,
    enableWebVTT: false,
    enableCEA708Captions: false
  };

  var vid = new Hls (hls_cfg); vid.loadSource (url); vid.attachMedia (win);

  vid.on (Hls.Events.ERROR, function (event,data) { if (data.fatal) vid_error (win); });

  vid.on (Hls.Events.MANIFEST_LOADED, function (event, data)
    { vid.loadLevel = hls_quality (vid.levels, fmt); vid.startLoad(); });

  vid.on (Hls.Events.BUFFER_CODECS, function (event,data) {
    var x = data.video; if (x) vid_scaler (x.metadata.width, x.metadata.height); });

  doc.onbeforeunload = function() { vid.destroy(); }
}
////////////////////

var formats_m3u8 = function (levels)
{
  var i, j, k, w, h, b, f = [0,0,0,0,0,0,0,0], p = [0,0,0,0], r = [0,0,0,0];

  if (!levels || !levels.length) return (f);

  for (i = 0; i < levels.length; i++)
  {
    k = levels [i]; w = k.width || 0; h = k.height || 0; b = k.bitrate || 0;

    if (!h) if ((b -= 175000) < 0) continue; else
      { h = Math.trunc (Math.sqrt (b * 0.2)); b = -1 } else
        { if (b) b -= w * h * 2 + 250000; if (b > 0) b *= 3; else b *= -2; }

    if ((j = chkformat (h)) < 0 || (b < 0 && r[j])) continue;

    k = ((b >= 0 && !r[j]) || (p[j] == h && b < r[j]));
    if (k || p[j] < h) { f[j] = i + 1; p[j] = h; r[j] = b + 1; }
  }

  if (f[1] && p[0] < 240) f[0] = 0; return (f);
}
////////////////////

var chkformat = function (q)
{
  if (q > 100 && q <= 432) return 0;
  if (q > 432 && q <= 580) return 1;
  if (q > 580 && q <= 800) return 2;

  return -1;
}
////////////////////

var argformat = function (fmt)
{
  if (fmt == 18) return 0;
  if (fmt == 19) return 1;
  if (fmt == 22) return 2;
  if (fmt == 37) return 3;
  if (fmt == 43) return 4;
  if (fmt == 44) return 5;
  if (fmt == 45) return 6;
  if (fmt == 46) return 7;

  return -1;
}
////////////////////

var getformat = function (f, fmt)
{
  if (f[0] <= 0 && f[1] <= 0 && f[2] <= 0 && f[3] <= 0)
  {
    if (fmt == 18) fmt = 43;
    if (fmt == 19) fmt = 44;
    if (fmt == 22) fmt = 45;
    if (fmt == 37) fmt = 46;
  }

  if (f[4] <= 0 && f[5] <= 0 && f[6] <= 0 && f[7] <= 0)
  {
    if (fmt == 43) fmt = 18;
    if (fmt == 44) fmt = 19;
    if (fmt == 45) fmt = 22;
    if (fmt == 46) fmt = 37;
  }

  var m = 0, n = fmt;

  if (n == 37) if (f[3]) m = n; else n = 22;
  if (n == 22) if (f[2]) m = n; else n = 19;
  if (n == 19) if (f[1]) m = n; else n = 18;
  if (n == 18) if (f[0]) m = n;

  n = fmt; if (m) return m;

  if (n == 18) if (f[0]) m = n; else n = 19;
  if (n == 19) if (f[1]) m = n; else n = 22;
  if (n == 22) if (f[2]) m = n; else n = 37;
  if (n == 37) if (f[3]) m = n;

  n = fmt; if (m) return m;

  if (n == 46) if (f[7]) m = n; else n = 45;
  if (n == 45) if (f[6]) m = n; else n = 44;
  if (n == 44) if (f[5]) m = n; else n = 43;
  if (n == 43) if (f[4]) m = n;

  n = fmt; if (m) return m;

  if (n == 43) if (f[4]) m = n; else n = 44;
  if (n == 44) if (f[5]) m = n; else n = 45;
  if (n == 45) if (f[6]) m = n; else n = 46;
  if (n == 46) if (f[7]) m = n;

  return m;
}
////////////////////

</script>

<!-- This element must be cloned and inserted into a video frame. -->

<div id="video_control" style="display:none">

<div class="v-control">
  <input type=range value=1 min=0 max=1 step=0.01 style="width:calc(70% - 250px)">
  <input type=range value=1 min=0 max=1 step=0.05 style="width:calc(30% - 110px);max-width:150px">
  <input type=text style="width:72px;color:azure;background-color:transparent" disabled>
  <input type=text style="width:72px;color:azure;background-color:transparent" disabled>
  <button class="v-seek" style="width:42px">15s</button>
  <button class="v-seek" style="width:36px">1m</button>
  <button class="v-seek" style="width:36px">5m</button>
  <span class="v-alpha" style="width:14px;margin-left:1px">FS</span>
</div>

<style type="text/css">

.v-control {
  position: absolute; bottom: 0; text-align: center;
  width: 100%; margin: 0; padding: 4px 0 4px 0;
  font-family: 'segoe ui', serif;
  font-size: 14px; line-height: 19px;
  background-color: steelblue; cursor: default;
  user-select: none;
}

.v-control span {
  cursor: pointer;
}

.v-control input {
  appearance: none; -moz-appearance: none; -webkit-appearance: none;
  height: 13px; text-align: center; vertical-align: top;
  padding: 1px 3px 1px 3px; margin: 2px 1px 2px 1px;
  border: 1px solid darksalmon; border-radius: 7px;
  color: darkviolet; background-color: lightpink;
  font-family: 'consolas', 'lucida console', monospace;
  font-size: 14px; line-height: 12px;
  user-select: auto; outline: none;
}

.v-control input::-moz-range-thumb {
  -moz-appearance: none; width: 4px; height: 19px;
  background: greenyellow; border: none; border-radius: 0;
}

.v-control input::-webkit-slider-thumb {
  -webkit-appearance: none; width: 4px; height: 19px;
  background: greenyellow; border: none; border-radius: 0;
}

.v-control button {
  height: 17px; vertical-align: top; margin: 2px 0 2px 0; padding: 0;
  border-style: solid; border-radius: 4px; border-width: 1px 6px 1px 6px;
  outline: none; font-family: 'consolas', 'lucida console', monospace;
  font-size: 14px; line-height: 12px;
  cursor: pointer; outline: none;
}

.v-control button:hover {
  border-color: mediumturquoise;
}

.v-seek {
  border-color: mediumseagreen; color: snow; background-color: mediumslateblue;
}

.v-alpha {
  display: inline-block; vertical-align: top;
  padding: 0 3px 1px 3px; margin: 1px 0 0 0;
  color: yellow; background-color: mediumpurple;
}

.anim-bar {
  animation-name: waiting;
  animation-delay: 5s;
  animation-duration: 2.5s;
  animation-fill-mode: both;
  animation-direction: normal;
  animation-timing-function: linear;
  animation-iteration-count: infinite;
}

@keyframes waiting {
   0%  { background-color: lightpink; }
  30%  { background-color: lightpink; }
  70%  { background-color: salmon; }
 100%  { background-color: lightpink; }
}

</style></div>

<!-- Video control script - NOT inserted into a video frame. -->

<script>

var create_controls = function (vid)
{
  var control = document.getElementById ("video_control").cloneNode (true);

  var doc = vid.ownerDocument;		// document
  var ctr = control.firstElementChild;	// video control
  var sib = ctr.children;		// video control elements

  sib [0].onchange = function() { vid_click (this, 1); }
  sib [1].onchange = function() { vid_click (this, 3); }
  sib [7].onclick  = function() { vid_click (this, 7); }

  vid.onended      = function() { vid_cntrl (this, 1); }
  vid.onclick      = function() { vid_cntrl (this, 2); }
  vid.onplay       = function() { vid_cntrl (this, 3); }
  vid.onpause      = function() { vid_cntrl (this, 4); }
  vid.onseeking    = function() { vid_cntrl (this, 5); }
  vid.onwaiting    = function() { vid_cntrl (this, 6); }
  vid.onstalled    = function() { vid_cntrl (this, 7); }
  vid.ontimeupdate = function() { vid_cntrl (this, 8); }

  vid.onmousemove = function(e) { vid_event (e, 1); }
  ctr.onclick     = function(e) { vid_event (e, 2); }

  ctr.onmouseleave = function() { vid_cntrl (vid, 0); }
  ctr.onmouseenter = function() { vid_cntrl (vid, 1); }

  sib [0].classList.add ("anim-bar");
  control.style.display = "inline-block";
  vid.checked = 0; ctr.step = 1; ctr.checked = 30;

  doc.body.appendChild (control);
}
////////////////////

var vid_error = function (vid)
{
  var ctr = vid.nextElementSibling.firstElementChild, sib = ctr.children;
  vid.disabled = true; vid_cursor (vid, true); ctr.style.display = "initial";
  sib [0].classList.remove ("anim-bar"); sib [0].style.background = "crimson";
  if (!sib [2].value) sib [2].value = "ERROR"; sib [3].value = "!!!!!";
}
////////////////////

var vid_cntrl = function (vid, mode)
{
  var ctr = vid.nextElementSibling.firstElementChild, sib = ctr.children;
  if (ctr.value == undefined && mode > 2 && mode < 8) return;
  if (vid.disabled && mode > 2 && mode < 9) return;

  var t = vid.currentTime, d = vid.duration;
  if (isNaN (t)) t = 0; if (isNaN (d) || !isFinite (d)) d = 0;
  var z = (t > 0 && d > 0) ? 400 * t / d : 0; z = Math.round (z) * 0.25;

  var no_action = ctr.value == undefined || vid.disabled;
  var got_video = vid.videoWidth && vid.videoHeight;

  if (mode == 0)  // hide
  {
    ctr.disabled = false; if (no_action) return;
    ctr.value = 4; if (vid.paused && got_video) ctr.style.display = "none";
  }
  if (mode == 1)  // show
  {
    ctr.disabled = true; if (no_action) return;
    ctr.value = 0; ctr.style.display = "initial";
  }
  if (mode == 2)  // play/pause
  {
    vid_cursor (vid, true);
    if (vid.paused) vid.play(); else vid.pause();
    if (no_action) vid_external (vid.value, mode); else
      if (!ctr.disabled && !got_video) ctr.style.display = "none";
  }
  if (mode == 3)  // is playing
  {
    vid_external (vid.value, mode); mode = 10;
    // special case of video paused at video start
    if (!ctr.disabled && ctr.value <= 0) ctr.value = 1 - ctr.value;
  }
  if (mode == 4)  // is paused
  {
    vid_external (vid.value, mode); mode = 10;
    // special case of video paused while doing countdown or countup
    if (!ctr.disabled && ctr.value) { ctr.style.display = "none"; ctr.value = 0; }
  }
  if (mode == 5)  // is seeking
  {
    sib [0].style.background = "linear-gradient(90deg, darkorange " + z + "%, orange 0%)";
  }
  if (mode == 6)  // is waiting
  {
    sib [0].style.background = "linear-gradient(90deg, darkorange " + z + "%, orange 0%)";
    setTimeout (function() { vid_timer (vid, ctr, t); }, 2000);
  }
  if (mode == 7)  // is stalled
  {
    sib [0].style.background = "linear-gradient(90deg, deeppink " + z + "%, hotpink 0%)";
    setTimeout (function() { vid_timer (vid, ctr, t); }, 2000);
  }

  if (mode == 8)  // time update
  {
    if (t == vid.checked) return; vid.checked = t;
    var v = ctr.value, ts = Math.round (t), ds = Math.round (d);
    var th = Math.trunc (ts / 3600), dh = Math.trunc (ds / 3600); ts -= th * 3600; ds -= dh * 3600;
    var tm = Math.trunc (ts / 60), dm = Math.trunc (ds / 60); ts -= tm * 60; ds -= dm * 60;

    sib [0].style.background = "linear-gradient(90deg, skyblue " + z + "%, transparent 0%)";
    sib [2].value = th + ":" + (tm < 10 ? "0" : "") + tm + ":" + (ts < 10 ? "0" : "") + ts;
    sib [3].value = dh + ":" + (dm < 10 ? "0" : "") + dm + ":" + (ds < 10 ? "0" : "") + ds;

    if (v != undefined) v = v * 1; else
    {
      v = (vid.paused || ctr.disabled) ? -5 : 6;
      mode = 10; sib [0].classList.remove ("anim-bar");
    }
    if (v > 0 && !--v) { if (got_video) ctr.style.display = "none"; v = -5; }
    if (v < 0 && !++v) vid_cursor (vid, false); ctr.value = v;
  }
}
////////////////////

var vid_timer = function (vid, ctr, time)  // catch wait/stall false flags
{
  if (vid.currentTime == time)
  {
    if (!ctr.disabled) ctr.value = 4; ctr.style.display = "initial";
  }
}
////////////////////

var vid_cursor = function (vid, mode)
{
  var style = mode ? "default" : "none"; if (vid.disabled) style = "default";
  vid.style.cursor = vid.nextElementSibling.children [1].style.cursor = style;
}
////////////////////

var vid_external = function (param, mode)
{
}
////////////////////

var vid_click = function (item, mode)
{
  var min_vt = 0, ctr = item.parentNode, vid = ctr.parentNode.previousElementSibling;

  if (mode == 1)
  {
    var t = vid.duration * item.value; if (isNaN (t) || !isFinite (t)) return;
    if (t < min_vt) t = min_vt; vid.currentTime = t; //ctr.children [11].value = t.toFixed(2);
  }

  if (mode == 3) { var m = vid.muted; vid.muted = true; vid.volume = item.value; vid.muted = m; }

  if (mode == 7) if (vid.ownerDocument.fullscreen || vid.ownerDocument.fullscreenElement)
    vid.ownerDocument.exitFullscreen(); else vid.parentNode.requestFullscreen();
}
////////////////////

var vid_event = function (event, type)
{
  var min_vt = 0, item = event.target, node = item.nodeName;

  if (type == 1)
  {
    if (node != "VIDEO") item = item.parentNode.previousElementSibling;

    var ctr = item.nextElementSibling.firstElementChild;
    vid_cursor (item, true); if (ctr.value == undefined) return;

    if (ctr.value <= 0) ctr.value = -8;
    if (event.clientY > item.clientHeight - ctr.checked) vid_cntrl (item, 1);
  }
  if (type != 2 || node != "BUTTON") return;

  var ctr = item.parentNode, vid = ctr.parentNode.previousElementSibling;

  var a = item.offsetLeft, b = item.offsetWidth / 2;
  var c = Math.abs (ctr.step), d = ctr.clientWidth / 2;

  var dir = (event.clientX < (a + b - d) * c + d) ? -1 : 1;
  var txt = item.innerText, speed = txt * 1;

  if (speed)
  {
    speed += dir * 0.1; if (speed > 0.4) speed += dir * 0.1;
    if (speed > 2) speed += dir * 0.3; if (speed < 0.1) speed = 0.1; if (speed > 5) speed = 5;
    item.innerText = speed.toFixed(1); vid.playbackRate = speed; return;
  }

  if (txt == "15s") dir *= 15;
  if (txt == "1m" ) dir *= 60;
  if (txt == "5m" ) dir *= 300;

  if ((dir += vid.currentTime) < min_vt) dir = min_vt;
  vid.currentTime = dir > vid.duration ? vid.duration : dir;
}
////////////////////

var vid_scaler = function (a, b)
{
  if (!video) return; if (a && b) { video_w = a; video_h = b; }

  a = video_w; b = video_h; a = (a && b) ? (a * 9) / (b * 16) : 1;
  b = get_checked ("scale", 0); if (b > 1) a = 1.4; if (!b || a < 1) a = 1;
  b = get_checked ("brite", 0) ? "brightness(1.3) contrast(0.7) saturate(0.7)" : "";

  video.style.transform = "scale(" + a + ")"; video.style.filter = b;
}
////////////////////

</script></body></html>

