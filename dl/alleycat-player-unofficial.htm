<!DOCTYPE html><html><head>

<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="referrer" content="no-referrer">

<title>Alleycat Player</title>

<style type="text/css">

body {
  font-size: 16px; line-height: 19px;
  font-family: 'times new roman', serif; 
  color: maroon; background-color: navajowhite;
}

.widevid {
  width: 736px; height: 414px;
  position: relative; overflow: hidden;
  border: 2px solid red; background-color: indigo;
}

.widevid:fullscreen {
  border: none;
}

.widevid img {
  position: absolute; width: 100%;
  top: 0; left: 0; right: 0; bottom: 0;
  height: auto; margin: auto; border: none;
}

iframe {
  width: 100%; height: 100%;
  position: absolute; border: none;
  background-color: transparent;
  pointer-events: auto;
}

.msgbox {
  position: absolute; top: 35%; left: 40%; right: 40%; display: block;
  text-align: center; border-radius: 10px;
  color: paleturquoise; background-color: slateblue;
  font-style: italic; cursor: pointer;
}

.popbox {
  z-index: -1; width: 100%; height: 100%;
  position: absolute; pointer-events: none;
}

.popbox table {
  width: calc(100% - 5px); border: none; margin: 0 2px; table-layout: fixed;
}

.popbox td {
  padding: 6px 4px 0 5px;
}

.popbox button {
  width: 100%; height: auto;
  text-align: left; text-overflow: ellipsis;
  white-space: nowrap; overflow: hidden;
  font-size: 12px; font-family: 'segoe ui', serif;
  line-height: 14px; padding: 2px 5px 2px 5px;
  border-width: 1px; color: maroon; pointer-events: auto;
}

.ranger button {
  vertical-align: top;
  font-size: 13px; line-height: 17px;
  padding: 2px 4px 1px 3px; margin-top: 1px;
  color: maroon; background-color: blanchedalmond;
}

.ranger input {
  width: 60px;
}

input {
  height: 17px; font-size: 13px;
  font-family: 'helvetica', sans-serif;
  border-width: 2px; border-style: solid;
  border-color: tan lemonchiffon lemonchiffon burlywood;
  padding: 3px 5px 1px 5px; caret-color: navy; outline: none;
}

input[type=radio] {
  vertical-align: bottom; margin: 0 1px 1px 2px;
  filter: contrast(1.0) brightness(1.2) opacity(90%);
}

input[type=checkbox] {
  vertical-align: bottom; margin: 0 2px 1px 2px;
  filter: contrast(1.0) brightness(1.2) opacity(90%);
}

input.idspec {
  width: 100%; margin: -4px 0 -1px -7px;
  color: sienna; background-color: cornsilk;
}

input.urlspec {
  width: 60%; padding: 4px 6px 3px 6px; margin: -2px 1px 1px 1px;
  color: slateblue; background-color: cornsilk;
}

input.static {
  margin: 0 1px 0 2px; padding: 4px 0 3px 0; text-align: center;
  color: mediumvioletred; background-color: papayawhip;
  border-radius: 3px; border: 1px solid darkorange;
}

.dropbox {
  width: 100%; position: relative;
  display: inline-block; white-space: nowrap;
  color: firebrick; background-color: papayawhip;
}

.dropbox input {
  vertical-align: top;
  width: calc(100% - 32px); margin: -3px 0 -1px 0;
  color: inherit; background-color: inherit;
}

.dropbox button, .dropbox button:hover:active {
  vertical-align: top; width: 24px; height: 25px;
  margin: -3px 0 -1px 0; padding: 0 0 4px 0;
  line-height: 17px; font-size: 16px; font-family: 'segoe ui', serif;
  font-weight: bold; border-width: 2px; border-style: solid;
  border-color: tan lemonchiffon lemonchiffon burlywood;
  color: indianred; background-color: mistyrose;
}

.dropbox0 {
  width: 160px; color: sienna; background-color: cornsilk;
}

.dropbox1 {
  max-width: 320px; width: calc(100% + 8px); margin-left: -7px;
}

.dropbox2 {
  max-width: 270px; width: calc(100% + 8px); margin-left: -7px;
  margin-bottom: 1px; color: red;
}

.dropbox3 {
  width: 140px; margin-left: -7px;
}

.dropdown {
  z-index: 2; max-height: 50vh;
  position: absolute; display: none;
  overflow-x: hidden; overflow-y: auto;
  margin: 3px 0 0 1px; outline: 1px solid peru;
  border-top: 3px solid transparent;
  border-bottom: 3px solid transparent;
  font-size: 13.5px; font-style: normal; font-weight: normal;
  font-family: 'consolas', 'lucida console', monospace;
  color: darkgreen; background-color: ivory; cursor: default;
}

.dropdown option {
  height: 15px; min-height: 15px; max-height: 15px;
  line-height: 15px; position: relative; text-align: left;
  margin: 0 3px 0 3px; padding: 0 22px 0 6px;
}

.dropdown0 {
}

.dropdown1 {
  max-height: calc(100vh - 165px);
}

.dropdown2 {
  max-height: calc(100vh - 200px);
}

.dropdown3 {
}

.pickpanel {
  z-index: 0; width: 166px; height: auto;
  position: relative; display: inline-block;
  overflow: hidden; margin: -1px 0 -1px 0; padding: 2px;
  outline: 1px solid thistle; border: 2px solid skyblue;
  color: mediumvioletred; background-color: cornsilk;
}

.pickpanel option {
  text-align: center; margin: 0; padding: 0 0 0 2px;
}

table {
  border: 3px solid green;
}

table.list {
  border: 2px solid olivedrab;
}

.ir input {
  height: 17px; margin: 2px 5px -2px -1px;
}

.ir a {
  color: crimson; text-decoration: none;
}

th {
  border: 2px solid lightsalmon;
  color:crimson; background-color: pink;
}

td {
  font-size: 14px; line-height: 13px;
  padding: 0 4px 0 4px; color: saddlebrown;
  text-align: left; vertical-align: top;
}

td.textbox {
  font-size: 14px; line-height: 17px;
  width: 30vw; padding: 0 15px 0 14px;
  text-align: center; white-space: nowrap;
}

td.vidbox {
  font-size: 15px; line-height: normal;
  padding: 0 0 0 2px; vertical-align: middle;
  border-left: 1px solid firebrick;
}

td.grill {
  width: 0; margin: 0; padding: 0;
  vertical-align: middle; text-align: center;
  background: radial-gradient(goldenrod 15%,transparent 40%);
  background-size: 12px 6px; border-left: 1px solid firebrick;
}

button {
  width: auto; height: auto;
  font-size: 12px; line-height: 18px;
  padding: 2px 6px 0 6px; margin: 0;
  font-family: 'helvetica', sans-serif;
  color: darkblue; background-color: powderblue;
  outline: none; border-size: 2px; border-style: solid;
  border-color: #e8e8e8 #9c9c9c #9c9c9c #ececec;
}

button:hover:active {
  border-color: #a8a8a8 #f8f8f8 #f4f4f4 #acacac;
}

button.is_off {
  background-color: pink;
  border-color: #e8e8e8 #9c9c9c #9c9c9c #ececec;
}

button.is_on {
  background-color: lightgreen;
  border-color: #a8a8a8 #f8f8f8 #f4f4f4 #acacac;
}

button.wrapper, button.wrapper:hover:active {
  width: 58px; height: 18px; font-size: 13px; line-height: 16px;
  margin: 0 2px 0 0; padding: 0; border: 1px solid pink;
  color: red; background-color: blanchedalmond;
}

button.stack {
  font-size: 19px; line-height: 23px;
  padding: 2px 10px 1px 10px; background-color: pink;
}

.slider {
  appearance: none; -moz-appearance: none; -webkit-appearance: none;
  background: transparent; border-radius: 7px; border: 2px solid orange;
  vertical-align: top; height: 12px; padding: 0; margin: 4px 0 0 0;
}

.slider::-moz-range-thumb {
  -moz-appearance: none; width: 4px; height: 20px;
  background: powderblue; border: 1px solid cadetblue; border-radius: 0;
}

.slider::-webkit-slider-thumb {
  -webkit-appearance: none; width: 6px; height: 22px;
  background: powderblue; border: 1px solid cadetblue; border-radius: 0;
}

.header {
  padding: 2px 8px 4px 6px; margin-left: -1px;
  color: crimson; background-color: oldlace;
  border: 1px solid lightsalmon; border-radius: 4px;
  font-size: 19px; line-height: 23px; font-weight: bold;
}

.header a {
  color: green; text-decoration: none;
}

span.secret {
  display: none; position: fixed; z-index: 2; text-align: center;
  top: 55px; bottom: auto; left: 0; right: 0; height: auto; width: 600px;
  margin: auto; padding: 5px 12px 7px; border: 2px solid hotpink; border-radius: 8px;
  font-size: 17px; line-height: 24px; color: blue; background-color: mistyrose;
}

.secret input {
  border: 1px solid tan; padding: 3px 5px;
}

.box {
  padding: 4px 3px 2px 2px; outline: 1px solid lightsteelblue;
}

hr {
  border-color: thistle; border-style: solid;
}

hr.skinny {
  border: 0 solid indigo; border-width: 1px 0 0 0;
  padding: 0; margin: 3px -3px;
}

h3.skinny {
  margin: 0 0 6px 1px; padding-top: 4px;
}

h3 {
  vertical-align: top; padding: 0; margin: 0 2px 11px 1px;
}

ul {
  padding: 0 1em 0 1em; list-style: square;
}

li {
  margin: 5px 0 5px 0;
}

::selection {
  color: yellow; background-color: orchid;
}

option:hover {
  color: yellow; background-color: orchid;
}

.mark {
  background-color: lightgray;
}

.show {
  display: block;
}

.r { color: crimson; }
.g { color: seagreen; }
.b { color: blue; }
.w { color: #A02000; }

r_ { color: crimson; }
g_ { color: seagreen; }
b_ { color: blue; }
w_ { color: #A02000; }

</style></head>

<body
  onload="javascript:load_all()" onunload="javascript:dump_all()" onresize="javascript:resize_all()"
  onclick="javascript:MEOW(event)" onkeydown="javascript:MEOW(event)">

<span class="secret">
<big><r_>This video site is protected by a bot challenge.</r_></big><br>
If you click the OK button, you will be sent to a new tab to handle this.<br>
You may have to do this more than once since the cookie can expire.<p></p>
<button onclick="javascript:cookiecutter (1)">OK</button> &nbsp;
<button onclick="javascript:cookiecutter (0)">Cancel</button>
</span>

<div style="text-align:center">

<h1><g_>A</g_><r_>ll</r_><g_>ey</g_><r_>cat</r_> <g_>Pl</g_><r_>ay</r_><g_>er</g_> <r_>v5x</r_></h1>

<big><b_>MEEOWRRR</b_><b> -- Three <g_>&#x1f408;</g_> years old -- (<g_>kittens in the oven</g_>)</b></big>

<p><hr><p>
<div><g_>Pick a Proxy:</g_>&nbsp;
<div class="dropbox dropbox0" style="width:300px"><input type=text disabled
  value="To use this app, you must enable Javascript."><button>+</button>
<div id="proxy" class="dropdown dropdown0">
  <option value="LOCAL" class="r">Kraker Local Proxy Server
  <option value="!https://kraker-remote.vercel.app/?url=" class="b">kraker-remote.vercel.app
  <option value="https://api.allorigins.win/raw?url=">api.allorigins.win
  <option value="https://corsproxy.io/?">corsproxy.io
<!--  <option value="https://cors-proxy.htmldriven.com/">cors-proxy.htmldriven.com -->
  <option value="">None
</div></div>
&nbsp; &nbsp; &nbsp; &nbsp; <b>Go to &nbsp;<a href="#sites">Sites List</a> - <a href="#movies">Movie Sites</a>
 - <a href="#notes">Special Notes</a> - <a href="#livestream">TV & Radio</a></b>
</div>

<p><hr><p>
CORS Unblockers:&nbsp;
<g_>Allow CORS</g_> --
<a href="https://addons.mozilla.org/en-US/firefox/addon/access-control-allow-origin/"
  target=_blank>Firefox</a> or
<a href="https://chrome.google.com/webstore/detail/allow-cors-access-control/lhobafahddgcelffkeicbaginigeejlf"
  target=_blank>Chrome-based</a> &nbsp;
<g_>CORS Everywhere</g_> -- <a href="https://addons.mozilla.org/en-US/firefox/addon/cors-everywhere/"
  target=_blank>Firefox only</a>

<p><hr><p>
<b>Instruction Manuals (<r_>GitHub Pages</r_>) -- </b>
<a href="https://8chananon.github.io/Alleycat-Player/current/installation-v2.htm" target=_blank>Installation</a> --
<a href="https://8chananon.github.io/Alleycat-Player/current/manual-alleycat-v2.htm" target=_blank>Alleycat Player</a> --
<a href="https://8chananon.github.io/Alleycat-Player/current/manual-kraker-v3.htm" target=_blank>Local Proxy Server</a>
&nbsp;|&nbsp; <a href="https://8chananon.github.io" target=_blank>Check for Updates</a>
<p>
If you have not installed the <b>Kraker Local Proxy Server</b> then please go read the Installation Manual.
<br>
Alleycat Player <u>does not auto-update</u>. Please check for an update every two to four weeks at the link shown above.
<p>
<b><b_>Your feedback is appreciated (suggestions or bug reports):</b>&nbsp;
<a target=_blank href="https://8kun.top/alleycat/catalog.html">Alleycat BBS</a>

<p><hr><p>
Press the "<b>End</b>" key to go to the bottom of the page. There you will find links to each of the video viewers.<br>
Pick a station and <b>play the radio</b>. Music soothes the heart and mind. You need to relax in these difficult times.

</div><div>

<p><hr><p>
<b><b_>Release notes for v5x (unofficial release)</b_></b>
<p>
<ul><li>
Added: Gotaku, EMovies, Goojara, Noxx, PressPlay, GDrivePlayer, DoodStream, EplayVid, PkSpeed, Wootly
</li><li>
Removed: KeyMovies, UniqueStream, CloudVideo, Streamzz, UserLoad, VideoBin
</li><li>
Updated: YouTube, Odysee, Twitter, Facebook, TikTok, Fox, ABC, CNBC, MS/NBC, PBS, CBC, CTV, Epoch Times, TubiTV, VidNode, XHamster
</li><li>
Widevine DRM is now supported for CTV (DASH/mpd) and TubiTV (HLS/m3u8).
</li><li>
Updated Rumble to allow page ID to work as embed ID. Example: <g_>https://rumble.com/v13wepf-2000-mules.html</g_>
will work with the "Play ID" option if the string is cut before the hypen. Note that it can sometimes happen that
the wrong video will come up.
</li></ul>

<p><hr><p>
<b>Release notes for v5c (August 7, 2022)</b>
<p>
<b>Update:</b> This version was revised on October 5 due to an error with the HLS/m3u8 (not working). It was trying
to load a file which doesn't exist though it does exist on my system. Sorry about that but nobody complained (as usual).
<ul><li>
Removed: DarkMatter (geo US), LookMovie, HighStream and WolfStream (both broken for a long time)
</li><li>
Updated: Rumble, Odysee, Twitch TV, BBC, BrightCove, VidNode, KeyMovies, XHamster, Streamzz, UserLoad
</li><li>
Updated Youtube to fix some age-gated videos and to bypass the rate limiting which restricts download speed
to about 45K bytes per second. The DASH formats still appear to have some rate limiting in place compared to the normal
formats (110K versus 600K on my DSL connection).
</li><li>
A new site called Gogo-play (<g_>https://gogoplay1.com</g_>) has been added to the Movies Sites list in the
VidNode category. This site is dedicated to anime and most of the content is not reachable from the VidNode site
itself but can be retrieved from there. That is, select "VidNode" in the dropdown list to play a video from Gogo-play.
</li></ul>

<p><hr><p>
<b>Release notes for v5b (March 25, 2022)</b>
<p>
<ul><li>
Updated: TikTok, TEDTalks, Bloomberg, Epoch Times, VidNode, StreamTape
</li><li>
Added: DarkMatter, KeyMovies, LookMovie, Streamzz, UserLoad, VOE
</li><li>
Removed: ItemFix, Minds, Ask4Movie, OpenLoadMovies, WatchCartoons
</li><li>
Moved Brightcove to the News section because the sites covered are news sites.
</li></ul><p>
VidNode has changed its domain again (it is now <g_>vidembed.io</g_>), although <g_>vidnode.net</g_> will redirect to it.
I read on TorrentFreak (<g_>https://torrentfreak.com</g_>) that the domain <g_>vidcloud9.com</g_> was being targeted by
the usual "copyright" defenders so I guess VidNode is playing hard to catch (kek). Also, an encryption algo was added to
the process of extracting the video link. Stuff like this has yet to defeat me though I admit that it can be tiresome to
deal with. In the case of VidNode, it is worth the effort. Hopefully, I won't need to update again anytime soon.
<p>
There was a small change to the way the video link is handled with the US Internet TV trio (<g_>ustv247.tv, ustvgo.tv,
watchnewslive.tv</g_>). There is an interesting story behind this and <g_>123live.tv</g_> which is now
<g_>live94today.com</g_>, redirecting from the previous domain <g_>123tv.live</g_>. Yeah, it can be tricky to keep up
with these domain changes but that's the game that has to be played. I still don't get how the TV trio seems like a
protected group though. Anyway, some months ago the TV trio changed their sites to use encryption for the video link,
presumably to guard against the Kodi addons that were stealing from <g_>ustvgo.tv</g_>. I cracked the encryption but it
looks like the Kodi addons got stopped dead. I'm only guessing, of course. The encryption stayed in place for
several months and then it got dropped (shortly before the last Alleycat update). The video link is now in the clear
with no protection. Why? Also, the TV trio has been vacillating about forcing VPN access to some of the channels. For a
while, the sites were unusable and I had to grab TV links from other sites. Now, it's just a handful of channels other
than the sports channels that are VPN-restricted. The encryption on <g_>123tv.live</g_> has been in place for over a year
and hasn't changed at all. However, for a period of two or three months, they added the Google Invisible Captcha to the
encryption process and I couldn't crack it for a few reasons which have nothing to do with the encryption itself. Why
was it dropped? Google stopped it or maybe they couldn't justify paying Google for the captcha account. Anyway, things
appear to be pretty stable right now. I managed to restore the sports channels (<g_>ustream.to </g_> died) by going
through <g_>tv247.us</g_> which doesn't use any method to protect the video links. It's been that way for several months
so I guess it'll be staying that way (knock on wood).

<p><hr><p>
<b>Release notes for v5a (November 17, 2021)</b>
<p>
<ul><li>
Added: Odysee
</li><li>
Removed: Periscope, SoundCloud, DoodStream
</li><li>
Updated: Vimeo, InfoWars, Gab TV, Facebook, PragerU, BBC, Al Jazeera, VidNode, StreamTape, UpStream
</li><li>
HighStream and WolfStream are apparently down right now.
</li><li>
Some channels are down because the feeds from <g_>ustream.to</g_> are not working. Some secondary channels and most of
the sports channels are affected.
</li><li>
Some videos on TubiTV use Widevine DRM. These videos are inaccessible with Alleycat Player.
</li><li>
Replaced default audio player interface in the Internet Radio with custom version.
</li><li>
Adjusted the CSS for the video viewers to fix some issues with Pale Moon. The brightness controls are
still not right but much better than before. Pale Moon adds extra padding to the buttons but no other browser
does that. Browser consistency has improved a lot over the past several years but it is still not perfect.
</li><li>
Created custom border colours for all buttons due to the inconsistency between browsers as to the brightness
of the borders. Some browsers (specifically Waterfox) apply far too much contrast.
</li><li>
Modified the image container for audio-only media in order to fit any size of image ("poster.jpg").
</li></ul>

<p><hr><p>
<a href="https://8chananon.github.io/Alleycat-Player/archive/player/notes-v1a-v2f.htm"
  target=_blank>Release notes for versions 1a to 2f</a><br>
<a href="https://8chananon.github.io/Alleycat-Player/archive/player/notes-v3a-v3e.htm"
  target=_blank>Release notes for versions 3a to 3e</a><br>
<a href="https://8chananon.github.io/Alleycat-Player/archive/player/notes-v4a-v4h.htm"
  target=_blank>Release notes for versions 4a to 4h</a>

<p><hr><p>
<h3 id="notes">Special Notes</h3>
<ul><li>
Vimeo live streaming (m3u8) is supported. Requires Kraker or a CORS unblocker.
</li><li>
Odysee live streaming is supported. Requires Kraker.
</li><li>
InfoWars videos play as m3u8 but the mp4 version is available via the DLoad button.
</li><li>
Only podcasts are supported on iHeartRadio.
</li><li>
For Twitter short links (like "https://t.co/..."), use DIG to get the tweet ID.
</li><li>
Twitter Spaces and Broadcasts are supported (example ID: 1OwxWwDyXnQxQ).
</li><li>
A Rumble page link (example: "https://rumble.com/v1wac7i-world-premier-died-suddenly.html") will work as an
embed ID if you remove the hyphenated part. However, using the page link in this manner can sometimes
retrieve the wrong video.
</li></ul><p>

Sites accessible with a Podcasts DIG:<br>
&nbsp;- https://podcasts.apple.com<br>
&nbsp;- https://itunes.apple.com<br>
&nbsp;- https://www.stitcher.com<br>
&nbsp;- https://radiopublic.com<br>
&nbsp;- https://overcast.fm<br>
&nbsp;- https://www.podbean.com<br>
&nbsp;- https://www.spreaker.com
<p>
Sites accessible with a Brightcove DIG:<br>
&nbsp;- https://www.stuff.co.nz<br>
&nbsp;- https://www.nzherald.co.nz<br>
&nbsp;- https://www.thesun.co.uk<br>
&nbsp;- https://www.the-sun.com<br>
&nbsp;- https://www.channel4.com/news<br>
&nbsp;- https://www.express.co.uk<br>
&nbsp;- https://www.miamiherald.com<br>
&nbsp;- https://time.com<br>
&nbsp;- http://webtv.un.org<br>
&nbsp;- https://www.military.com<br>
&nbsp;- https://peopletv.com<br>
&nbsp;- https://www.skynews.com.au<br>
&nbsp;- https://www.news.com.au<br>
&nbsp;- https://nypost.com

<p><hr><p>
<h3 id="sites" class="skinny"><r_>Sites List</r_>
  <small> -- Go to <a href="#info">Info viewer</a> or <a href="#news">News viewer</a>
    or <a href="#free">Movie viewer</a></small></h3>

<table class="list" style="padding:2px 0">

<tr><td>YouTube		</td><td>mp4/webm	</td><td>&nbsp;#</td><td>KRKR</td><td>$</td>
<td><a target=_blank href="https://www.youtube.com">www.youtube.com</a></td></tr>

<tr><td>BitChute	</td><td>mp4		</td><td>&nbsp;#</td><td>Proxy</td><td>$</td>
<td><a target=_blank href="https://www.bitchute.com">www.bitchute.com</a></td></tr>

<tr><td>Rumble		</td><td>mp4/webm	</td><td>&nbsp;+</td><td>Proxy (DIG)</td><td></td>
<td><a target=_blank href="https://rumble.com">rumble.com</a></td></tr>

<tr><td>Vimeo		</td><td>mp4/m3u8	</td><td>&nbsp;#</td><td>Proxy</td><td></td>
<td><a target=_blank href="https://vimeo.com">vimeo.com</a></td></tr>

<tr><td>InfoWars	</td><td>m3u8/mp4	</td><td>&nbsp;+</td><td>No Proxy</td><td></td>
<td><a target=_blank href="https://www.infowars.com">www.infowars.com</a></td>
<td><a target=_blank href="https://banned.video">banned.video</a></td></tr>

<tr><td>Brighteon	</td><td>m3u8		</td><td>&nbsp;+</td><td>KRAK</td><td>$</td>
<td><a target=_blank href="https://www.brighteon.com">www.brighteon.com</a></td>
<td><a target=_blank href="https://www.naturalnews.com">www.naturalnews.com</a></td></tr>

<tr><td>DailyMotion	</td><td>m3u8		</td><td>&nbsp;#</td><td>CORS</td><td>$</td>
<td><a target=_blank href="https://www.dailymotion.com">www.dailymotion.com</a></td></tr>

<tr><td>153News		</td><td>mp4		</td><td>&nbsp;#</td><td>Proxy</td><td></td>
<td><a target=_blank href="https://153news.net">153news.net</a></td></tr>

<tr><td>BrandNewTube	</td><td>mp4		</td><td>&nbsp;#</td><td>No Proxy</td><td></td>
<td><a target=_blank href="https://brandnewtube.com">brandnewtube.com</a></td></tr>

<tr><td>Odysee		</td><td>mp4/m3u8	</td><td>&nbsp;?</td><td>KRKR</td><td></td>
<td><a target=_blank href="https://odysee.com">odysee.com</a></td></tr>

<tr><td>Twitter		</td><td>mp4/m3u8	</td><td>&nbsp;+</td><td>KRKR</td><td></td>
<td><a target=_blank href="https://twitter.com">twitter.com</a></td>
<td><a target=_blank href="https://threadreaderapp.com">threadreaderapp.com</a></td></tr>

<tr><td>Facebook	</td><td>mp4		</td><td>&nbsp;?</td><td>Proxy</td><td></td>
<td><a target=_blank href="https://www.facebook.com">www.facebook.com</a></td>
<td><a target=_blank href="https://www.instagram.com">www.instagram.com</a> (CORS)</td></tr>

<tr><td>Telegram	</td><td>mp4		</td><td>&nbsp;?</td><td>Proxy</td><td></td>
<td><a target=_blank href="https://t.me">t.me</a></td></tr>

<tr><td>TikTok		</td><td>mp4		</td><td>&nbsp;?</td><td>KRAK</td><td></td>
<td><a target=_blank href="https://www.tiktok.com">www.tiktok.com</a></td></tr>

<tr><td>Gab TV		</td><td>mp4		</td><td>&nbsp;?</td><td>Proxy</td><td></td>
<td><a target=_blank href="https://tv.gab.com">tv.gab.com</a></td>
<td><a target=_blank href="https://gab.com">gab.com</a></td></tr>

<tr><td>Twitch TV	</td><td>m3u8		</td><td>&nbsp;#</td><td>CORS</td><td></td>
<td><a target=_blank href="https://www.twitch.tv">www.twitch.tv</a></td></tr>

<tr><td>PragerU		</td><td>m3u8		</td><td>&nbsp;?</td><td>Proxy</td><td></td>
<td><a target=_blank href="https://www.prageru.com">www.prageru.com</a></td></tr>

<tr><td>TEDTalks	</td><td>mp4		</td><td>&nbsp;?</td><td>Proxy</td><td></td>
<td><a target=_blank href="https://www.ted.com">www.ted.com</a></td></tr>

<tr><td>Nat. Film Board	</td><td>m3u8		</td><td>&nbsp;+</td><td>No Proxy</td><td></td>
<td><a target=_blank href="https://www.nfb.ca">www.nfb.ca</a></td></tr>

<tr><td>Earth TV	</td><td>m3u8		</td><td>&nbsp;?</td><td>Proxy</td><td></td>
<td><a target=_blank href="https://www.earthtv.com">www.earthtv.com</a></td></tr>

<tr><td>iHeartRadio	</td><td>mp3		</td><td>&nbsp;#</td><td>No Proxy</td><td></td>
<td><a target=_blank href="https://www.iheart.com/podcast">www.iheart.com/podcast</a></td></tr>

<tr><td colspan="7"><hr class="skinny"></td></tr>

<tr><td>Fox		</td><td>m3u8/mp4	</td><td>&nbsp;+</td><td>No Proxy</td><td></td>
<td><a target=_blank href="https://www.foxnews.com">www.foxnews.com</a></td>
<td><a target=_blank href="https://www.foxbusiness.com">www.foxbusiness.com</a></td></tr>

<tr><td>ABC		</td><td>mp4		</td><td>&nbsp;+</td><td>Proxy</td><td></td>
<td><a target=_blank href="https://abcnews.go.com">abcnews.go.com</a></td></tr>

<tr><td>CBS		</td><td>m3u8		</td><td>&nbsp;?</td><td>Proxy</td><td></td>
<td><a target=_blank href="https://www.cbsnews.com">www.cbsnews.com</a></td></tr>

<tr><td>CNBC		</td><td>m3u8		</td><td>&nbsp;+</td><td>Proxy</td><td></td>
<td><a target=_blank href="https://www.cnbc.com">www.cnbc.com</a></td></tr>

<tr><td>CNN		</td><td>mp4/m3u8	</td><td>&nbsp;?</td><td>No Proxy</td><td></td>
<td><a target=_blank href="https://www.cnn.com">www.cnn.com</a></td>
<td><a target=_blank href="https://edition.cnn.com">edition.cnn.com</a></td></tr>

<tr><td>C-SPAN		</td><td>m3u8		</td><td>&nbsp;?</td><td>KRAK</td><td></td>
<td><a target=_blank href="https://www.c-span.org">www.c-span.org</a></td></tr>

<tr><td>MS/NBC		</td><td>mp4		</td><td>&nbsp;+</td><td>Proxy</td><td></td>
<td><a target=_blank href="https://www.msnbc.com">www.msnbc.com</a></td>
<td><a target=_blank href="https://www.nbcnews.com">www.nbcnews.com</a></td></tr>

<tr><td>PBS		</td><td>m3u8		</td><td>&nbsp;+</td><td>Proxy</td><td></td>
<td><a target=_blank href="https://www.pbs.org">www.pbs.org</a></td></tr>

<tr><td>CBC		</td><td>m3u8/mp4	</td><td>&nbsp;+</td><td>Proxy (DIG)</td><td></td>
<td><a target=_blank href="https://www.cbc.ca">www.cbc.ca</a></td>
<td><a target=_blank href="https://gem.cbc.ca">gem.cbc.ca</a></td></tr>

<tr><td>CPAC		</td><td>m3u8		</td><td>&nbsp;#</td><td>No Proxy</td><td></td>
<td><a target=_blank href="https://www.cpac.ca">www.cpac.ca</a></td></tr>

<tr><td>CTV		</td><td>m3u8		</td><td>&nbsp;+</td><td>Proxy (DIG)</td><td></td>
<td><a target=_blank href="https://www.ctvnews.ca">www.ctvnews.ca</a></td>
<td><a target=_blank href="https://www.ctv.ca">www.ctv.ca</a></td></tr>

<tr><td>Global		</td><td>mp4		</td><td>&nbsp;+</td><td>Proxy</td><td></td>
<td><a target=_blank href="https://globalnews.ca">globalnews.ca</a></td></tr>

<tr><td>TVO		</td><td>mp4		</td><td>&nbsp;+</td><td>Proxy (DIG)</td><td></td>
<td><a target=_blank href="https://www.tvo.org">www.tvo.org</a></td></tr>

<tr><td>BBC		</td><td>m3u8		</td><td>&nbsp;+</td><td>Proxy</td><td></td>
<td><a target=_blank href="https://www.bbc.com">www.bbc.com</a></td>
<td><a target=_blank href="https://www.bbc.co.uk/sounds">www.bbc.co.uk/sounds</a></td></tr>

<tr><td>Press TV	</td><td>m3u8		</td><td>&nbsp;?</td><td>Proxy</td><td></td>
<td><a target=_blank href="https://www.presstv.ir">www.presstv.ir</a></td>
<td><a target=_blank href="https://www.presstv.ir/doc">www.presstv.ir/doc</a> (mp4)</td></tr>

<tr><td>Al Jazeera	</td><td>mp4		</td><td>&nbsp;+</td><td>Proxy (DIG)</td><td></td>
<td><a target=_blank href="https://www.aljazeera.com">www.aljazeera.com</a></td></tr>

<tr><td>Bloomberg	</td><td>mp4		</td><td>&nbsp;+</td><td>Proxy</td><td></td>
<td><a target=_blank href="https://www.bloomberg.com">www.bloomberg.com</a></td></tr>

<tr><td>Deutsche Welle	</td><td>mp4		</td><td>&nbsp;#</td><td>No Proxy</td><td></td>
<td><a target=_blank href="https://www.dw.com">www.dw.com</a></td></tr>

<tr><td>Epoch Times	</td><td>m3u8		</td><td>&nbsp;?</td><td>Proxy</td><td></td>
<td><a target=_blank href="https://www.theepochtimes.com">www.theepochtimes.com</a></td>
<td><a target=_blank href="http://www.ntd.com">www.ntd.com</a></td></tr>

</table><p>

? = works with DIG only<br>
# = works with Play ID only<br>
+ = works with both DIG and Play ID<br>
$ = use the Sandbox option to embed the original video
<p></p>
KRAK = only accessible with the Kraker Local Proxy Server<br>
CORS = only accessible with a CORS unblocker (or Kraker Local)<br>
KRKR = accessible with the Kraker Remote Proxy (may have limitations)

<p><hr><p>
<h3 id="movies" class="skinny"><r_>Movie Sites</r_>
  <small> -- Go to <a href="#info">Info viewer</a> or <a href="#news">News viewer</a>
    or <a href="#free">Movie viewer</a></small></h3>

<table class="list" style="padding:2px 0">

<tr><td>TubiTV		</td><td>m3u8		</td><td>&nbsp;+</td><td>Proxy</td><td></td>
<td><a target=_blank href="https://tubitv.com">tubitv.com</a></td></tr>

<tr><td>TheArchive	</td><td>m3u8		</td><td>&nbsp;+</td><td>No Proxy</td><td></td>
<td><a target=_blank href="https://www.thearchive.tv">www.thearchive.tv</a></td></tr>

<tr><td>DarkMatter	</td><td>m3u8		</td><td>&nbsp;?</td><td>KRKR</td><td></td>
<td><a target=_blank href="https://www.darkmattertv.com">www.darkmattertv.com</a></td></tr>

<tr><td>VidNode		</td><td>m3u8/mp4	</td><td>&nbsp;+</td><td>KRAK</td><td></td>
<td><a target=_blank href="https://membed1.com">membed1.com</a> !</td>
<td><a target=_blank href="https://vidnode.net">vidnode.net</a> !</td></tr>

<tr><td>Gotaku		</td><td>m3u8/mp4	</td><td>&nbsp;+</td><td>KRAK</td><td></td>
<td><a target=_blank href="https://gotaku1.com">gotaku1.com</a> !</td>
<td><a target=_blank href="https://anihdplay.com">anihdplay.com</a> !</td><tr>

<tr><td>EMovies		</td><td>m3u8		</td><td>&nbsp;+</td><td>KRAK</td><td></td>
<td><a target=_blank href="https://emovies.si">emovies.si</a> !</td><tr>

<tr><td>GOKU		</td><td>m3u8		</td><td>&nbsp;+</td><td>KRAK</td><td>$</td>
<td><a target=_blank href="http://goku.sx">goku.sx !</a></td><tr>

<tr><td>Goojara		</td><td>mp4		</td><td>&nbsp;#</td><td>KRAK</td><td></td>
<td><a target=_blank href="https://www.goojara.to">www.goojara.to</a></td><tr>

<tr><td>Noxx		</td><td>mp4		</td><td>&nbsp;?</td><td>KRAK</td><td></td>
<td><a target=_blank href="https://noxx.to">noxx.to</a> !</td><tr>

<tr><td>PressPlay	</td><td>m3u8		</td><td>&nbsp;?</td><td>KRAK</td><td></td>
<td><a target=_blank href="https://pressplay.top">pressplay.top</a> !</td><tr>

<tr><td>GDrivePlayer	</td><td>mp4		</td><td>&nbsp;?</td><td>KRKR</td><td></td>
<td><a target=_blank href="http://database.gdriveplayer.us/movie.php">gdriveplayer.us/movie</a></td>
<td><a target=_blank href="http://database.gdriveplayer.us/series.php">gdriveplayer.us/series</a></td><tr>

<tr><td>XHamster	</td><td>mp4		</td><td>&nbsp;#</td><td>KRAK</td><td>$</td>
<td><a target=_blank href="https://xhamster.com">xhamster.com</a></td></tr>

<tr><td>XVideos		</td><td>m3u8		</td><td>&nbsp;?</td><td>Proxy</td><td></td>
<td><a target=_blank href="https://www.xvideos.com">www.xvideos.com</a></td></tr>

<tr><td colspan="8"><hr class="skinny"></td></tr>

<tr><td>DoodStream	</td><td>mp4		</td><td>&nbsp;#</td><td>KRAK</td><td></td>
<td><a target=_blank href="https://doodstream.com">doodstream.com</a></td></tr>

<tr><td>EplayVid	</td><td>mp4		</td><td>&nbsp;#</td><td>KRAK</td><td>$</td>
<td>no site link</td></tr>

<tr><td>MixDrop		</td><td>mp4		</td><td>&nbsp;#</td><td>KRAK</td><td>$</td>
<td><a target=_blank href="https://mixdrop.co">mixdrop.co</a></td><tr>

<tr><td>PkSpeed		</td><td>mp4		</td><td>&nbsp;#</td><td>KRAK</td><td>$</td>
<td><a target=_blank href="https://pkspeed.net">pkspeed.net</a></td><tr>

<tr><td>StreamTape	</td><td>mp4		</td><td>&nbsp;#</td><td>Proxy</td><td></td>
<td><a target=_blank href="https://streamtape.com">streamtape.com</a></td>
<td><a target=_blank href="https://strcloud.link">strcloud.link</a></td><tr>

<tr><td>UpStream	</td><td>m3u8/mp4	</td><td>&nbsp;#</td><td>KRAK</td><td>$</td>
<td><a target=_blank href="https://upstream.to">upstream.to</a></td><tr>

<tr><td>Vidoza		</td><td>mp4		</td><td>&nbsp;#</td><td>Proxy</td><td>$</td>
<td><a target=_blank href="https://vidoza.net">vidoza.net</a></td></tr>

<tr><td>VOE		</td><td>mp4		</td><td>&nbsp;#</td><td>Proxy</td><td>$</td>
<td><a target=_blank href="https://voe.sx">voe.sx</a></td></tr>

<tr><td>Wootly		</td><td>mp4		</td><td>&nbsp;#</td><td>KRAK</td><td></td>
<td>no site link</td></tr>

<tr><td>AudioRealm	</td><td>mp3		</td><td>&nbsp;+</td><td>Proxy</td><td></td>
<td><a target=_blank href="http://audiorealm.com">audiorealm.com</a></td></tr>

<tr><td>RadioNet	</td><td>mp3		</td><td>&nbsp;?</td><td>Proxy</td><td></td>
<td><a target=_blank href="https://www.radio.net">www.radio.net</a></td></tr>

</table>
<p>
! on a site url = use caution on the site due to popup ads<br>
<p>
Note that quality level (example: [720]) may not be the same as resolution.
<p><hr><p>
Some search sites to get video links from:
<p>
<a target=_blank href="https://www.downloads-anymovies.com">www.downloads-anymovies.com</a><br>
<a target=_blank href="https://flicktv.net">flicktv.net</a> &nbsp;
<a target=_blank href="https://tubemotion.net">tubemotion.net</a><br>
<a target=_blank href="https://www.levidia.ch">www.levidia.ch</a><br>
<a target=_blank href="https://www.primewire.tf">www.primewire.tf</a><br>

<p><hr><p>
<h3 id="livestream"><r_>Internet TV</r_></h3>

Go to the <a href="#free">Movie viewer</a>, select a TV stack and press the button for the desired channel.
That's it. All channels are m3u8 live streams and most are not region locked. Some channels require an initial
lookup (thus requiring a CORS proxy or unblocker) to find the direct stream URL. Such URLs are temporary and will
time out (anywhere from a few hours to two days). Alleycat Player will refresh the link after two hours.
<p>
Some channels have two stream sources. This is indicated with a plus sign (+) after the channel name. A double-plus
indicates that the streams are from different local stations. Select "webm" in the format panel to access the
secondary channel.

<h3><r_>Internet Radio</r_></h3>

Simply go to the bottom of the page and press a radio button to play the Internet Radio. That's it.
For your convenience, the radio will pause when you play a video. Press the Clear button to unpause.
You can also open a radio station in a popup window.
<p>
You can input your own URL for either an mp4 or an mp3 or whatever your
browser supports. To play a YouTube video in audio-only mode, just enter the 11-character video id.
<p>
To find some radio station URLs, you can use the AudioRealm DIG tool supplied with the <a href="#free">Movie viewer</a>.
Also supplied is a stack with links to iHeartRadio and Virtual DJ. These will pop up a window with an embedded web site.
</p>

</div><div style="width: 90vw; height: 50vh"></div>

<!--
////////////////////////////
/// INFO + ENTERTAINMENT ///
////////////////////////////
//-->

<div id="info" style="padding:6px 2px 8px 0">

<span class="header" style="vertical-align:middle">Info / Entertainment &nbsp;--&nbsp; <small>
  <a href="#sites">Sites List</a> &nbsp;|&nbsp; <a href="#news">News</a> &nbsp;|&nbsp;
  <a href="#free">Movies</a> &nbsp;|&nbsp; <a href="#info">snap</a></small></span>

<span style="float:right">

<div class="dropbox dropbox0"><input type=text disabled><button>+</button>
<div id="ctr5z" class="dropdown dropdown0">
  <option value= 1  >youtube.com
  <option value= 14 class="w">vid.puffyan.us (us)
  <option value= 11 class="b">invidious.namazso.eu (de)
  <option value= 15 class="b">invidious.snopyta.org (fi)
  <option value= 28 class="w">invidious.ethibox.fr (fr)
  <option value= 27 class="w">invidious.flokinet.to (ro)
  <option value= 21 class="w">invidious.weblibre.org (cl)
  <option value= 32 class="w">youtube.076.ne.jp (jp)
  <option value= 9  class="r" checked>Youtube DASH
<!--
  <option value= 12 class="w">y.com.sb (de)
  <option value= 19 class="w">invidious.sethforprivacy.com (de)
  <option value= 33 class="w">inv.bp.projectsegfau.lt (lu)
  <option value= 35 class="w">invidious.esmailelbob.xyz (ca)
  <option value= 36 class="w">inv.privacy.com.de (de)
  <option value= 22 class="b">invidious.tiekoetter.com (de)-
  <option value= 23 class="w">invidious.slipfox.xyz (us)
  <option value= 24 class="w">invidious.osi.kr (nl)-
  <option value= 26 class="w">invidious.projectsegfau.lt (fr)-
  <option value= 30 class="b">yt.artemislena.eu (de)
  <option value= 16 class="w">invidious.fdn.fr (fr)-

  <option value= 20 class="w">inv.riverside.rocks !
  <option value= 31 class="w">inv.vern.cc !
  <option value= 34 class="w">invidious.nerdvpn.de !
  <option value= 18 class="w">invidious.zapashcanon.fr (fr) !
  <option value= 13 class="w">invidious.zee.li (us) !
  <option value= 17 class="w">invidious.kavin.rocks (in) !
  <option value= 25 class="w">ytprivate.com (us) !
  <option value= 29 class="w">yewtu.be (nl) !
//-->
</div></div> &nbsp; &nbsp;&nbsp;

<span class="ranger">
<button onclick="javascript:brightness(5,1)">&lt;</button>
<input type=text value="Brt:  0" id="ctr5x" class="static" disabled>
<button onclick="javascript:brightness(5,2)">&gt;</button>&nbsp;&nbsp;
<button onclick="javascript:brightness(5,3)">&lt;</button>
<input type=text value="Sat:  0" id="ctr5y" class="static" disabled>
<button onclick="javascript:brightness(5,4)">&gt;</button> &nbsp;&nbsp;
<button onclick="javascript:brightness(5,5)">&nbsp;Reset&nbsp;</button>
</span>

</span></div><table><tr><td class="textbox">

<a id="dload5" onclick="return false">
<button onclick="javascript:open_downloader(5)"><b_>DLoad</b_></button></a>
<button onclick="javascript:loadid(5,0)">Play ID</button>
<button onclick="javascript:reset_frame(5)">Clear</button>
<p></p>

<input type=text id="id5" maxlength=256 class="idspec" onfocus="javascript:hidelist(5)"
  onclick="javascript:input_onclick('id5')" onblur="javascript:input_onblur('id5')">
<p></p>

<div class="dropbox dropbox1"><input type=text disabled><button>+</button>
<div id="stk5" class="dropdown dropdown1">
  <option value="" class="w">Select a video stack
</div></div><p></p>

<div class="dropbox dropbox2"><input type=text disabled><button>+</button>
<div id="src5" class="dropdown dropdown2">
  <option value= 0 class="w">YouTube / Invidious
  <option value= 1 ># mp4 - BitChute
  <option value= 14>+ mp4 - Rumble
  <option value= 2 ># mp4 - Vimeo
  <option value= 3 >+ m3u - InfoWars
  <option value= 4 >+ m3u - Brighteon
  <option value= 5 ># m3u - DailyMotion
  <option value= 11># mp4 - 153News
  <option value= 12># mp4 - BrandNewTube
  <option value= 17>? m3u - Odysee
  <option value= 21>+ mp4 - Twitter
  <option value= 22>? mp4 - Facebook
  <option value= 15>? mp4 - Telegram
  <option value= 28>? mp4 - TikTok
  <option value= 16>? mp4 - Gab TV
  <option value= 27># m3u - Twitch TV
  <option value= 8 >? m3u - PragerU
  <option value= 6 >? mp4 - TEDTalks
  <option value= 7 >+ m3u - NatFilmBrd
  <option value= 29>? m3u - Earth TV
  <option value= 25 class="b"># mp3 - iHeartRadio
  <option value= 23 class="b">? mp3 - Podcasts
  <option value= 10 class="r">? ----- URL Test
</div></div>

<p><span class="box">
<input type=checkbox id="mov5f" checked> Format (m3u8) &nbsp;
<input type=checkbox id="mov5p" checked> Use Proxy
</span></p>

<div><div id="fmt5" class="dropdown pickpanel">
  <option value= 18 >&nbsp;mp4 [18] 360p &nbsp;*
  <option value= 19 >&nbsp;mp4 [19] 480p &nbsp;*
  <option value= 22 >&nbsp;mp4 [22] 720p &nbsp;*
  <option value= 43 >webm [43] 360p &nbsp;*
  <option value= 44 >webm [44] 480p &nbsp;*
  <option value= 45 >webm [45] 720p &nbsp;*
</div></div><p></p>

<div class="dropbox dropbox3"><input type=text disabled><button>+</button>
<div id="win5" class="dropdown dropdown3">
  <option value="320:180">[16:9]&nbsp; 320 x 180
  <option value="480:270">[16:9]&nbsp; 480 x 270
  <option value="640:360">[16:9]&nbsp; 640 x 360
  <option value="960:540">[16:9]&nbsp; 960 x 540
  <option value="1280:720">[16:9] 1280 x 720
  <option value="240:180">&nbsp;[4:3]&nbsp; 240 x 180
  <option value="360:270">&nbsp;[4:3]&nbsp; 360 x 270
  <option value="480:360">&nbsp;[4:3]&nbsp; 480 x 360
  <option value="720:540">&nbsp;[4:3]&nbsp; 720 x 540
  <option value="960:720">&nbsp;[4:3]&nbsp; 960 x 720
</div></div><p></p>

<p style="margin:0 -6px"> <!-- for Pale Moon -->
<button id="btn5a" class="is_off" onclick="javascript:buttonpress(5,0)">New Window</button> &nbsp;&nbsp;
<button id="btn5b" class="is_off" onclick="javascript:buttonpress(5,1)">Popup Window</button>
</p><p style="margin-top:-2px"></p>

<input type=checkbox id="mov5m"> Allow Multiple &nbsp;&nbsp;
<input type=checkbox id="mov5n"> No Play
<p style="margin-top:-3px"></p>

<input type=radio id="mov5a" name="chk5"> Raw&nbsp;
<input type=radio id="mov5b" name="chk5" checked><button onclick="javascript:toggle_hls(5,0)"
  class="wrapper" id="hls5">Wrapper</button><input type=radio id="mov5c" name="chk5"> Sandbox

</td><td class="vidbox">

<!-- VIDEO -->
<div class="widevid"><div class="popbox" id="pop5"></div>
<h2 id="vid5" class="msgbox" onclick="javascript:popper(5,1)">No Video</h2>
<iframe class="frame" id="mov5" autoplay allowfullscreen controls></iframe>

</div></td><td class="grill"></td></tr></table>

<p style="text-align:center">
<button onclick="javascript:loadid(5,1)">Play URL</button>
<button onclick="javascript:urlcopy(5,true)">Copy</button>
<button onclick="javascript:digid(5)"><b_>DIG</b_></button>

<input type=text id="line5" class="urlspec"
  onclick="javascript:input_onclick('line5')" onblur="javascript:input_onblur('line5')">

<input type=text id="meta5" class="static" disabled style="width:78px">

<span class="ranger" style="white-space:nowrap;margin-left:4px">
<button onclick="javascript:scalingfactor(5,1)">&lt;</button>
<input type=text value="100" id="ctr5w" class="static" style="width:36px" disabled>
<button onclick="javascript:scalingfactor(5,2)">&gt;</button>
</span>

<p style="text-align:center">
<button class="stack" id="stk5-1" onclick="javascript:copylist(5,1)">Stack 1</button>
<button class="stack" id="stk5-2" onclick="javascript:copylist(5,2)">Stack 2</button>
<button class="stack" id="stk5-3" onclick="javascript:copylist(5,3)">Stack 3</button>
&nbsp;
<button class="stack" id="stk5-4" onclick="javascript:copylist(5,4)">BitChute</button>
<button class="stack" id="stk5-5" onclick="javascript:copylist(5,5)">Vimeo</button>
<button class="stack" id="stk5-6" onclick="javascript:copylist(5,6)">InfoWars</button>
</p>

<div style="width:90vw;height:50vh"></div>

<!--
/////////////////////////
/// NEWS & PROPAGANDA ///
/////////////////////////
//-->

<div id="news" style="padding:6px 2px 8px 0">

<span class="header">News & Propaganda &nbsp;--&nbsp; <small>
  <a href="#sites">Sites List</a> &nbsp;|&nbsp; <a href="#info">Info</a> &nbsp;|&nbsp;
  <a href="#free">Movies</a> &nbsp;|&nbsp; <a href="#news">snap</a></small></span>

<span style="float:right">

<div class="dropbox dropbox0"><input type=text disabled><button>+</button>
<div id="ctr6z" class="dropdown dropdown0">
  <option value= 1  >youtube.com
  <option value= 14 class="w">vid.puffyan.us (us)
  <option value= 11 class="b">invidious.namazso.eu (de)
  <option value= 15 class="b">invidious.snopyta.org (fi)
  <option value= 28 class="w">invidious.ethibox.fr (fr)
  <option value= 27 class="w">invidious.flokinet.to (ro)
  <option value= 21 class="w">invidious.weblibre.org (cl)
  <option value= 32 class="w">youtube.076.ne.jp (jp)
  <option value= 9  class="r" checked>Youtube DASH
</div></div> &nbsp; &nbsp;&nbsp;

<span class="ranger">
<button onclick="javascript:brightness(6,1)">&lt;</button>
<input type=text value="Brt:  0" id="ctr6x" class="static" disabled>
<button onclick="javascript:brightness(6,2)">&gt;</button>&nbsp;&nbsp;
<button onclick="javascript:brightness(6,3)">&lt;</button>
<input type=text value="Sat:  0" id="ctr6y" class="static" disabled>
<button onclick="javascript:brightness(6,4)">&gt;</button> &nbsp;&nbsp;
<button onclick="javascript:brightness(6,5)">&nbsp;Reset&nbsp;</button>
</span>

</span></div><table><tr><td class="textbox">

<a id="dload6" onclick="return false">
<button onclick="javascript:open_downloader(6)"><b_>DLoad</b_></button></a>
<button onclick="javascript:loadnews(6,0)">Play ID</button>
<button onclick="javascript:reset_frame(6)">Clear</button>
<p></p>

<input type=text id="id6" maxlength=256 class="idspec" onfocus="javascript:hidelist(6)"
  onclick="javascript:input_onclick('id6')" onblur="javascript:input_onblur('id6')">
<p></p>

<div class="dropbox dropbox1"><input type=text disabled><button>+</button>
<div id="stk6" class="dropdown dropdown1">
  <option value="" class="w">Select a video stack
</div></div><p></p>

<div class="dropbox dropbox2"><input type=text disabled><button>+</button>
<div id="src6" class="dropdown dropdown2">
  <option value=0  class="w">YouTube / Invidious
  <option value= 1  >+ m3u - Fox
  <option value= 2  >+ mp4 - ABC
  <option value= 3  >? m3u - CBS
  <option value= 4  >+ m3u - CNBC
  <option value= 5  >? mp4 - CNN
  <option value= 6  >? m3u - C-SPAN
  <option value= 7  >+ mp4 - MS/NBC
  <option value= 8  >+ m3u - PBS
  <option value= 11 class="w">+ m3u - CBC
  <option value= 15 class="w"># m3u - CPAC
  <option value= 12 class="w">+ m3u - CTV
  <option value= 13 class="w">+ mp4 - Global
  <option value= 14 class="w">+ mp4 - TVO
  <option value= 21 class="b">+ m3u - BBC
  <option value= 24 class="b">? m3u - Press TV
  <option value= 22 class="b">+ mp4 - Al Jazeera
  <option value= 25 class="b">+ mp4 - Bloomberg
  <option value= 26 class="b"># mp4 - Deutsche Welle
  <option value= 27 class="b">? m3u - Epoch Times
  <option value= 30 class="r">+ mp4 - BrightCove
</div></div>

<p><span class="box">
<input type=checkbox id="mov6f" checked> Format (m3u8) &nbsp;
<input type=checkbox id="mov6p" checked> Use Proxy
</span></p>

<div><div id="fmt6" class="dropdown pickpanel">
  <option value= 18 >&nbsp;mp4 [18] 360p &nbsp;*
  <option value= 19 >&nbsp;mp4 [19] 480p &nbsp;*
  <option value= 22 >&nbsp;mp4 [22] 720p &nbsp;*
  <option value= 43 >webm [43] 360p &nbsp;*
  <option value= 44 >webm [44] 480p &nbsp;*
  <option value= 45 >webm [45] 720p &nbsp;*
</div></div><p></p>

<div class="dropbox dropbox3"><input type=text disabled><button>+</button>
<div id="win6" class="dropdown dropdown3">
  <option value="320:180">[16:9]&nbsp; 320 x 180
  <option value="480:270">[16:9]&nbsp; 480 x 270
  <option value="640:360">[16:9]&nbsp; 640 x 360
  <option value="960:540">[16:9]&nbsp; 960 x 540
  <option value="1280:720">[16:9] 1280 x 720
  <option value="240:180">&nbsp;[4:3]&nbsp; 240 x 180
  <option value="360:270">&nbsp;[4:3]&nbsp; 360 x 270
  <option value="480:360">&nbsp;[4:3]&nbsp; 480 x 360
  <option value="720:540">&nbsp;[4:3]&nbsp; 720 x 540
  <option value="960:720">&nbsp;[4:3]&nbsp; 960 x 720
</div></div><p></p>

<p style="margin:0 -6px"> <!-- for Pale Moon -->
<button id="btn6a" class="is_off" onclick="javascript:buttonpress(6,0)">New Window</button> &nbsp;&nbsp;
<button id="btn6b" class="is_off" onclick="javascript:buttonpress(6,1)">Popup Window</button>
</p><p style="margin-top:-2px"></p>

<input type=checkbox id="mov6m"> Allow Multiple &nbsp;&nbsp;
<input type=checkbox id="mov6n"> No Play
<p style="margin-top:-3px"></p>

<input type=radio id="mov6a" name="chk6"> Raw&nbsp;
<input type=radio id="mov6b" name="chk6" checked><button onclick="javascript:toggle_hls(6,0)"
  class="wrapper" id="hls6">Wrapper</button><input type=radio id="mov6c" name="chk6"> Sandbox

</td><td class="vidbox">

<!-- VIDEO -->
<div class="widevid"><div class="popbox" id="pop6"></div>
<h2 id="vid6" class="msgbox" onclick="javascript:popper(6,1)">No Video</h2>
<iframe class="frame" id="mov6" autoplay allowfullscreen controls></iframe>

</div></td><td class="grill"></td></tr></table>

<p style="text-align:center">
<button onclick="javascript:loadnews(6,1)">Play URL</button>
<button onclick="javascript:urlcopy(6,true)">Copy</button>
<button onclick="javascript:dignews(6)"><b_>DIG</b_></button>

<input type=text id="line6" class="urlspec"
  onclick="javascript:input_onclick('line6')" onblur="javascript:input_onblur('line6')">

<input type=text id="meta6" class="static" disabled style="width:78px">

<span class="ranger" style="white-space:nowrap;margin-left:4px">
<button onclick="javascript:scalingfactor(6,1)">&lt;</button>
<input type=text value="100" id="ctr6w" class="static" style="width:36px" disabled>
<button onclick="javascript:scalingfactor(6,2)">&gt;</button>
</span>

<p style="text-align:center">
<button class="stack" id="stk6-1" onclick="javascript:copylist(6,11)">Stack 1</button>
<button class="stack" id="stk6-2" onclick="javascript:copylist(6,12)">Stack 2</button>
<button class="stack" id="stk6-3" onclick="javascript:copylist(6,13)">Stack 3</button>
&nbsp;
<button class="stack" id="stk6-4" onclick="javascript:copylist(6,14)">Fox</button>
<button class="stack" id="stk6-5" onclick="javascript:copylist(6,15)">PBS</button>
<button class="stack" id="stk6-6" onclick="javascript:copylist(6,16)">BBC</button>
</p>

<div style="width:90vw;height:50vh"></div>

<!--
////////////////////////
/// FREE MOVIES & TV ///
////////////////////////
//-->

<div id="free" style="padding:6px 2px 8px 0">

<span class="header">FREE Movies & TV &nbsp;--&nbsp; <small>
  <a href="#movies">Movie Sites</a> &nbsp;|&nbsp; <a href="#info">Info</a> &nbsp;|&nbsp;
  <a href="#news">News</a> &nbsp;|&nbsp; <a href="#free">snap</a></small></span>

<span style="float:right">

<div class="dropbox dropbox0"><input type=text disabled><button>+</button>
<div id="ctr7z" class="dropdown dropdown0">
  <option value= 1  >youtube.com
  <option value= 14 class="w">vid.puffyan.us (us)
  <option value= 11 class="b">invidious.namazso.eu (de)
  <option value= 15 class="b">invidious.snopyta.org (fi)
  <option value= 28 class="w">invidious.ethibox.fr (fr)
  <option value= 27 class="w">invidious.flokinet.to (ro)
  <option value= 21 class="w">invidious.weblibre.org (cl)
  <option value= 32 class="w">youtube.076.ne.jp (jp)
  <option value= 9  class="r" checked>Youtube DASH
</div></div> &nbsp; &nbsp;&nbsp;

<span class="ranger">
<button onclick="javascript:brightness(7,1)">&lt;</button>
<input type=text value="Brt:  0" id="ctr7x" class="static" disabled>
<button onclick="javascript:brightness(7,2)">&gt;</button>&nbsp;&nbsp;
<button onclick="javascript:brightness(7,3)">&lt;</button>
<input type=text value="Sat:  0" id="ctr7y" class="static" disabled>
<button onclick="javascript:brightness(7,4)">&gt;</button> &nbsp;&nbsp;
<button onclick="javascript:brightness(7,5)">&nbsp;Reset&nbsp;</button>
</span>

</span></div><table><tr><td class="textbox">

<a id="dload7" onclick="return false">
<button onclick="javascript:open_downloader()"><b_>DLoad</b_></button></a>
<button onclick="javascript:loadmovie(7,0)">Play ID</button>
<button onclick="javascript:reset_frame(7)">Clear</button>
<p></p>

<input type=text id="id7" maxlength=256 class="idspec" onfocus="javascript:hidelist(7)"
  onclick="javascript:input_onclick('id7')" onblur="javascript:input_onblur('id7')">
<p></p>

<div class="dropbox dropbox1"><input type=text disabled><button>+</button>
<div id="stk7" class="dropdown dropdown1">
  <option value="" class="w">Select a radio/TV stack
</div></div><p></p>

<div class="dropbox dropbox2"><input type=text disabled><button>+</button>
<div id="src7" class="dropdown dropdown2">
  <option value= 0 class="w">YouTube / Invidious
  <option value= 1 >+ m3u - TubiTV
  <option value= 4 >+ mp4 - TheArchive
  <option value= 3 >? m3u - DarkMatter
  <option value= 2 >+ m3u - VidNode
  <option value= 5 >+ m3u - Gotaku
  <option value= 10>+ m3u - EMovies
  <option value= 11>? m3u - GOKU
  <option value= 12># mp4 - Goojara
  <option value= 14>? mp4 - Noxx
  <option value= 15>? m3u - PressPlay
  <option value= 13>? mp4 - GDrivePlayer
  <option value= 8 ># mp4 - XHamster
  <option value= 9 >? m3u - XVideos
  <option value= 21 class="r"># mp4 - DoodStream
  <option value= 26 class="r"># mp4 - EplayVid
  <option value= 29 class="r"># mp4 - MixDrop
  <option value= 31 class="r"># mp4 - PkSpeed
  <option value= 20 class="r"># mp4 - StreamTape
  <option value= 27 class="r"># m3u - UpStream
  <option value= 28 class="r"># mp4 - Vidoza
  <option value= 23 class="r"># mp4 - VOE
  <option value= 30 class="r"># mp4 - Wootly
  <option value= 41 class="b">+ mp3 - AudioRealm
  <option value= 42 class="b">? mp3 - RadioNet
</div></div>

<p><span class="box">
<input type=checkbox id="mov7f" checked> Format (m3u8) &nbsp;
<input type=checkbox id="mov7p" checked> Use Proxy
</span></p>

<div><div id="fmt7" class="dropdown pickpanel">
  <option value= 18 >&nbsp;mp4 [18] 360p &nbsp;*
  <option value= 19 >&nbsp;mp4 [19] 480p &nbsp;*
  <option value= 22 >&nbsp;mp4 [22] 720p &nbsp;*
  <option value= 43 >webm [43] 360p &nbsp;*
  <option value= 44 >webm [44] 480p &nbsp;*
  <option value= 45 >webm [45] 720p &nbsp;*
</div></div><p></p>

<div class="dropbox dropbox3"><input type=text disabled><button>+</button>
<div id="win7" class="dropdown dropdown3">
  <option value="320:180">[16:9]&nbsp; 320 x 180
  <option value="480:270">[16:9]&nbsp; 480 x 270
  <option value="640:360">[16:9]&nbsp; 640 x 360
  <option value="960:540">[16:9]&nbsp; 960 x 540
  <option value="1280:720">[16:9] 1280 x 720
  <option value="240:180">&nbsp;[4:3]&nbsp; 240 x 180
  <option value="360:270">&nbsp;[4:3]&nbsp; 360 x 270
  <option value="480:360">&nbsp;[4:3]&nbsp; 480 x 360
  <option value="720:540">&nbsp;[4:3]&nbsp; 720 x 540
  <option value="960:720">&nbsp;[4:3]&nbsp; 960 x 720
</div></div><p></p>

<p style="margin:0 -6px"> <!-- for Pale Moon -->
<button id="btn7a" class="is_off" onclick="javascript:buttonpress(7,0)">New Window</button> &nbsp;&nbsp;
<button id="btn7b" class="is_off" onclick="javascript:buttonpress(7,1)">Popup Window</button>
</p><p style="margin-top:-2px"></p>

<input type=checkbox id="mov7m"> Allow Multiple &nbsp;&nbsp;
<input type=checkbox id="mov7n"> No Play
<p style="margin-top:-3px"></p>

<input type=radio id="mov7a" name="chk7"> Raw&nbsp;
<input type=radio id="mov7b" name="chk7" checked><button onclick="javascript:toggle_hls(7,0)"
  class="wrapper" id="hls7">Wrapper</button><input type=radio id="mov7c" name="chk7"> Sandbox

</td><td class="vidbox">

<!-- VIDEO -->
<div class="widevid"><div class="popbox" id="pop7"></div>
<h2 id="vid7" class="msgbox" onclick="javascript:popper(7,1)">No Video</h2>
<iframe class="frame" id="mov7" autoplay allowfullscreen controls></iframe>

</div></td><td class="grill"></td></tr></table>

<p style="text-align:center">
<button onclick="javascript:loadmovie(7,1)">Play URL</button>
<button onclick="javascript:urlcopy(7,true)">Copy</button>
<button onclick="javascript:digmovie(7)"><b_>DIG</b_></button>

<input type=text id="line7" class="urlspec"
  onclick="javascript:input_onclick('line7')" onblur="javascript:input_onblur('line7')">

<input type=text id="meta7" class="static" disabled style="width:78px">

<span class="ranger" style="white-space:nowrap;margin-left:4px">
<button onclick="javascript:scalingfactor(7,1)">&lt;</button>
<input type=text value="100" id="ctr7w" class="static" style="width:36px" disabled>
<button onclick="javascript:scalingfactor(7,2)">&gt;</button>
</span>

<p style="text-align:center">
<button class="stack" id="stk7-1" onclick="javascript:copylist(7,-21)">Radio</button>
<button class="stack" id="stk7-2" onclick="javascript:copylist(7,-22)">Dance</button>
&nbsp;
<button class="stack" id="stk7-3" onclick="javascript:copylist(7,-23)">TV US1</button>
<button class="stack" id="stk7-4" onclick="javascript:copylist(7,-24)">TV US2</button>
<button class="stack" id="stk7-5" onclick="javascript:copylist(7,-25)">TV US3</button>
&nbsp;
<button class="stack" id="stk7-6" onclick="javascript:copylist(7,-26)">TV UK+</button>
<button class="stack" id="stk7-7" onclick="javascript:copylist(7,-27)">TV Alt</button>
&nbsp;
<button class="stack" id="stk7-8" onclick="javascript:copylist(7,-28)">Int'l 1</button>
<button class="stack" id="stk7-9" onclick="javascript:copylist(7,-29)">Int'l 2</button>
</p>

<div style="width:90vw;height:50vh"></div>

<!--
//////////////////////
/// INTERNET RADIO ///
//////////////////////
//-->

<div style="text-align:center"><h1><r_>Internet Radio</r_></h1>

<div style="margin:-8px 0 11px 0">
<button onclick="javascript:ir_action(0)">Stop</button>
<button onclick="javascript:ir_action(1)">Pause</button>
<button onclick="javascript:ir_action(2)">Play</button>&nbsp;
<input type=text value="Stopped" class="static" id="ir_status" style="width:80px" disabled>&nbsp;
<button onclick="javascript:ir_action(3)" class="is_off" id="ir_popup">Popup</button>
&nbsp;&nbsp; <r_>Volume</r_> :&nbsp;
<button onclick="javascript:ir_action(4)" style="font-size:13px;line-height:17px">&lt;</button>
<input type=text value="50" class="static" id="ir_volume" style="width:40px" disabled>
<button onclick="javascript:ir_action(5)" style="font-size:13px;line-height:17px">&gt;</button>

</div><table class="list ir" style="width:100%;padding-bottom:2px">

 <tr><th>Talk Radio
</th><th>Cool Music
</th><th>Funky Music
</th><th>Just Garbage
</th><th>More Garbage
</th></tr><tr>

<td><input type=radio name="ir" onclick="javascript:radio
  ('http://live.wostreaming.net/direct/foxnewsradio-foxnewsradioaac-imc')"><a target=_blank
    href='https://radio.foxnews.com/'>Fox News Talk</a>
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://radio.talkradio.co.uk/stream')"><a target=_blank
    href='https://ukradiolive.com/talkradio/schedule'>Talk Radio UK</a>
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://playerservices.streamtheworld.com/api/livestream-redirect/WABCAM.mp3')"><a target=_blank
    href='https://wabcradio.com/show-schedule/'>WABC Talk Radio</a>
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://216.240.133.178:3005/;')"><a target=_blank
    href='http://republicbroadcasting.org/program-schedule/'>Republic Broadcasting</a>
<br><input type=radio name="ir" onclick="javascript:radio
  ('https://mediaserver3.afa.net:8443/talk.mp3')"><a target=_blank
    href='https://afr.net/podcasts/afr-program-lineup/'>American Family Radio</a>
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://19303.live.streamtheworld.com/BLZE_1AAC.aac')"><a target=_blank
    href='https://www.theblaze.com/st/radio'>Blaze Radio</a>
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://s2.radio.co/s572ad25f7/listen')"><a target=_blank
    href='https://redstatetalkradio.com/schedule/'>Red State Talk</a>
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://ice42.securenetsystems.net/KTLKDB')"><a target=_blank
    href='https://fringe.fm/'>The Fringe FM</a>
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://ice8.securenetsystems.net/VARIETY')"><a target=_blank
    href='https://www.voiceamerica.com/Schedule/schedule'>Voice America</a>
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://cast.bbstalkradio.com/proxy/bbsradio?mp=/stream')"><a target=_blank
    href='https://bbsradio.com/station1and2schedule'>BBS Talk Radio 1</a>
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://cast.bbstalkradio.com/proxy/bbsradio2?mp=/stream')"><a target=_blank
    href='https://bbsradio.com/station1and2schedule'>BBS Talk Radio 2</a>
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://s1.voscast.com:8054/;')"><a target=_blank
    href='https://revolution.radio/Schedules-A&B.html'>Revolution Radio Studio A</a>
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://s2.voscast.com:8186/;')"><a target=_blank
    href='https://revolution.radio/Schedules-A&B.html'>Revolution Radio Studio B</a>
<br><input type=radio name="ir" onclick="javascript:radio
  ('https://s9.voscast.com:9311/live')"><a target=_blank
    href='https://www.renseradio.com'>Rense Radio Live</a>
<br><input type=radio name="ir" onclick="javascript:radio
  ('')"><a target=_blank
    href=''></a>
<br><input type=radio name="ir" onclick="javascript:radio
  ('')"><a target=_blank
    href=''></a>
<br><input type=radio name="ir" onclick="javascript:radio
  ('')"><a target=_blank
    href=''></a>
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://50.7.69.18/alexjonesshow')"><a target=_blank
    href='https://www.infowars.com/radio-archive/Alex/'>InfoWars - Alex Jones</a>
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://50.7.69.18/realnews')"><a target=_blank
    href='https://www.infowars.com/radio-archive/AmericanJournal/'>InfoWars - Harrison Smith</a>
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://50.7.69.18/warroom')"><a target=_blank
    href='https://www.infowars.com/radio-archive/WarRoom/'>InfoWars - Owen Shroyer</a>
</td>

<td><input type=radio name="ir" onclick="javascript:radio
  ('http://stream.starfm.de/classic/mp3-192/radiode')">Star FM Rock Classics
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://radio.rockindocradio.net:8600/;')">Rockin Doc Radio
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://rock-lynxradio.radioca.st/;')">Lynx Classic Rock
<br><input type=radio name="ir" onclick="javascript:radio
  ('https://pl-play.adtonos.com/rock-radio')">Rock Radio
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://sc2.radiocaroline.net:10568/;')">Radio Caroline
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://149.56.183.178:8014/;')">Retro Hits
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://stream.dancewave.online:8080/dance.mp3')">Dance Wave
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://colombiawebs.com.co:8106/;')">Salsa Mexico
<br><input type=radio name="ir" onclick="javascript:radio
  ('https://discoclassicradio.nl/stream')">Disco Classics Radio
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://nl1.lounge-radio.com:8010/;')">Lounge Radio
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://strm112.1.fm/trance_mobile_mp3')">Absolute Trance Radio
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://centova.radioservers.biz:8021/;')">Starlite Radio
<br><input type=radio name="ir" onclick="javascript:radio
  ('')">
<br><input type=radio name="ir" onclick="javascript:radio
  ('')">
<br><input type=radio name="ir" onclick="javascript:radio
  ('')">
<br><input type=radio name="ir" onclick="javascript:radio
  ('')">
<br><input type=radio name="ir" onclick="javascript:radio
  ('')">
<br><input type=radio name="ir" onclick="javascript:radio
  ('')">
<br><input type=radio name="ir" onclick="javascript:radio
  ('')">
<br><input type=radio name="ir" onclick="javascript:radio
  ('')">
</td>

<td><input type=radio name="ir" onclick="javascript:radio
  ('http://virtualdjradio.com:8000/channel1.mp3')">Virtual DJ: ClubZone
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://virtualdjradio.com:8000/channel2.mp3')">Virtual DJ: TheGrind
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://virtualdjradio.com:8000/channel3.mp3')">Virtual DJ: Hypnotica
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://virtualdjradio.com:8000/channel4.mp3')">Virtual DJ: PowerBase
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://janus.cdnstream.com:5140/live')">Radio Free Americana
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://116.202.241.212:8010/;')">Venice Classic Radio Italia
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://stream.srg-ssr.ch/m/rsj/mp3_128')">Radio Swiss Jazz
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://tropicalisima.org:9002/;')">Tropicalisma FM
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://streaming.radionomy.com/JamendoLounge')">Jamendo Lounge
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://lin3.ash.fastserv.com:6026/stream_96')">Rockabilly Radio
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://91.121.91.172:9414/;')">Dandelion Radio
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://31.3.245.162:8000/;')">Splinterwood
<br><input type=radio name="ir" onclick="javascript:radio
  ('')">
<br><input type=radio name="ir" onclick="javascript:radio
  ('')">
<br><input type=radio name="ir" onclick="javascript:radio
  ('')">
<br><input type=radio name="ir" onclick="javascript:radio
  ('')">
<br><input type=radio name="ir" onclick="javascript:radio
  ('')">
<br><input type=radio name="ir" onclick="javascript:radio
  ('')">
<br><input type=radio name="ir" onclick="javascript:radio
  ('')">
<br><input type=radio name="ir" onclick="javascript:radio
  ('')">
</td>

<td><input type=radio name="ir" onclick="javascript:radio
  ('http://stream.live.vc.bbcmedia.co.uk/bbc_radio_one')">BBC Radio 1
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://stream.live.vc.bbcmedia.co.uk/bbc_1xtra')">BBC Radio 1-Extra
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://stream.live.vc.bbcmedia.co.uk/bbc_radio_two')">BBC Radio 2
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://stream.live.vc.bbcmedia.co.uk/bbc_radio_three')">BBC Radio 3
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://stream.live.vc.bbcmedia.co.uk/bbc_radio_fourfm')">BBC Radio 4
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://stream.live.vc.bbcmedia.co.uk/bbc_radio_four_extra')">BBC Radio 4-Extra
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://stream.live.vc.bbcmedia.co.uk/bbc_radio_five_live_online_nonuk')">BBC Radio 5-Live
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://stream.live.vc.bbcmedia.co.uk/bbc_6music')">BBC Radio 6-Music
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://server-14.stream-server.nl:8300/;')">Nashville FM
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://shoutcast.countrypowerstation.net:8000/;')">Country Power Station
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://rautemusik-de-hz-fal-stream12.radiohost.de/blackbeats')">BlackBeats FM
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://usa17.fastcast4u.com/proxy/nczrhanc?mp=/1')">WZUP WRLD
<br><input type=radio name="ir" onclick="javascript:radio
  ('')">
<br><input type=radio name="ir" onclick="javascript:radio
  ('')">
<br><input type=radio name="ir" onclick="javascript:radio
  ('')">
<br><input type=radio name="ir" onclick="javascript:radio
  ('')">
<br><input type=radio name="ir" onclick="javascript:radio
  ('')">
<br><input type=radio name="ir" onclick="javascript:radio
  ('8tilKaOINmE')"><g_>Danheim: <i>Mannavegr</i></g_>
<br><input type=radio name="ir" onclick="javascript:radio
  ('RM_J5cFy70M')"><g_>Audiomachine: <i>Decimus</i></g_>
<br><input type=radio name="ir" onclick="javascript:radio
  ('G4tx9WDGp6c')"><g_>Classic Rock - Greatest Hits</g_>
</td>

<td><input type=radio name="ir" onclick="javascript:radio
  ('http://el-dorado.stream.laut.fm/el-dorado')">Radio El Dorado
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://igor.torontocast.com:1025/;')">Asia Dream Radio
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://hi5.streamingsoundtracks.com/;')">Streaming Sound Tracks
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://live.rcast.net:8522/;')">Tiki Bar Radio
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://lion.radioca.st/;')">Radio Mi Amigo Int'l
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://jakarta.nagaswarafm.com:8088/stream')">Nagaswara FM
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://stream.silvacast.com/RPLive/mp3-128/radio_de')">Radio Paloma
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://radio-ballermann.stream24.net/ballermann-radio.mp3')">Ballermann Radio
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://cc6.beheerstream.com/proxy/src1?mp=/stream;stream.mp3')">SRC FM
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://sphera.fluidstream.eu/company.aac')">Company Radio
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://streamer.tt.ee:8000/rahvaraadio')">Rahva Radio
<br><input type=radio name="ir" onclick="javascript:radio
  ('http://hi.death.fm/;')">Death FM
<br><input type=radio name="ir" onclick="javascript:radio
  ('')">
<br><input type=radio name="ir" onclick="javascript:radio
  ('')">
<br><input type=radio name="ir" onclick="javascript:radio
  ('')">
<br><input type=radio name="ir" onclick="javascript:radio
  ('')">
<br><input type=radio name="ir" onclick="javascript:radio
  ('')">
<br><input type=radio name="ir" onclick="javascript:radio
  ('od23CVaq2SQ')"><g_>Nature Sounds</g_>
<br><input type=radio name="ir" onclick="javascript:radio
  ('gfXhmdjOqGI')"><g_><i>Star Trek</i> Music</g_>
<br><input type=radio name="ir" onclick="javascript:radio
  ('ZTkH1kP_kx4')"><g_>The Cars: Full Album</g_>
</td>

</table>

<audio id="internet_radio"
  onerror="javascript:ir_action(-2)" ontimeupdate="javascript:ir_update()"></audio>

<p style="margin:10px 0 -5px 0">
<input type=text class="static" style="width:60px;border-radius:8px" disabled>&nbsp;

<input type=range class="slider" onclick="javascript:ir_action(6)"
  value=0.5 min=0 max=1 step=0.01 style="width:calc(100vw - 250px)">&nbsp;

<input type=text class="static" style="width:60px;border-radius:8px" disabled>

<p><input type=text class="urlspec" id="ir_url"
  onclick="javascript:input_onclick('ir_url')" onblur="javascript:input_onblur('ir_url')">

<p style="margin:-6px 0 2px 0">
<a href="#info">Info</a>&nbsp; | &nbsp;<a href="#news">News</a>&nbsp; | &nbsp;<a href="#free">Movies</a>

</div><div style="width:90vw;height:calc(100vh - 567px"></div>

<script id="cryptojs"></script>

<script>

/////////////////////////
///// User Settings /////
/////////////////////////

var invidious_site = [
  "https://vid.puffyan.us",	// default
  "", "", "", "", "", "", "", "", "",
  "",
  "https://invidious.namazso.eu",
  "https://y.com.sb",
  "https://invidious.zee.li",
  "https://vid.puffyan.us",
  "https://invidious.snopyta.org",
  "https://invidious.fdn.fr",
  "https://invidious.kavin.rocks",
  "https://invidious.zapashcanon.fr",
  "https://invidious.sethforprivacy.com",
  "https://inv.riverside.rocks",
  "https://invidious.weblibre.org",
  "https://invidious.tiekoetter.com",
  "https://invidious.slipfox.xyz",
  "https://invidious.osi.kr",
  "https://ytprivate.com",
  "https://invidious.projectsegfau.lt",
  "https://invidious.flokinet.to",
  "https://invidious.ethibox.fr",
  "https://yewtu.be",
  "https://yt.artemislena.eu",
  "https://inv.vern.cc",
  "https://youtube.076.ne.jp",
  "https://inv.bp.projectsegfau.lt",
  "https://invidious.nerdvpn.de",
  "https://invidious.esmailelbob.xyz",
  "https://inv.privacy.com.de",
  ""
];

var invidious_url = invidious_site [0];

var list_1 = [
    ":NOZKLtIIUZE" , "Hitler Rant"
  , ":m_MaJDK3VNE" , "Herding Cats"
  , ":VEGcqoZYxLI" , "Mike Hammer"
  , ":uaPKEbVypRQ" , "Typing Lesson"
  , ":W-JhfjGtlp8" , "V - The Miniseries"
  , ":kJAsn_vJyY4" , "Starship Enterprise"
];

var list_2 = [
    ":We-HMZDSWFU" , "Me and You and a Dog Named Boo"
  , ":8Pa9x9fZBtY" , "Sultans of Swing"
  , ":6Ath-3JGk8M" , "Flashdance: What A Feeling"
  , ":onJspmvJr0E" , "Flashdance: Love's Theme"
  , ":FnV0LqHd3h8" , "Make America Great Again"
  , ":xB4iFysPm9Q" , "Karolina Protsenko"
];

var list_3 = [
    ":HtVdAasjOgU" , "Witcher 3 Trailer [age-gated]"
  , ":CGq8Ee2gOe4" , "DooM at QuakeCon [age-gated]"
  , ":0ZwfXUURS3g" , "Dukes of Hazzard"
  , ":0pKfxbCHLoU" , "AKB48: Sustainable"
  , ":vxl4gsvgEQY" , "Perfume: Tokyo Girl"
  , ":74VHwppfHuI" , "The Best Is Yet To Come"
];

var list_4 = [
    "b:sAwPl7quh72N" , "Muse: Uprising"
  , "b:ZPlfDFBkS6w7" , "Rod Stewart: Young Turks"
  , "b:sSKnCoWAbDos" , "Brother Nathaniel"
  , "b:A7jZJfaEJK2p" , "Malice in the Palace"
  , "b:Ol2plIF2otcI" , "QAnon Proofs"
];

var list_5 = [
    "v:129463420" , "Miniatur Wunderland"
  , "v:166403522" , "Some Kind of Quest"
  , "v:31883614"  , "Star Trek: Aurora"
  , "v:322694559" , "Great Martian War"
  , "v:175806163" , "Martian American"
];

var list_6 = [
    "i:5d4c9fd22ec69a001858eb60" , "Alex Jones"
  , "i:5d4a339571d8e00017f8afaf" , "Owen Shroyer"
  , "i:5d4c54aae936660017aee3c0" , "Kaitlin Bennett"
];

var list_7 = [
];

var list_8 = [
];

var list_9 = [
];

var news_1 = [
];

var news_2 = [
];

var news_3 = [
];

var news_4 = [
    "fox:6041387345001" , "Steve Hilton"
  , "fox:6035600008001" , "Judge Jeanine Pirro"
];

var news_5= [
    "pbs:3007398789" , "Nova: Bird Brain (2018) [region lock]"
  , "pbs:2365338020" , "Austin City Limits: 40 Years (2014)"
  , "pbs:1946795242" , "Frontline: WikiSecrets (2011)"
];

var news_6 = [
    "bbc:p035dt58" , "Dragonfly"
  , "bbc:p076m7sh" , "Desert Art"
  , "bbc:p07bj7pv" , "Follow the Food"
];

var news_7 = [
];

var news_8 = [
];

var news_9 = [
];

var free_1 = [
    "a:" , "majic-100-7483"
  , "a:" , "chum-1045-6270"
  , "a:" , "iheartradio-top-20-7556"
  , "a:" , "the-hit-mix-7553"
  , "a:" , "z1035-7757"
  , "a:" , "971-the-eagle-2241"
  , "a:" , "heavy-rock-7554"
  , "a:" , "z100-1469"
  , "a:" , "1027-kiis-fm-los-angeles-185"
  , "a:" , "y100-561"
  , "a:" , "1017-the-bull-6586"
  , "a:" , "1035-kiss-fm-849"
  , "a:" , "alt-987-los-angeles-201"
  , "a:" , "1035-ktu-1473"
  , "a:" , "1067-lite-fm-1477"
  , "a:" , "smooth-jazz-4242"
  , "a:" , "the-vinyl-experience-6878"
  , "a:" , "iheart80s-radio-5060"
  , "a:" , "lone-star-925-3379"
  , "a:" , "q1043-1465"
];

var free_2 = [
    "8:http://pluto-live.plutotv.net/egress/chandler/pluto01/live/VIACBS08/master.m3u8" , "CMT Music (US)"
  , "8:https://company.fluid.stream/CompanyTV/smil:Company_ALL.smil/playlist.m3u8", "Company TV (Italy)"
  , "/1/540.1/1 8:http://vcndstv.teleosmedia.com/stream/dstv/dstv/playlist.m3u8" , "DanceStar TV (US)"
  , "8:http://4c4b867c89244861ac216426883d1ad0.msvdn.net/live/S85984808/sMO0tz9Sr2Rk/playlist.m3u8" , "Deejay TV (Italy)"
  , "8:https://0ba805a2403b4660bbb05c0a210ebbdc.mediatailor.us-east-1.amazonaws.com/v1/master/04fd913bb278d8775298c26fdca9d9841f37601f/ONO_DittyTV/playlist.m3u8"
    , "Ditty TV (US)"
  , "8:http://fox-foxsoul-roku.amagi.tv/playlist.m3u8"				, "Fox Soul (US)"
  , "9a:live/kaloopy"								, "Kaloopy (US) *"
  , "8:http://bitcdn-kronehit.bitmovin.com/v2/hls/index.m3u8"			, "KroneHit TV (Austria)"
  , "/0/540.1/0 7:https://canal.mediaserver.com.co:8088/live/MelodyChannel.m3u8" , "Melody Channel (Colombia)"
  , "8:http://live-edge01.telecentro.net.ar/live/smil:musictop.smil/index.m3u8" , "Music Top (Argentina)"
  , "8:http://live.streams.ovh:1935/NGradio/NGradio/playlist.m3u8"		, "NG Radio (Greece)"
  , "8:http://ocko-live.ssl.cdn.cra.cz/channels/ocko_expres/playlist.m3u8"	, "Ocko Expres (Czech Republic)"
  , "8:https://panel.tvstream.cl:1936/8040/8040/playlist.m3u8"			, "Portal Fox Mix (Chile)"
  , "8:http://livetv.powerapp.com.tr/powerTV/powerhd.smil/playlists.m3u8"	, "Power HD (Turkey)"
  , "8:http://4c4b867c89244861ac216426883d1ad0.msvdn.net/live/S35394734/Z6U2wGoDYANk/playlist.m3u8" , "Radio Capital (Italy)"
  , "8:http://chanson-video.hostingradio.ru:8080/hls/chansonabr/live.m3u8"	, "Radio Chanson (Russia)"
  , "8:https://stream.rjtv.stream/live/smil:rjtv.smil/playlist.m3u8"		, "Radio Javan (US-Iran)"
  , "8:http://4c4b867c89244861ac216426883d1ad0.msvdn.net/live/S62628868/uhdWBlkC1AoO/playlist.m3u8" , "Radio m2o (Italy)"
  , "8:http://web.onair-radio.eu:1935/video/video/index.m3u8"			, "Reload TV (Greece)"
  , "8:http://stream.mediawork.cz/retrotv/retrotvHQ1/playlist.m3u8"		, "Retro Music (Czech Republic)"
  , "8:https://srv1.zcast.com.br/kpoptv/kpoptv/playlist.m3u8"			, "Sexy Kpop TV (Brazil)"
  , "0:qWf-FPFmVw0"								, "Shuffle Dance Music (YouTube)"
  , "8:http://web.onair-radio.eu:1935/Alpha-Host/Alpha-Host/playlist.m3u8"	, "Siganos Music (Greece)"
  , "/0/576.1/0 7:https://stream-33.mazana.tv/slagr2.m3u"			, "Slagr 2 (Czech Republic)"
  , "8:http://cdn25.live247stream.com/steelbirdmusic/tv/playlist.m3u8"		, "Steelbird Music (India)"
  , "9a:live/stingray-classica"							, "Stingray Classica (Canada) *"
  , "9a:live/stingray-qello"							, "Stingray Qello (Canada) *"
  , "8:http://live.stranafm.cdnvideo.ru/stranafm/smil:stranafm.smil/playlist.m3u8" , "Strana FM (Russia)"
  , "/0/540.1/0 7:https://canal.mediaserver.com.co:8088/live/telemusica.m3u8"	, "TeleMusica (Argentina)"
  , "8:https://5cefcbf58ba2e.streamlock.net:543/tltvweb/latin-tv.stream/playlist.m3u8" , "Top Latino TV (Colombia)"
  , "8:http://stream.v2beat.live/playlist.m3u8"					, "V2Beat (Germany)"
  , "1p:5d93b635b43dd1a399b39eee"						, "Vevo Pop (US) *"
  , "1e:36953f5b6546464590d2fcd954bc89cf"					, "VH-1 (Europe-UK)"
  , "8:http://wms.shared.streamshow.it/visualradio/mp4:visualradio/playlist.m3u8" , "Visual Radio (Turkey)"
  , "9a:live/zoom-tv"								, "Zoom TV (US)"
];

/*
4a:abc
4a:cnn
4a:cnninternational
4a:comedycentral
4a:fox10ksaz
4a:foxnews
*/

var free_3 = [
    "8:https://content.uplynk.com/channel/ext/2118d9222a87420ab69223af9cfa0a0f/kabc_24x7_news.m3u8" , "ABC"
  , "1e:3324f2467c414329b3b0cc5cd987b6be"						, "ABC News"
  , "8:https://bcovlive-a.akamaihd.net/b3ed62003de946c896f4f541b908376e/us-east-1/6240731308001/playlist.m3u8" , "AMC"
  , "8:https://bcovlive-a.akamaihd.net/c9bf201b06694453bb29282f97191f58/us-east-1/6240731308001/playlist.m3u8" , "BBC America"
  , "8:https://www.bloomberg.com/media-manifest/streams/phoenix-us.m3u8"		, "Bloomberg"
  , ""											, "CBS [n/a]"
  , "8:http://cbsn-us.cbsnstream.cbsnews.com/out/v1/55a8648e8f134e82a470f83d562deeca/master.m3u8" , "CBS News"
  , ""											, "CNBC [n/a]"
  , "/0/1/0 8:https://turnerlive.warnermediacdn.com/hls/live/586495/cnngo/cnn_slate/VIDEO_2_1964000.m3u8" , "CNN"
  , ""											, "C-SPAN [n/a]"
  , "8:https://dai.google.com/linear/hls/event/xrVrJYTmTfitfXBQfeZByQ/master.m3u8"	, "ET Live"
  , "8:https://content.uplynk.com/channel/8975f81e6efd4e609873c3e8e25c7756.m3u8"	, "Fox"
  , ""											, "Fox Business [n/a]"
  , "/432.1/0/0 7:*https://usnewson.com*https://s0.usnlive.com/stream/foxnews.m3u8"	, "Fox News **"
  , "8:https://fox-foxnewsnow-samsungus.amagi.tv/playlist.m3u8"				, "Fox News Now"
  , "/0/540.1/0 1a:hbo"									, "HBO - Home Box Office **"
  , "/0/540.1/0 7:*https://usnewson.com*https://s0.usnlive.com/stream/msnbc.m3u8"	, "MSNBC **"
  , "8:https://content.uplynk.com/channel/50d0fa1b042945a3a4f550f9b8412c83.m3u8"	, "NBC"
  , "8:https://dai2.xumo.com/amagi_hls_data_xumo1212A-xumo-nbcnewsnow/CDN/master.m3u8"	, "NBC News"
  , "8:https://cdn.klowdtv.net/803B48A/oan_aws_ms/OAN.m3u8"				, "OAN"
  , "9a:live/oan-encore"								, "OAN Encore *"
  , ""											, "PBS [n/a]"
  , "8:https://pbs-samsunguk.amagi.tv/playlist.m3u8"					, "PBS America"
  , "8:https://livestream.pbskids.org/out/v1/1e3d77b418ad4a819b3f4c80ac0373b5/est.m3u8" , "PBS Kids"
  , "8:https://dotstudio.vo.llnwd.net/v1/livestreams/popstar/master/ec9207ed6819582289cfdc7569d8065cc8aca126/Popstar_-_Frequency/playlist.m3u8"
    , "PopStar!"
  , "8:https://bcovlive-a.akamaihd.net/4d972ec6f41241f2b4286f8bdcc8dae9/us-east-1/6240731308001/playlist.m3u8" , "Sundance"
  , "/0/1/0 7:https://turnerlive.warnermediacdn.com/hls/live/2023172/tbseast/slate/VIDEO_2_1964000.m3u8" , "TBS (East)"
  , "/0/1/0 7:https://turnerlive.warnermediacdn.com/hls/live/2023174/tbswest/slate/VIDEO_2_1964000.m3u8" , "TBS (West)"
  , "8:https://d2dimalv43j51f.cloudfront.net/out/v1/52d3048e53eb42a7959dc347d2f810e2/index.m3u8" , "TMZ"
  , "/0/1/0 7:https://turnerlive.warnermediacdn.com/hls/live/2023168/tnteast/slate/VIDEO_2_1964000.m3u8" , "TNT (East)"
  , "/0/1/0 7:https://turnerlive.warnermediacdn.com/hls/live/2023170/tntwest/slate/VIDEO_2_1964000.m3u8" , "TNT (West)"
  , "/0/1/0 7:https://turnerlive.warnermediacdn.com/hls/live/2023176/trueast/slate/VIDEO_2_1964000.m3u8" , "Tru TV (East)"
  , "/0/1/0 7:https://turnerlive.warnermediacdn.com/hls/live/2023178/truwest/slate/VIDEO_2_1964000.m3u8" , "Tru TV (West)"
  , "/400.1/0/0 7:**https://android-database1.firebase-api.com/AccessLog2/108084_SD/apache.m3u8" , "USA Network **"
];

var free_4 = [
    "9a:live/adventure-sports-tv"							, "Adventure Sports *"
  , "1p:5e84f54a82f05300080e6746"							, "America's Test Kitchen *"
  , "9a:live/awe-encore"								, "AWE Encore *"
  , "9a:live/billiard-tv"								, "Billiard TV *"
  , "9a:live/boxing-tv"									, "Boxing TV *"
  , "9a:live/dot-esports"								, "Dot Esports *"
  , "9a:live/entrepreneur-1"								, "Entrepreneur *"
  , "9a:live/gusto-tv"									, "Gusto TV *"
  , "8:http://1111296894.rsc.cdn77.org/LS-ATL-56868-1/index.m3u8"			, "Hunt Channel"
  , "8:https://mavtv-1-us.samsung.wurl.tv/playlist.m3u8"				, "MAV-TV Motosports"
  , "9a:live/mma-junkie"								, "MMA Junkie *"
  , "1p:5de94dacb394a300099fa22a"							, "PGA Tour *"
  , "8:http://rbmn-live.akamaized.net/hls/live/590964/BoRB-AT/master.m3u8"		, "Red Bull TV"
  , "8:https://bcovlive-a.akamaihd.net/a71236fdda1747999843bd3d55bdd6fa/us-east-1/6183977686001/playlist.m3u8"
    , "Rev'n TV"
  , "9a:live/right-now-tv"								, "Right Now TV *"
  , "8:https://bcovlive-a.akamaihd.net/1bd075ed830e472c87676d8ecf1e771c/us-east-1/6203312018001/playlist.m3u8"
    , "Rooster Teeth"
  , "8:https://dai2.xumo.com/amagi_hls_data_xumo1212A-xumosportsgrid/CDN/master.m3u8"	, "Sports Grid"
  , "8:https://tastemadeintl-brightcove.amagi.tv/hls/amagi_hls_data_tastemade-tastemadeinternational-brightcove/CDN/master.m3u8"
    , "Tastemade"
  , "1e:1831163f97674328ad9f4b4814ed39c5"						, "TBD (Sinclair)"
  , "8:https://tennischannel-intl-samsung-uk.amagi.tv/playlist.m3u8"			, "Tennis Channel"
  , "1p:5d51e791b7dba3b2ae990ab2"							, "This Old House *"
  , "1:UCwY9B5_8QDGP8niZhBtTh8w"							, "TWiT - This Week in Tech (YT)"
  , "8:http://dai.google.com/linear/hls/event/im0MqOKRTHy9nVa1sirQSg/master.m3u8"	, "Waypoint TV"
  , "9a:live/world-poker-tour"								, "World Poker Tour *"
  , "8:http://gideommd.mmdlive.lldns.net/gideommd/d5b6a753f86e4e51b8e15c7d23887a4f/manifest.m3u8" , "You Too America"
  , "1d:premium44"									, "ESPN 1 **"
  , "1d:premium45"									, "ESPN 2 **"
  , "1d:premium39"									, "Fox Sports 1 **"
  , ""											, "Fox Sports 2 [n/a]"
  , "1d:premium"									, "NBA TV **"
  , ""											, "NBC Sports [n/a]"
  , "1d:premium405"									, "NFL Network **"
  , ""											, "NHL Network [n/a]"
  , "1x:olympic"									, "Olympic Channel *"
  , "8:https://dai2.xumo.com/amagi_hls_data_xumo1234A-stadiumsports/CDN/master.m3u8"	, "Stadium TV"
  , "1d:premium376"									, "WWE Network **"
];

var free_5 = [
    "8:*,,*https://install.akctvcontrol.com/speed/broadcast/138/desktop-playlist.m3u8"	, "American Kennel Club *"
  , "8:https://bloodydisgusting-ingest-roku-us.cinedigm.com/playlist.m3u8"		, "Bloody Disgusting"
  , "8:http://circle-xumo.amagi.tv/playlist.m3u8"					, "Circle TV"
  , "8:https://classicarts.akamaized.net/hls/live/1024257/CAS/master.m3u8"		, "Classic Arts Showcase"
  , "9a:live/comedy-dynamics"								, "Comedy Dynamics *"
  , "1e:3e45c6b5354a40f787e0b2aadb0f5d6a"						, "Comet"
  , "1e:87c82188ea944bcb961c34236b9648b0"						, "Court TV"
  , "9a:live/dark-matter-tv"								, "Dark Matter TV *"
  , "8:https://stream.ads.ottera.tv/playlist.m3u8?network_id=3444"			, "DocuBay"
  , "8:https://dai.google.com/linear/hls/event/Hx_PEMEsSzOCcZgy0Tq2YQ/master.m3u8"	, "Docurama"
  , "9a:live/dove-channel"								, "Dove Channel *"
  , "8:http://584b0aa350b92.streamlock.net:1935/folk-tv/myStream.sdp/playlist.m3u8"	, "Folk TV"
  , "8:https://fash1043.cloudycdn.services/slive/_definst_/ftv_midnite_secrets_adaptive.smil/playlist.m3u8"
    , "FTV Midnight Secrets"
  , "7a:channel/galxy-tv-2"								, "Galxy TV **"
  , "8:https://d35j504z0x2vu2.cloudfront.net/v1/master/0bc8e8376bd8417a1b6761138aa41c26c7309312/horrormachine/playlist.m3u8"
    , "Horror Machine"
  , "8:http://dai2.xumo.com/amagi_hls_data_xumo1234A-lawcrime/CDN/master.m3u8"		, "Law & Crime"
  , "9a:live/lone-star"									, "Lone Star *"
  , "1p:5cb0cae7a461406ffe3f5213"							, "Paramount Movie Channel *"
  , "1p:5812bcc8237a6ff45d16c407"							, "Paramount Network *"
  , "7a:channel/scream-factory-tv"							, "Scream Factory **"
  , "8:https://shoutfactory-shoutfactory-zype.amagi.tv/playlist.m3u8"			, "Shout Factory"
  , "8:https://stream.ads.ottera.tv/playlist.m3u8?network_id=565"			, "Space Channel"
  , "8:https://stream-us-east-1.getpublica.com/playlist.m3u8?network_id=74"		, "The Archive"
  , "8:https://filmdetective-plex.amagi.tv/index.m3u8"					, "The Film Detective"
  , "7a:channel/the-pet-collective-2"							, "The Pet Collective **"
  , "7a:channel/unexplained"								, "Unexplained **"
  , "7a:channel/unidentified-2"								, "Unidenfified **"
  , "8:https://dai2.xumo.com/amagi_hls_data_xumo1212A-redboxfilmriseclassictv/CDN/playlist.m3u8?p=redbox"
     , "FilmRise Classic TV"
  , "8:https://dai2.xumo.com/amagi_hls_data_xumo1212A-redboxfilmrisefamily/CDN/playlist.m3u8?p=redbox"
     , "FilmRise Family"
  , "8:https://dai2.xumo.com/amagi_hls_data_xumo1212A-redboxfilmrisefreemovies/CDN/playlist.m3u8?p=redbox"
     , "FilmRise Free Movies"
  , "8:https://dai2.xumo.com/amagi_hls_data_xumo1212A-redboxfilmrisescifi/CDN/playlist.m3u8?p=redbox"
     , "FilmRise Sci-Fi"
  , "0:21X5lGlDOfg"									, "NASA Official (YT)"
  , "0:nA9UZF-SZoQ"									, "NASA Media (YT)"
  , "0:86YLFOog4GM"									, "NASA ISS (YT)"
];

var free_6 = [
    "/396.1/0/0 8a:stream=bbc-london"							, "BBC 1 **"
  , "/396.1/0/0 8a:stream=bbc-two"							, "BBC 2 **"
  , "/396.1/0/0 8a:stream=bbc-news"							, "BBC News **"
  , "/396.1/0/0 8a:stream=cbbc"								, "CBBC **"
  , "/396.1/0/0 8a:stream=cbeebies"							, "CBeebies **"
  , "/0/0/1 8:^https://evil/nigiro-ppswenyks/moc.ytivargtib.ndc.cp.sulpdiv/playlist.m3u8" , "Sky News UK"
  , "8:^https://slh/moc.aibaraswenyks.maerts/sna.m3u8"					, "Sky News Arabia"
  , "0:h3MuIUNCCzI"									, "France 24 - English (YT)"
  , "0:gxG3pdKvlIs"									, "France 24 - French (YT)"
  , "0:8BZpOolYLUA"									, "France 24 - Arabic (YT)"
  , "8:https://abc-iview-mediapackagestreams-2.akamaized.net/out/v1/6e1cc6d25ec0480ea099a5399d73bc4b/index.m3u8"
    , "ABC News (Australia)"
  , "8:https://dai2.xumo.com/xumocdn/p=redbox/amagi_hls_data_xumo1212A-redboxcbcnews/CDN/playlist.m3u8" , "CBC News (Canada)"
  , "8:^https://lmsi.evil/7f0d3f550165-66d8-f034-3201-f7e19a94/evil/dpuorg/moc.vedlatigidsuroc.evil/.m3u8" , "Global News"
  , "8:https://2-fss-1.streamhoster.com/pl_122/201748-1431018-1/playlist.m3u8"		, "Newfoundland TV"
  , "8:https://d1wal6k3d7ssin.cloudfront.net/out/v1/ea91db0906c847a4931b46a9ec36e77b/index.m3u8" , "Knowledge Network (BC)"
  , "/1/0/0 7:https://hls.savoir.media/live/stream.m3u8"				, "Canal Savoir"
  , "8:https://rcavlive.akamaized.net/hls/live/704025/xcanrdi/master.m3u8"		, "Ici RDI (CBC)"
  , "8:https://pe-fa-lp03a.9c9media.com/live/NOOVO/p/hls/00000201/716cf4c845225692/manifest.m3u8" , "Noovo"
  , "8:https://bcovlive-a.akamaihd.net/575d86160eb143458d51f7ab187a4e68/us-east-1/6101674910001/playlist.m3u8"
    , "Tele-Quebec"
  , "8:https://d7z3qjdsxbwoq.cloudfront.net/groupa/live/f9809cea-1e07-47cd-a94d-2ddd3e1351db/live.isml/.m3u8" , "CPAC"
];

var free_7 = [
    "1:UC1_E8NeF5QHY2dtdLRBCCLA"						, "AfricaNews (YT)"
  , "8:https://live-hls-web-aje.getaj.net/AJE/index.m3u8"			, "Al Jazeera"
  , "8:http://amdlive.ctnd.com.edgesuite.net/arirang_1ch/smil:arirang_1ch.smil/chunklist.m3u8" , "Arirang (South Korea)"
  , "/0/576.1/0 7:https://live.cgtn.com/500/prog_index.m3u8"			, "CGTN News"
  , "/0/576.1/0 7:https://livedoc.cgtn.com/500d/prog_index.m3u8"		, "CGTN Documentary"
  , "8:https://dwamdstream102.akamaized.net/hls/live/2015525/dwstream102/index.m3u8" , "Deutsche Welle"
  , "9a:live/euronews"								, "EuroNews *"
  , "8:*,,*https://live-gbnews-ssai.simplestreamcdn.com/v1/master/82267e84b9e5053b3fd0ade12cb1a146df74169a/gbnews-live/live.m3u8"
    , "GB News (UK) *"
  , "8:https://nhkworld.webcdn.stream.ne.jp/www11/nhkworld-tv/global/2003458/live.m3u8" , "NHK World Japan"
  , "8:https://ntd02.akamaized.net/NTDA/index.m3u8"				, "NTD (New Tang Dynasty)"
  , "8:https://ndtv24x7elemarchana.akamaized.net/hls/live/2003678/ndtv24x7/ndtv24x7master.m3u8" , "NDTV (India)"
  , "8:https://cdnlive.presstv.ir/cdnlive/smil:cdnlive.smil/playlist.m3u8"	, "Press TV"
  , "8:https://rt-glb.rttv.com/live/rtnews/playlist.m3u8"			, "RT News"
  , "8:https://rt-rtd.rttv.com/live/rtdoc/playlist.m3u8"			, "RT Documentary"
  , "8:https://cdnenmain.telesur.ultrabase.net/mblivev3/480p/playlist.m3u8"	, "TeleSUR"
  , "8:http://tv-trtworld.live.trt.com.tr/master.m3u8"				, "TRT World"
  , "9a:live/wion-world-is-one-news"						, "World Is One News (India) *"
  , "1p:5e46fba0c43b0d00096e5ac1"						, "Blaze TV *"
  , "8:https://livestream.chdrstatic.com/b93e5b0d43ea306310a379971e384964acbe4990ce193c0bd50078275a9a657d/cheddar-42620/cheddarweblive/cheddar/index.m3u8"
     , "Cheddar News"
  , "8:https://edge.fstv-live-linear-channel.top.comcast.net/Content/HLS_HLSv3/Live/channel(b168a609-19c1-2203-ae1d-6b9726f05e67)/index.m3u8"
    , "Free Speech TV"
  , "8:http://nmxlive.akamaized.net/hls/live/529965/Live_1/index.m3u8"		, "NewsMax TV"
  , "8:https://dai.google.com/linear/hls/event/c-oMNcDLTeuszRKPugMj9Q/master.m3u8" , "Real America's Voice"
  , "8:https://cdn-ue1-prod.tsv2.amagi.tv/linear/amg00732-salemmediagroup-snc-ono/playlist.m3u8" , "Salem Network"
  , "8:https://dai.google.com/linear/hls/event/nX39-giHRPuKQiVAhua0Kg/master.m3u8" , "The First TV"
  , "8:https://tyt-xumo-us.amagi.tv/hls/amagi_hls_data_tytnetwor-tyt-xumo/CDN/master.m3u8" , "TYT - The Young Turks"
  , "8:https://freespeech.akamaized.net/hls/live/2016712/live1/playlist.m3u8"	, "InfoWars - Main Feed"
  , "8:https://freespeech.akamaized.net/hls/live/2024573/live2/playlist.m3u8"	, "InfoWars - Alex Jones"
  , "8:https://freespeech.akamaized.net/hls/live/2016873/live3/playlist.m3u8"	, "InfoWars - Harrison Smith"
  , "8:https://freespeech.akamaized.net/hls/live/2024574/live4/playlist.m3u8"	, "InfoWars - Owen Shroyer"
  , "1f:lindell-1"								, "Lindell TV 1 *"
  , "1f:lindell-2"								, "Lindell TV 2 *"
  , "1f:lindell-3"								, "Lindell TV 3 *"
];

var free_8 = [
    "8:http://ebsonair.ebs.co.kr/groundwavefamilypc/familypc1m/master.m3u8"	, "EBS-1 (South Korea)"
  , "8:http://ebsonair.ebs.co.kr/ebs2familypc/familypc1m/index.m3u8"		, "EBS-2 (South Korea)"
  , "8:https://ebsonair.ebs.co.kr/ebsufamilypc/familypc1m/playlist.m3u8"	, "EBS Kids (South Korea)"
  , "8:http://rthklive1-lh.akamaihd.net/i/rthk31_1@167495/master.m3u8"		, "RTHK-31 (Hong Kong)"
  , "8:http://rthklive2-lh.akamaihd.net/i/rthk32_1@168450/master.m3u8"		, "RTHK-32 (Hong Kong)"
  , "1:UC5BMIWZe9isJXLZZWPWvBlg" 						, "Kompas TV (Indonesia, YT)"
  , "0:QTz6avPD4Ns" 								, "CCTV-4 (China, YT)"
  , "8:http://iptv.tapesh.tv/tapesh/playlist.m3u8"				, "PBC Tapesh (US-Iran)"
  , "8:https://dmisxthvll.cdn.mgmlcdn.com/dubaitvht/smil:dubaitv.stream.smil/playlist.m3u8" , "Dubai TV (UAE)"
  , "8:https://amtvusdvr.tulix.tv/am2abr/index.m3u8"				, "Public TV Armenia"
  , "8:http://hls.mirtv.cdnvideo.ru/mirtv-parampublish/mirtv3_2500/playlist.m3u8" , "Mir TV (Russia)"
  , "8:http://tvchannelstream1.tvzvezda.ru/cdn/tvzvezda/playlist.m3u8"		, "Zvezda TV (Russia)"
  , "/0/576.1/0 7:http://stream.tvkujawy.pl:8080/live/broadcast.m3u8"		, "TV Kujawy (Poland)"
  , "/0/576.1/0 7:https://stream-6.mazana.tv/slagr.m3u"				, "Slagr TV (Czech Republic)"
  , "/0/0/1 7:http://stream.fs1.tv:8080/hls/webstream.m3u8"			, "FS1 Salzburg (Austria)"
  , "8:https://5857499ee635b.streamlock.net/radiowesertv-live/_definst_/mp4:livestreamTV/playlist.m3u8"
    , "Radio Weser TV (Germany)"
  , "8:http://live.streams.ovh:1935/tvfilopoli/tvfilopoli/playlist.m3u8"	, "TV Filopoli (Greece)"
  , "8:http://wms.shared.streamshow.it:1935/supertv/supertv/live.m3u8"		, "Super TV (Italy)"
  , "8:https://hls-live-tv2000.akamaized.net/hls/live/2028510/tv2000/master.m3u8" , "TV 2000 (Italy)"
  , "8:http://cdnamd-hls-globecast.akamaized.net/live/ramdisk/al_aoula_inter/hls_snrt/al_aoula_inter.m3u8"
    , "Al Aoula (Morocco)"
  , "8:https://cdnesmain.telesur.ultrabase.net/mbliveMain/480p/playlist.m3u8"	, "TeleSUR (Venezuela)"
  , "8:http://mdstrm.com/live-stream-playlist/5a7b1e63a8da282c34d65445.m3u8"	, "Multimedios Costa Rica"
  , "8:http://cdn.elsalvadordigital.com:1935/wowtv/wowtv/playlist.m3u8"		, "Wow! TV (El Salvador)"
  , "8:http://streamingcws20.com:1935/lobodurango/videolobodurango/playlist.m3u8" , "TV Lobo (Mexico)"
  , "8:https://univision-live.cdn.vustreams.com/live/ce88b839-6376-4494-a2ee-83d66bc7cfc1/live.isml/ce88b839-6376-4494-a2ee-83d66bc7cfc1.m3u8"
    , "Univision"
];

var free_9 = [
    "8:http://unlimited1-us.dps.live/atv/atv.smil/playlist.m3u8"		, "Antofagasta TV (Chile)"
  , "8:https://evpp.mm.uol.com.br/ne10/ne10.smil/master.m3u8"			, "NE-10 (Brazil)"
  , "/0/0/1 7:**http://atr-live.cdn-03.cosmonova.net.ua/hls/atr_ua_hi/index.m3u8" , "ATR TV (Ukraine) **"
  , "/0/540.1/0 7:http://mrlive.1tvcrimea.ru:8080/1tvcrimea.m3u8"		, "Crimea TV (Russia)"
  , "8:http://live.ugratv.cdnvideo.ru/ugratv/smil:ugrastream1.smil/playlist.m3u8" , "Ugra TV (Russia)"
  , "/0/540.1/0 7:http://85.132.81.184:8080/arbkepez/live/index.m3u8"		, "Kepez TV (Azerbaijan)"
  , "/406.1/0/0 7:**http://alpha.tv.online.tm/hls/ch007_720/index.m3u8"		, "Turkmenistan TV *"
  , "8:http://103.14.38.107:1935/live/mnb.stream/playlist.m3u8"			, "MNB (Mongolia)"
  , "8:http://akaram.zecast.net/akaram-live/akaramkidz/playlist.m3u8"		, "Akaram Kidz (India)"
  , "/0/1/1 8:**http://thaipbs-live.cdn.byteark.com/live/playlist.m3u8"		, "Thai PBS (Thailand) **"
];

/*
  
http://pbs-samsunguk.amagi.tv/playlist.m3u8  pbs america
?9a:live/sonicentric
?7a:channel/watch-it-scream-2
?7a:channel/midnight-pulp
?7a:channel/frightflix-2
?7a:channel/usa-today-news
?7a:channel/bloomberg-tv
?7a:channel/bloomberg-originals
?7a:channel/speedvision
?7a:channel/pickletv
?7a:channel/wildearth
?7a:channel/beautiful-planet
?7a:channel/retrocrush
?7a:channel/asiancrush
?7a:channel/ign1
?7a:channel/dungeon-tv-2

    "8:http://170.178.189.70:1935/live/Stream1/playlist.m3u8"				, "American Horrors"
  , "8:https://stitcheraws.unreel.me/wse-node02.powr.com/live/5c7e2503932c8368bdbfd875/playlist.m3u8" , "High Times"
  , "8:https://cdn-uw2-prod.tsv2.amagi.tv/linear/newsnetAA-newsnet-ono/playlist.m3u8" , "NewsNet Live"
    "8:http://live.streams.ovh:1935/cannali/cannali/playlist.m3u8"		, "Cannali HD (Greece)"

  , "/400.1/0/0 7:**https://android-database1.firebase-api.com/AccessLog2/108091_SD/apache.m3u8" , "WWE ??? **"
  Popstar! https://linear-10.frequency.stream/10/hls/master/playlist.m3u8
  Comet https://dai.google.com/linear/hls/event/83L2OqtGSZ6lbWt8ODomWg/master.m3u8
  , "/400.1/0/0 7:**https://android-database1.firebase-api.com/AccessLog2/108086_SD/apache.m3u8" , "TBS **"

  , "8a:stream=bbc-london"								, "BBC 1 **"
  , "8a:stream=bbc-two"									, "BBC 2 **"
  , "7a:bbc-news"									, "BBC World News **??"
  , "8a:stream=cbbc"									, "CBBC **"
  , "8a:stream=cbeebies"								, "CBeebies **"
  , "8a:stream=channel4"								, "Channel 4 **?"
  , "8a:stream=five"									, "Channel 5 **?"
  , "8a:stream=itv"									, "ITV 1 **?"
  , "8a:stream=itv2"									, "ITV 2 **?"
  , "8a:stream=itv3"									, "ITV 3 **?"
  , "8a:stream=itv4"									, "ITV 4 **?"

  , "1:UCJg9wBPyKMNA5sRDnvzmkdg"							, "Fox News Now (YT)"
  , "8:https://d1mpprlbe8tn2j.cloudfront.net/v1/master/7b67fbda7ab859400a821e9aa0deda20ab7ca3d2/euronewsLive/87O7AhxRUdeeIVqf/ewnsabren_eng.m3u8"
    , "EuroNews"
  , "/0/1/0 7:https://dqkpvuuvaruk2.cloudfront.net/out/v1/f2054baeb8e94043bfc9c8cca2a0013d/index_3.m3u8" , "World Is One News (India)"

  cbc news https://dai2.xumo.com/xumocdn/p=redbox&deviceid=&is_lat=&subp=RedboxdesktopWebWindows/amagi_hls_data_xumo1212A-redboxcbcnews/CDN/playlist.m3u8
  cbc news https://csm-e-eb.csm.tubi.video/csm/live/243017997.m3u8
  et live https://dai.google.com/linear/hls/pa/event/xrVrJYTmTfitfXBQfeZByQ/stream/0da7b1a4-9efa-48e6-9e37-d7e15ff9ea55:DLS/master.m3u8

  , "8:*www.nasa.gov,,*https://ntv1.akamaized.net/hls/live/2014075/NASA-NTV1-HLS/master.m3u8" , "NASA Official **"
  , "8:*www.nasa.gov,,*https://ntv2.akamaized.net/hls/live/2013923/NASA-NTV2-HLS/master.m3u8" , "NASA Media **"

*/

////////////////////////////////
///// End of User Settings /////
////////////////////////////////

</script><script>

var head = "<!DOCTYPE html><html><head><meta charset='utf-8'>" +
           "<title>Downloader</title></head><body><h2>Downloader</h2>";

var tail = "<p></body></html>", download_doc = head + tail;

var last_h = last_w = last_raw = last_time = the_time = busy = 0;
var cors_bypass = cors_kraker = error = "", vidwin = null;
var freetv = {}, cookies = {};

var localhost, blank_page, worker, client, last_client;
var response, textData, jsonData, event_time, dropdown, dloader;
var us_geo_bypass;

var got_crypto = function ()
{
  if (window.CryptoJS) return true;
  alert ("CryptoJS module is missing!"); return false;
}
////////////////////

var cat_worker = function (msg)
{
  if (!msg)
  {
    setTimeout (function() { cat_worker ("@"); }, 30000);
    return new Promise (function (success, failure) { cookies ["@"] = success; });
  }
  else if (cookies ["@"]) { cookies ["@"] (msg.substr (1)); delete cookies ["@"]; }
}
////////////////////

var say_worker = function (id, msg)
{
  worker.postMessage ({ id: id ? id : "", app: "@alleycat", msg: msg ? msg : "goodbye" });
}
////////////////////

var msg_worker = function (id, msg)
{
  console.log ("Shared worker says " + msg);

  if (!id)
  {
    if (msg == "start")  say_worker ("", "hello");
    if (msg == "hello")  say_worker ("", "master");
    if (msg == "master") say_worker ("", "websock");
    if (msg == "ready")  document.title = "***";
    return;
  }

  if (msg [0] == "@") { cat_worker (msg); return; }

  if (busy) { say_worker (id, "retry"); return; }

  client = id; id = msg.split (" "); var frm = id [0] * 1;
  if (isNaN (frm) || frm < 1 || frm > 3) frm = 1;
  var src = id [1]; id = id [2];

  if (!id || !src) { say_worker (client, "error"); client = ""; return; }

  frm += 4; var doc = document.getElementById ("fmt" + frm);
  var fmt = doc.value; if (!fmt) fmt = doc.children [0].value;
  clear_video (frm); setup_cors (frm);

  if (src.substr (0, 4) == "raw_")
  {
    fmt = 1; src = src.substr (4); if (src == "m3u8") fmt = 2;
    if (src == "dash") fmt = 3; toggle_hls (frm, fmt);

    if (id.substr (0,4) != "http") id = localhost ? localhost + id : "";

    say_worker (client, id ? "okay" : "error"); last_client = client;
    client = ""; if (id) loadwindow (id, frm, "raw_video"); return;
  }

  if (src == "youtube")      request (id, frm, fmt); else
  if (src == "bitchute")     req_bitchute (id, frm, fmt); else
  if (src == "rumble")       req_rumble (id, frm, fmt); else
  if (src == "vimeo")        req_vimeo (id, frm, fmt); else
  if (src == "infowars")     req_infowars (id, frm, fmt); else
  if (src == "brighteon")    req_brighteon ("*" + id, frm, fmt); else
  if (src == "dailymotion")  req_dailymotion (id, frm, fmt); else
  if (src == "brandnewtube") req_brandnewtube (id, frm, fmt); else
  if (src == "twitter")      req_twitter ("*" + id, frm, fmt); else
    { say_worker (client, "error"); client = ""; }
}
////////////////////

var load_all = function ()
{
  localhost = location.hostname == "localhost" ? location.origin + "/" : "";
  blank_page = (localhost ? "/~" : "") + "_blank.htm";

  if (!localhost) document.getElementById ("proxy").children [1].setAttribute ("checked", "");
  init_box ("proxy"); load_boxes (5); load_boxes (6); load_boxes (7); resize_all ();

  worker = new SharedWorker (localhost + "worker.js").port;
  worker.onmessage = function (e) { msg_worker (e.data.id, e.data.msg); }
  window.onmessage = function (e) { cat_worker ("@" + e.data); }
  var crypto = document.getElementById ("cryptojs");

  var blank = "<!DOCTYPE html><html><head>\n" +
    "<meta name='viewport' content='width=device-width, initial-scale=1.0'>\n" +
    "<meta charset='utf-8'></head><body></body></html>\n";

  if (localhost)
  {
    fetch (blank_page, { method: "PUT", body: blank });
    crypto.src = "/~crypto.js"; return;
  }

  crypto.src = "https://cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.9-1/crypto-js.min.js";

  alert (
    "The origin of this document is not the preferred origin (http://localhost).\n\n" +
    "This app might not work as intended and some features may be unavailable.\n\n" +
    "Trust the Plan -- WWG1WGA -- Where We Go On We Go All");
}
////////////////////

var dump_all = function ()
{
  // shut down streams
  say_worker(); clear_video (5); clear_video (6); clear_video (7); ir_action (0);
  // destroy iframes so browser won't try to reload them on page refresh
  clear_frame (5); clear_frame (6); clear_frame (7);
}
////////////////////

var clear_frame = function (frame)
{
  var win = document.getElementById ("mov" + frame); win.parentNode.removeChild (win);
}
////////////////////

var resize_all = function ()
{
  resize_frame ("info", 5); resize_frame ("news", 6); resize_frame ("free", 7);
}
////////////////////

var resize_frame = function (name, frame)
{
  var win = document.getElementById (name).nextElementSibling;
  var sib = win.firstElementChild.firstElementChild.children;
  var a = sib [0].clientWidth, b = sib [2].clientWidth;

  sib [2].style.width = (a < 300 && b < 40) ? "0" : "35vw";
  a += b; sib = sib [2]; b = sib.children.length;

  if (a > 400)
  {
    if (!b) for (b = 1; b <= 9; b++)
    {
      if (!(win = document.getElementById ("stk" + frame + "-" + b))) break;
      sib.appendChild (win.cloneNode (true)); win.style.visibility = "hidden";
      sib.appendChild (document.createElement ("P"));
    }
    sib.style.minWidth = "100px";
  }
  else
  {
    sib.innerHTML = ""; sib.style.minWidth = 0;

    for (b /= 2; b > 0; b--)
      document.getElementById ("stk" + frame + "-" + b).style.visibility = "visible";
  }
}
////////////////////

var load_boxes = function (frame)
{
  init_box ("ctr" + frame + "z"); init_box ("fmt" + frame);
  init_box ("stk" + frame); init_box ("src" + frame); init_box ("win" + frame);
}
////////////////////

var init_box = function (name)
{
  var win = document.getElementById (name), list = win.children;
  var panel = win.parentNode.firstElementChild.nodeName == "DIV";
  win.onclick = function(event) { listpick (event.target, panel); }

  var m = 0, val = "", txt = list[0].innerText;

  for (var n = 0; n < list.length; n++) if (list[n].hasAttribute ("checked")) m = n;

  val = list[m].value; txt = list[m].innerText; list[m].classList.add ("mark");

  win.value = val; if (panel) return;

  var doc = win.parentNode.firstElementChild; doc.value = txt.trimEnd();  // Sept 2022
  doc.nextElementSibling.addEventListener ("click", function(){ listbox (this); });
}
////////////////////

var listbox = function (item)
{
  var box = item.nextElementSibling, doc = box.classList; doc.toggle ("show");
  if (dropdown && box != dropdown) dropdown.classList.remove ("show");
  event_time = 0; dropdown = doc.contains ("show") ? box : null;

  var w = item.clientWidth + item.parentNode.firstElementChild.clientWidth + 6;
  box.style.minWidth = w + "px";
}
////////////////////

var listpick = function (item, panel)
{
  var list = item.parentNode.children; if (item.nodeName == "DIV") return;

  for (var n = 0; n < list.length; n++) if (list[n].classList.contains ("mark"))
  {
    list[n].classList.remove ("mark"); break;
  }

  item.classList.add ("mark"); item.parentNode.value = item.value;
  if (!panel) item.parentNode.parentNode.firstElementChild.value = item.innerText;
}
////////////////////

var MEOW = function (event)
{
  if (event.type != "click" && event.type != "keydown") return;

  if (dropdown && event_time > 0 && event_time != event.timeStamp)
  {
    dropdown.classList.remove ("show"); dropdown = null;
  }
  event_time = event.timeStamp;
} 
////////////////////

var copylist = function (frame, num)
{
  var name, list, box, item, val, txt, i, j;

  var iptv = num < 0; if (iptv) num = -num; if (!num) return;

  if (num < 10)
  {
    name = "video";
    if (num == 1) list = list_1; else
    if (num == 2) list = list_2; else
    if (num == 3) list = list_3; else
    if (num == 4) list = list_4; else
    if (num == 5) list = list_5; else
    if (num == 6) list = list_6; else
    if (num == 7) list = list_7; else
    if (num == 8) list = list_8; else
    if (num == 9) list = list_9; else return;
  }
  else if (num < 20)
  {
    name = "video"; num -= 10;
    if (num == 1) list = news_1; else
    if (num == 2) list = news_2; else
    if (num == 3) list = news_3; else
    if (num == 4) list = news_4; else
    if (num == 5) list = news_5; else
    if (num == 6) list = news_6; else
    if (num == 7) list = news_7; else
    if (num == 8) list = news_8; else
    if (num == 9) list = news_9; else return;
  }
  else if (num < 30)
  {
    name = "station"; num -= 20;
    if (num == 1) list = free_1; else
    if (num == 2) list = free_2; else
    if (num == 3) list = free_3; else
    if (num == 4) list = free_4; else
    if (num == 5) list = free_5; else
    if (num == 6) list = free_6; else
    if (num == 7) list = free_7; else
    if (num == 8) list = free_8; else
    if (num == 9) list = free_9; else return;
  }
  else return;

  box = document.getElementById ("stk" + frame); item = box.children;

  for (i = item.length - 1; i > 0; i--) box.removeChild (item [i]);

  for (i = 0, j = 1; i < list.length; i += 2, j++)
  {
    txt = list [i+1];
    if (!(val = list [i])) val = txt; 
    if (val [0] != "?") if (iptv) val = "?" + val;
    if (val [val.length - 1] == ":") val = val + txt;
    box.appendChild (new Option ("[" + (j < 10 ? "0" : "") + j + "] " + txt, val));
  }

  list = document.getElementById ("stk" + frame + "-" + num).innerText;
  name = "Select a " + name + " (" + list + ")";

  item[0].innerText = box.parentNode.firstElementChild.value = name;
  box.value = 0; popper (frame, 0);
}
////////////////////

var select_site = function (frame, value)
{
  var doc = document.getElementById ("src" + frame);
  var box = doc.parentNode.firstElementChild;
  doc.value = value; doc = doc.children;

  for (var d, n = 0; n < doc.length; n++)
    if ((d = doc [n]).value == value)
    {
      box.value = d.innerText; d.classList.add ("mark");
    }
    else if (d.classList.contains ("mark")) d.classList.remove ("mark");
}
////////////////////

var hidelist = function (frame)
{
  var doc = document.getElementById ("stk" + frame);
  var box = doc.children[0]; doc.value = box.value;
  doc.parentNode.firstElementChild.value = box.innerText;
}
////////////////////

var toggle_hls = function (frame, state)
{
  if (state < 0) return;

  var doc = document.getElementById ("hls" + frame);
  var hls = doc.checked; hls = hls ? hls * 1 : 0;

  var txt = "Wrapper"; if (++hls > 2) hls = 0; if (state > 0) hls = state - 1;
  if (hls == 1) txt = "M3U8"; else if (hls == 2) txt = "DASH";

  doc.checked = hls; doc.innerHTML = txt;

  if (!state) document.getElementById ("mov" + frame + "b").checked = true;
}
////////////////////

var buttonpress = function (frame, num)
{
  var id1, id2, doc1, doc2, chk, txt;

  id1 = "btn" + frame + "a"; id2 = "btn" + frame + "b";

  doc1 = document.getElementById (num ? id2 : id1);
  doc2 = document.getElementById (num ? id1 : id2);

  chk = doc1.checked; doc1.checked = !chk;
  doc1.className = (chk ? "is_off" : "is_on");
  doc2.checked = false; doc2.className = "is_off";
}
////////////////////

var brightness = function (frame, mode)
{
  var win = document.getElementById ("mov" + frame), vid = win.contentDocument;
  if (vid) vid = vid.getElementById ("video"); if (!vid) vid = win;

  var LVL = document.getElementById ("ctr" + frame + "x");
  var SAT = document.getElementById ("ctr" + frame + "y");

  var lvl = LVL.value.substr (5) * 1;
  var sat = SAT.value.substr (5) * 1;
  var con, lo = -9, hi = 9;

  if (mode == 1) if ((lvl -= 1) < lo) lvl = lo;
  if (mode == 2) if ((lvl += 1) > hi) lvl = hi;
  if (mode == 3) if ((sat -= 1) < lo) sat = lo;
  if (mode == 4) if ((sat += 1) > hi) sat = hi;
  if (mode == 5)
  {
    var x = LVL.step * 1, y = SAT.step * 1, z = lvl || sat;
    if (z) { LVL.step = lvl; lvl = 0; } else lvl = x ? x : 0;
    if (z) { SAT.step = sat; sat = 0; } else sat = y ? y : 0;
  }

  LVL.value = "Brt:  " + (lvl > 0 ? "+" : "") + lvl;
  SAT.value = "Sat:  " + (sat > 0 ? "+" : "") + sat;

  lvl = lvl * 0.05 + 1; sat = sat * 0.1 + 1;
  sat = sat * (3 - lvl) / 2; con = (2 - lvl * (3 - lvl)) * (2.5 - sat) + 1;

  lvl = lvl.toFixed (3); con = con.toFixed (3); sat = sat.toFixed (3);
  lvl = "brightness(" + lvl + ") contrast(" + con + ") saturate(" + sat + ")";
  vid.style.filter = win.value = lvl;
}
////////////////////

var scalingfactor = function (frame, mode)
{
  var win = document.getElementById ("ctr" + frame + "w"), scale = win.value * 1;
  var vid = document.getElementById ("mov" + frame).contentDocument;
  if (vid) vid = vid.getElementById ("video");

  if (mode == 1) if ((scale -= 5) <  50) scale = 50;
  if (mode == 2) if ((scale += 5) > 150) scale = 150;

  win.value = scale; if (vid) vid_scaler (vid, 0, scale);
}
////////////////////

var urlcopy = function (frame, copy)
{
  var url = document.getElementById ("line" + frame);
  var btn = document.getElementById ("dload" + frame);

  if (copy && !document.getElementById ("mov" + frame + "m").checked)
    { url.select(); document.execCommand ("copy"); }

  url = url.value; if (copy) popper (frame, 2);
  if (!url) btn.removeAttribute ("href"); else btn.href = url;
}
////////////////////

var input_onclick = function (id)
{
  var doc = document.getElementById (id);
  if (!doc.checked && doc.selectionStart >= doc.selectionEnd - 1) doc.select();
  doc.checked = true;
}
////////////////////

var input_onblur = function (id)
{
  document.getElementById (id).checked = false;
}
////////////////////

var is_busy = function (frame, msg)
{
  if (busy) return 1;
  document.getElementById ("vid" + frame).innerHTML = "Busy";
  if (msg) document.getElementById ("id" + frame).value = msg;
  no_format (frame); busy = 1; error = ""; return 0;
}
////////////////////

var no_fail = function (frame, msg)
{
  if (busy) toggle_hls (frame, busy); else
  {
    no_format (frame); if (!msg && error) msg = "err: " + error;
    if (msg) document.getElementById ("id" + frame).value = msg;
    document.getElementById ("vid" + frame).innerHTML = "Error";
  }
  if (client && busy >= 0)
  {
    say_worker (client, busy ? "okay" : "error");
    last_client = busy ? client : ""; client = "";
  }
  frame = busy; busy = 0; return (frame);
}
////////////////////

var stream_all = function (frame, type)
{
  if (busy) busy = type + 1;
  return (!document.getElementById ("mov" + frame + "f").checked);
}
////////////////////

var reset_frame = function (frame)
{
  clear_video (frame); busy = 0;
}
////////////////////

var clear_video = function (frame)
{
  loadwindow ("", frame, ""); popper (frame, 3);
  brightness (frame, 0); vid_info (frame, 0, 0, 1);
  document.getElementById ("meta" + frame).step = 0;
}
////////////////////

var setup_cors = function (frame)
{
  if (document.getElementById ("mov" + frame + "p").checked)
    cors_bypass = document.getElementById ("proxy").value; else cors_bypass = "";

  cors_kraker = "";
  if (cors_bypass [0] == "!") cors_bypass = cors_kraker = cors_bypass.substr (1);
  if (cors_bypass == "LOCAL") cors_bypass = cors_kraker = localhost || "http://localhost:8080/";

  us_geo_bypass = "https://kraker-remote.vercel.app/?url=";
  if (cors_kraker == localhost) us_geo_bypass = cors_kraker + us_geo_bypass;

}
////////////////////

var allow_cookie = function (source, cookie)
{
  if (!cors_kraker) return ({});

  if (source) if (cookie) cookies [source] = cookie; else cookie = cookies [source];

  if (!cookie) cookie = "null"; return ({ headers: { 'Accept': '**' + cookie } });
}
////////////////////

var cookiecutter = function (name, cookie)
{
  var box = document.querySelector (".secret");

  if (cookie) cookies [name] = cookie; else
    if (typeof (name) == "string") { box.style.display = "block"; box.value = name; } else
      { box.style.display = "none"; if (name) window.open ("bot-challenge.htm?" + box.value); }
}
////////////////////

var saved_path = function (name)
{
  var path, time, timeout;  // default timeout = 14280 = 119 minutes x 120 half-seconds

  if (!(path = freetv [name])) path = ""; else
  {
    path = path.split (" "); time = path [0] * 1; timeout = path [1] * 120;
    if (!timeout) timeout = 14280; path = (time > the_time - timeout) ? path [2] : "";
  }
  return (path);
}
////////////////////

var pullstring = function (s, t, u)
{
  var m = t.length, n = s.indexOf (t) + m;
  m = n < m ? -1 : (u ? s.indexOf (u, n) : s.length);
  return (m < 0 ? "" : s.substr (n, m - n));
}
////////////////////

var get_time = function ()
{
  the_time = Date.now() / 500; return (the_time);
}
////////////////////

</script><script>

////////////////////////////////
///// INFO / ENTERTAINMENT /////
////////////////////////////////

var loadid = function (frame, mode)
{
  var url, fmt, doc, sub, src;

  if (busy) return; clear_video (frame); setup_cors (frame);

  doc = document.getElementById ("fmt" + frame);
  if (!(fmt = doc.value)) fmt = doc.children[0].value;

  if (mode == 0)
  {
    url = document.getElementById ("stk" + frame).value;
    if (!url) url = document.getElementById ("id" + frame).value.trim();
  }
  else if (mode == 1)
  {
    url = document.getElementById ("line" + frame).value.trim();
    url = url.replace (/\\u0025/g, "%"); url = url.replace (/\\u002F/g, "/"); 
    url = url.replace (/&amp;/g, "&"); url = url.replace (/\\\//g, "/");
  }
  else url = error;

  if (url [0] == "?") { open_livestream (url, frame, fmt); return; }
  if (mode == 1) { loadwindow (url, frame, ""); return; }

  src = document.getElementById ("src" + frame).value;
  if (!src) src = 0; sub = url.split (": ");

  if (sub.length > 1) url = sub [sub.length - 1]; else
  {
    sub = url.split (":"); doc = sub [0];
    if (sub.length > 1 && doc.length < 4)
    {
      src = 0; url = sub [sub.length - 1];
      if (doc == "b") src = 1;
      if (doc == "v") src = 2;
      if (doc == "i") src = 3;
      if (doc == "e") src = 4;
      if (doc == "d") src = 5;
      if (doc == "n") src = 7;
      if (doc == "t") src = 27;
      select_site (frame, src);
    }
  }      
  if (url == "") return;

  if (src == 1  && (url = getid (url,-12))) req_bitchute (url, frame, fmt); else
  if (src == 14 && (url = getid (url, -8))) req_rumble (url, frame, fmt); else
  if (src == 2  && (url = getid (url, -9))) req_vimeo (url, frame, fmt); else
  if (src == 3  && (url = getid (url, 24))) req_infowars (url, frame, fmt); else
  if (src == 4  && (url = getid (url,  0))) req_brighteon (url, frame, fmt); else
  if (src == 5  && (url = getid (url, -7))) req_dailymotion (url, frame, fmt); else
  if (src == 11 && (url = getid (url, 12))) req_153news (url, frame, fmt); else
  if (src == 12 && (url = getid (url, 15))) req_brandnewtube (url, frame, fmt); else
  if (src == 21 && (url = getid (url,  0))) req_twitter (url, frame, fmt); else
  if (src == 27 && (url = getid (url,  0))) req_twitchtv (url, frame, fmt); else
  if (src == 7  && (url = getid (url, 10))) req_natfilmbrd (url, frame, fmt); else
  if (src == 25 && (url = getid (url, -9))) req_iheartradio (url, frame, fmt); else

  if (src == 0  && (url = getid (url, 11))) request (url, frame, fmt); else

  no_fail (frame, url ? "Not supported" : "Invalid ID");
}
////////////////////

var getid = function (url, len)
{
  var m, n; if (!len) return (url);

  m = url.substr (url.length - 5, 5);
  n = m.indexOf ("."); if (n < 0) n = m.indexOf ("/");
  if (n >= 0) url = url.substr (0, url.length + n - 5);
  if ((n = url.indexOf ("*")) >= 0) return (url.substr (n + 1));

  if (len < 0)
  {
    len = -len;
    if (url.length <= len - 3) return "";
    if (url.length == len - 2) return url;
    if (url.length == len - 1) return url;
    if (url.length == len) return url;

    url = url.substr (url.length - len, len);
    if ((n = url.indexOf ("/")) > 1) url = "";
    if (n < 0 && (n = url.indexOf ("=")) > 1) url = "";
    if (n < 0 && (n = url.indexOf ("-")) > 1) url = "";

    if (n >= 0) url = url.substr (n + 1);
    return url;
  }

  if (url.length < len) return "";
  if (url.length == len) return url;

  url = url.substr (url.length - len, len);
  if (url.indexOf ("/") >= 0) url = "";
  if (url.indexOf ("=") >= 0) url = "";
  return url;
}
////////////////////

var request = function (id, frame, fmt)
{
  if (!document.getElementById ("mov" + frame + "b").checked)
  {
    if (is_busy (frame)) return; no_fail (frame);
    var url = "https://www.youtube.com/embed/" + id;
    loadwindow (url, frame, "youtube: " + id); return;
  }

  var src = document.getElementById ("ctr" + frame + "z").value;

  if (src == 1) if (fmt < 0) src = 0; else { request_new_youtube (id, frame, fmt); return; }
  if (src == 9) if (fmt < 0) src = 0; else { request_new_youtube (id, frame, -fmt); return; }

  if (!src && cors_kraker) { request_new_youtube (id, frame, fmt); return; }

  invidious_url = invidious_site [src]; request_invidious (id, frame, (fmt < 0 ? -fmt : fmt));
}
////////////////////

const request_invidious = async (id, frame, fmt) =>
{
  var i, j, n, f = [0,0,0,0,0,0,0,0];

  var tag = "invidious"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
  var url = invidious_url + "/api/v1/videos/" + id + "?fields=formatStreams,hlsUrl";

try
{
  response = await fetch (localhost + url);
  jsonData = await response.json();

  var sub = jsonData.formatStreams; if (!sub) throw ("!!!"); n = sub.length;

  for (i = 0; i < n; i++)
  {
    if ((j = argformat (sub[i].itag)) >= 0) f[j] = i + 1;
  }
    
  if ((n = getformat (f, fmt)))
  {
    fmt = n; fixformat (f, frame); n = f[argformat(n)] - 1;
    url = (sub[n].url.indexOf ("&gcr=") > 0) ? "local=true&" : "";  // geo-restricted?
    url = invidious_url + "/latest_version?" + url + "itag=" + fmt + "&id=" + id;
  }
  else   // live stream
  {
    url = jsonData.hlsUrl; if (!url) throw ("!!!");
    if (url.substr (0,1) == "/") url = invidious_url + url;
    sub = url = url + "?local=true";

    if (stream_all (frame, 1)) fmt = 0; else
    {
      response = await fetch (url);
      textData = await response.text();

      url = crack_m3u8 (url, textData, frame, fmt); if (!url) throw ("!!!");
      fmt = pullstring (url, "<>", ""); url = pullstring (url, "", "<>");
    }
  }

} catch (err) { console.log (err); busy = 0; }

  error = id; if (!fmt) no_format (frame);
  if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: " + id);
}
////////////////////

/*
Youtube DRM formats:
142 143 144 145 146 148 149 150 161
222 223 224 225 226 227 273 274 275 279 280
317 318 350 351 352 357 358 359 360 

https://www.youtube.com/iframe_api

t.context = { client: { gl: 'US', hl: 'en', clientName: 'WEB', clientVersion: '2.20230426.02.00' }};
t.context = { client: { gl: 'US', hl: 'en', clientName: 'ANDROID_EMBEDDED_PLAYER', clientVersion: '16.02' }};
t.context = { client: { gl: 'US', hl: 'en', clientName: 'WEB_EMBEDDED_PLAYER', clientVersion: '1.20220406.01.00' }};
t.playbackContext = { contentPlaybackContext: { signatureTimestamp: "sts", html5Preference: "HTML5_PREF_WANTS" }};
t.context.thirdParty = { embedUrl: 'https://www.youtube.com' };
*/

const request_new_youtube = async (id, frame, fmt) =>
{
  var i, j, n, s, t, sub, vid, aud, key, sig, nkey, webm, f = [0,0,0,0,0,0,0,0,0,0];

  var tag = "youtube"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
  var url = cors_bypass + "https://www.youtube.com/watch?v=" + id;
  if (!localhost || localhost != cors_kraker) if (fmt < 0) fmt = -fmt;

try
{
  response = await fetch (url);
  textData = await response.text();

  url = pullstring (textData, "ytInitialPlayerResponse = ", "};");

  if (url) sub = JSON.parse (url + "}");

  if (!url || !(sub = sub.streamingData))
  {
    t = { videoId: id };
    t.context = { client: { gl: 'US', hl: 'en', clientName: 'TVHTML5_SIMPLY_EMBEDDED_PLAYER', clientVersion: '2.0' }};
    s = JSON.stringify (t);

    url = cors_bypass + "https://www.youtube.com/youtubei/v1/player?key=AIzaSyAO_FJ2SlqU8Q4STEHLGCilw_Y9_11qcW8";
    response = await fetch (url, { method: 'POST', headers: {'content-type': 'application/json'}, body: s });
    jsonData = await response.json();

    if (!(sub = jsonData.streamingData)) throw ("!!!");
  }

  if (fmt < 0 && (fmt = -fmt) && (t = sub.adaptiveFormats))
  {
    for (i = 0; i < t.length; i++)
      if ((s = t[i].itag) && (j = isdashfmt (s)) >= 0)
        if (t[i].approxDurationMs || t[i].targetDurationSec) f[j] = i + 1;

    if (!f[8]) f[0] = f[1] = f[2] = 0;
    if (!f[9]) f[4] = f[5] = f[6] = 0;
    if (getformat (f, fmt)) tag = "";
  }

  if (tag && (t = sub.formats))
    for (i = 0; i < t.length; i++) if ((s = t[i].itag) && (j = argformat (s)) >= 0) f[j] = i + 1;

  fmt = getformat (f, fmt); fixformat (f, frame);
  if ((i = argformat (fmt)) < 0 || (j = f [i] - 1) < 0) throw ("!!!");

  webm = i > 3; if (!tag) aud = new_yt_split (t [f [webm + 8] - 1]);
  vid = new_yt_split (t [j]); url = vid [0]; sig = vid [1]; if (!url) throw ("!!!");

  if (sig || url.includes ("&n="))
  {
    if (!(s = pullstring (textData, '"PLAYER_JS_URL":"', '"')))
    {
      response = await fetch (cors_bypass + "https://www.youtube.com/embed/" + id);
      textData = await response.text();

      s = textData.substr (textData.indexOf ("base.js") - 100, 107);
      if ((i = s.indexOf ("/s/player/")) < 0) throw ("!!!"); s = s.substr (i);
    }

    key = cookies [s]; nkey = cookies ["!" + s];

    if ((sig && !key) || (!sig && !nkey))
    {
      response = await fetch (cors_bypass + "https://www.youtube.com" + s);
      textData = await response.text();

      cookies [s] = key = yt_algo (textData);

      // extract the n signature algo (needed to bypass the rate limiting)

      if ((n = textData.indexOf ('function(a){var b=a.split("")')) > 0)
      {
        t = textData.substr (n, textData.indexOf ('b.join("")', n) - n + 12);
        cookies ["!" + s] = nkey = "var nsig=" + t + " sig=nsig(sig);";
      }
    }

    url = yt_nsig (url, nkey); if (sig && key) { eval (key); url += "&sig=" + sig; }
  }

  if (!tag) if (!(sub = yt_nsig (aud [0], nkey))) throw ("!!!"); else
  {
    var v = aud [3] + "," + vid [3], w = "wanna_boot_dash";

    if (key && (sig = aud [1])) { eval (key); sub += "&sig=" + sig; }

    download_doc = head + "YouTube DASH download links (" + id + ") -- " +
      "<a href='" + sub + "'>Audio</a> &nbsp;" +
      "<a href='" + url + "'>Video</a>" + tail;

    if (!(s = vid [2]))
    {
      v = "x-head-seqnum"; w = "x-head-time-sec";
      s = "~range=bytes=0-499|" + v + "|" + w + "|*";

      response = await fetch (localhost + s + url);
      v = response.headers.get (v); if (!v) throw ("!!!");
      w = response.headers.get (w); if (!w) throw ("!!!");

      var seg_num = v * 1; var seg_ofs = w * 1;
      var seg_dur = Math.round (10 * seg_ofs / seg_num) / 10;
      n = Math.ceil (90 / seg_dur); // initial 90-second progress bar; can be up to 3 hours

      seg_num -= n; seg_ofs -= Math.round (n * 10 * seg_dur) / 10;
      if (seg_num < 1 || seg_ofs < 1) seg_num = seg_ofs = 0;

      v = seg_num + "," + seg_ofs + "," + seg_dur + ",";
      w = "wanna_boot_dash_live"; s = "";
    }

    tag = fmt + "(" + id + ").mpd";
    s += "|" + (webm ? "audio/webm" : "audio/mp4") + "|" + (webm ? "opus" : "mp4a.40.2");
    s += "|" + (webm ? "video/webm" : "video/mp4") + "|" + (webm ? "vp9" : "avc1.4d401e");
    s += "|" + v + "|" + tag + "|" + sub + "|" + url + "|";

    await fetch (localhost + w, { method: 'POST', body: s } );
    url = localhost + "_" + w + "_" + tag; tag = "yt-dash"; stream_all (frame, 2);
  }

} catch (err) { console.log (err); busy = 0; }

  error = id; if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: " + id);
}
////////////////////

var new_yt_split = function (data)
{
  var d, i, r, s, u = data.url; i = r = s = "";

  if (!u) if (!(u = data.signatureCipher)) u = ""; else
  {
    u = u.replace (/%25/g, "%"); u = decodeURIComponent (u);
    s = pullstring (u, "s=", "&"); u = pullstring (u, "url=", "");
  }

  i = (d = data.initRange)  ? d.start + "-" + d.end : "";
  r = (d = data.indexRange) ? d.start + "-" + d.end : "";

  if (!(d = data.approxDurationMs)) d = 0;

  return ([u, s, d / 1000, i + "," + r]);
}
////////////////////

var yt_algo = function (data)
{
  var i, j, n, s, v;

  for (i = 0; i < 3; i++)
  {
    j = data.indexOf ('a=a.split("")'); if (j < 0) return "";
    s = data.substr (j + 14, 300); if ((n = s.indexOf ("a.join")) > 0) break;
    if (i > 1) return ""; data = data.substr (j + 1);
  }
  s = s.substr (0, n - 7);
  v = "var " + s.substr (0, 2) + "={";
  if ((n = data.indexOf (v)) < 0) return "";

  v = data.substr (n, 300); v = v.substr (0, v.indexOf ("};") + 2);
  return (v + "var a=sig.split('');" + s + "sig=a.join('');");
}
////////////////////

var yt_nsig = function (url, nkey)
{
  var sig = pullstring (url, "&n=", "&"); if (!nkey || !sig) return url;
  var s = "&n=" + sig + "&"; eval (nkey); sig = "&n=" + sig + "&";
  return (url.replace (s, sig));
}
////////////////////

const req_bitchute = async (id, frame, fmt) =>
{
  var tag = "bitchute"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
  var url = "https://www.bitchute.com/embed/" + id + "/";

if (!document.getElementById ("mov" + frame + "b").checked) fmt = 0; else try
{
  response = await fetch (cors_bypass + url);
  textData = await response.text();

  var s = '<source src="';
  var n = textData.indexOf (s); if (n < 0) throw ("!!!");
  
  url = textData.substr (n + s.length, 100);
  url = url.substr (0, url.indexOf ('"'));

  if (!url) throw ("!!!");

} catch (err) { console.log (err); busy = 0; }

  error = id; no_format (frame); if (no_fail (frame)) loadwindow (url, frame, tag + ": " + id);
}
////////////////////

const req_rumble = async (id, frame, fmt) =>
{
  var n, p, q, r, f = [0,0,0,0,0,0,0,0], u = [0,0,0,0,0,0,0,0];

  var tag = "rumble"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
  var url = "https://rumble.com/embed/" + id;

if (!document.getElementById ("mov" + frame + "b").checked) fmt = 0; else try
{
  url = "https://rumble.com/embedJS/u3/?request=video&ver=2&v=";

  response = await fetch (localhost + url + id);
  jsonData = await response.json();

  if (!(p = jsonData.ua))
  {
    response = await fetch (cors_bypass + "https://rumble.com/" + id);
    textData = await response.text();

    if (!(id = pullstring (textData, '"video":"', '"'))) throw ("!!!");

    response = await fetch (localhost + url + id);
    jsonData = await response.json();

    if (!(p = jsonData.ua)) throw ("!!!");
  }

  if (!p.hls || !p.hls.auto || !(url = p.hls.auto.url))
  {
    if (q = p.mp4)
    {
      if ((r = q["360"]) && (u[0] = r.url)) f[0] = 360;
      if ((r = q["480"]) && (u[1] = r.url)) f[1] = 480;
      if ((r = q["720"]) && (u[2] = r.url)) f[2] = 720;
      if ((r = q["1080"]) && (u[3] = r.url)) f[3] = 1080;

    }
    if (q = p.webm)
    {
      if ((r = q["360"]) && (u[4] = r.url)) f[4] = 360;
      if ((r = q["480"]) && (u[5] = r.url)) f[5] = 480;
      if ((r = q["720"]) && (u[6] = r.url)) f[6] = 720;
      if ((r = q["1080"]) && (u[7] = r.url)) f[7] = 1080;
    }

    fmt = getformat (f, fmt); fixformat (f, frame);
    if ((n = argformat (fmt)) < 0) throw ("!!!");
    fmt = f[n]; url = u[n];
  }
  else if (stream_all (frame, 1)) fmt = 0; else
  {
    response = await fetch (localhost + url);
    textData = await response.text();

    url = response.url.substr (localhost.length);
    url = crack_m3u8 (url, textData, frame, fmt); if (!url) throw ("!!!");
    fmt = pullstring (url, "<>", ""); url = pullstring (url, "", "<>");
  }

} catch (err) { console.log (err); busy = 0; }

  error = id; if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: " + id);
}
////////////////////

const req_vimeo = async (id, frame, fmt) =>
{
  var i, j, k, f = [0,0,0,0,0,0,0,0], r = [0,0,0,0];

  var tag = "vimeo"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
  var url = "https://player.vimeo.com/video/" + id + "/config";

try
{
  response = await fetch (cors_bypass + url);
  jsonData = response.status == 200 ? await response.json() : "";  // updated May 2023

  if (!jsonData || jsonData.request == undefined)   // privacy lock, go long way around
  {
    response = await fetch (cors_bypass + "https://vimeo.com/" + id);
    textData = await response.text();

    var s = '"config_url":"';
    var n = textData.indexOf (s); if (n < 0) throw ("!!!");

    url = textData.substr (n + s.length, 500);
    url = url.substr (0, url.indexOf ('"'));
    url = url.replace (/\\/g, "");

    response = await fetch (cors_bypass + url);
    jsonData = await response.json();
  }

  if (!(url = jsonData.request.files.progressive) || !url.length)  // livestream
  {
    if (!(url = jsonData.request.files.hls) || !(url = url.cdns)) throw ("!!!");
    if (!(s = url.fastly_live) && !(s = url.fastly_skyfire)) s = url.akamai_live;
    if (!s && !(s = url.akfire_interconnect_quic)) throw ("!!!");
    if (!(url = s.url)) throw ("!!!");

    if (localhost) url = localhost + "~" + url;

    if (stream_all (frame, 1)) fmt = 0; else
    {
      response = await fetch (url);
      textData = await response.text();
      url = response.url;

      url = crack_m3u8 (url, textData, frame, fmt); if (!url) throw ("!!!");
      fmt = pullstring (url, "<>", ""); url = pullstring (url, "", "<>");
    }
  }
  else
  {
    for (i = 0; i < url.length; i++)
    {
      k = url[i].quality; k = k.substr (0, k.indexOf ("p"));
      if ((j = chkformat (k)) >= 0) if (r[j] < k) { f[j] = i + 1; r[j] = k; }
    }
    fmt = getformat (f, fmt); fixformat (f, frame);
    if ((j = argformat (fmt)) < 0 || (j = f[j] - 1) < 0) throw ("!!!");
    fmt = url[j].height; if ((url = url[j].url) == undefined) throw ("!!!");
  }

} catch (err) { console.log (err); busy = 0; }

  error = id; if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: " + id);
}
////////////////////

const req_infowars = async (id, frame, fmt) =>
{
  var tag = "infowars"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
//var url = "https://api.banned.video/embed/" + id;
//var url = "https://freeworldnews.tv/watch?id=" + id;
  var url = "https://api.infowarsmedia.com/embed/" + id;

//https://github.com/yt-dlp/yt-dlp/issues/669

try
{
  response = await fetch (localhost + url);
  textData = await response.text();

  url = pullstring (textData, 'downloadUrl="', '"');
  if (!url) url = pullstring (textData, '"directUrl":"', '"');

  download_doc = head + "InfoWars download link: ";

  if (url.indexOf ("http") == 0)
    download_doc = download_doc + "<a href='" + url + "'>" + url + "</a>" + tail; else
    download_doc = download_doc + "Not available" + tail;

  var s = pullstring (textData, '<source src="', '"');
  if (!s) s = pullstring (textData, '"streamUrl":"', '"');
  if (s) url = s; if (!url) throw ("!!!");

  if (!url.includes (".m3u8") || stream_all (frame, 1)) fmt = 0; else
  {
    response = await fetch (url);
    textData = await response.text();

    url = crack_m3u8 (url, textData, frame, fmt); if (!url) throw ("!!!");
    fmt = pullstring (url, "<>", ""); url = pullstring (url, "", "<>");
  }

} catch (err) { console.log (err); busy = 0; }

  error = id; if (!fmt) no_format (frame);
  if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: " + id);
}
////////////////////

const req_brighteon = async (id, frame, fmt) =>
{
  var url, tag = "brighteon"; if (is_busy (frame)) return;

  if (!(url = getid (id, 36)) && !(url = getid (id, 13)))
  {
    busy = 0; no_fail (frame, "Invalid ID"); return;
  }
  document.getElementById ("id" + frame).value = tag + " (ID)";
  id = url; url = "https://www.brighteon.com/" + id;

if (!document.getElementById ("mov" + frame + "b").checked) fmt = 0; else try
{
  if (!localhost || !cors_kraker) throw ("???");

  response = await fetch (cors_kraker + url);
  textData = await response.text();

  var s = '<source src="';
  var n = textData.indexOf (s); if (n < 0) throw ("!!!");

  url = textData.substr (n + s.length, 300);
  url = url.substr (0, url.indexOf ('"'));
  url = url.replace (/&#x3D;/g, "=");

  if (url.indexOf ("m3u8") < 0) throw ("!!!");
  url = cors_kraker + "~" + url;

  if (stream_all (frame, 1)) fmt = 0; else
  {
    response = await fetch (url);
    textData = await response.text();

    url = crack_m3u8 (url, textData, frame, fmt); if (!url) throw ("!!!");
    fmt = pullstring (url, "<>", ""); url = pullstring (url, "", "<>");
  }

} catch (err) { console.log (err); busy = 0; }

  error = id; if (!fmt) no_format (frame);
  if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: " + id);
}
////////////////////

const req_dailymotion = async (id, frame, fmt) =>
{
  var tag = "dailymotion"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
  var url = "https://www.dailymotion.com/embed/video/" + id;

if (!document.getElementById ("mov" + frame + "b").checked) fmt = 0; else try
{
  url = "https://www.dailymotion.com/player/metadata/video/" + id;

  response = await fetch (localhost + url);
  jsonData = await response.json();

  var n; url = jsonData.qualities.auto[0].url;

  if (stream_all (frame, 1)) fmt = 0; else
  {
    response = await fetch (localhost + url);
    textData = await response.text();

    url = response.url.substr (localhost.length);
    url = crack_m3u8 (url, textData, frame, fmt); if (!url) throw ("!!!");
    fmt = pullstring (url, "<>", ""); url = pullstring (url, "", "<>");
  }

  n = url.indexOf ("#"); if (n > 0) url = url.substr (0, n);  // for SMPlayer
  if (localhost) url = localhost + "~*,,*" + url;

} catch (err) { console.log (err); busy = 0; }

  error = id; if (!fmt) no_format (frame);
  if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: " + id);
}
////////////////////

const req_153news = async (id, frame, fmt) =>
{
  var tag = "153news"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
  var url = "https://153news.net/watch_video.php?v=" + id;

try
{
  response = await fetch (cors_bypass + url);
  textData = await response.text();

  var n = textData.indexOf ("<video"); if (n < 0) throw ("!!!");

  url = crack_source (textData.substr (n, 2000), frame, fmt);
  if (url == "") throw ("!!!"); n = url.indexOf ("<>");
  fmt = url.substr (n + 2); url = url.substr (0, n);

} catch (err) { console.log (err); busy = 0; }

  error = id; if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: " + id);
}
////////////////////

const req_brandnewtube = async (id, frame, fmt) =>
{
  var tag = "bntube"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
  var url = "https://brandnewtube.com/embed/" + id;

try
{
  response = await fetch (localhost + url);
  textData = await response.text();

  var n = textData.indexOf ("<video"); if (n < 0) throw ("!!!");

  if (!(url = crack_source (textData.substr (n, 2000), frame, fmt))) throw ("!!!");

  j = pullstring (url, "<>", ""); url = pullstring (url, "", "<>");

  if ((n = url.indexOf ("/watch?v=")) < 0) fmt = j; else
    { busy = 2; url = url.substr (n + 9, 11); }

} catch (err) { console.log (err); busy = 0; }

  if (busy > 1) { busy = 0; request (url, frame, fmt); return; }
  error = id; if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: " + id);
}
////////////////////

const req_twitter = async (id, frame, fmt) =>
{
  var url, tag = "twit"; if (is_busy (frame)) return;

  if (!(url = getid (id, -19)) && !(url = getid (id, 13)))
  {
    busy = 0; no_fail (frame, "Invalid ID"); return;
  }
  document.getElementById ("id" + frame).value = tag + " (ID)";
  id = url; url = cors_kraker + "*https://twitter.com*https://api.twitter.com/";

try
{
  if (!cors_kraker) throw ("???");

  var b = "Bearer AAAAAAAAAAAAAAAAAAAAAPYXBAAAAAAACLXUNDekMxqa8h" +
    "%2F40K4moUkGsoc%3DTYfbDKbT3jJPCEVnMYqilB28NHfOPqkca3qaAxGfsyKCs0wRbw";

  var u = url + "1.1/guest/activate.json";
  response = await fetch (u, { method: 'POST', headers: { 'Authorization': b } });
  jsonData = await response.json();

  var g = jsonData.guest_token; if (!g) throw ("!!!");

  if (id.length != 13)
  {
    u = url + "2/timeline/conversation/" + id + ".json?tweet_mode=extended";
    response = await fetch (u, { headers: { 'Authorization': b, 'x-guest-token': g } });
    jsonData = await response.json();

    var t = jsonData.globalObjects.tweets[id], s = t.extended_entities;

    if (!s || !(s = s.media) || !(s = s["0"]) || !(s = s.video_info) || !(s = s.variants))
    {
      if (!(s = t.quoted_status_id_str)) s = t.retweeted_status_id_str;
      if (s || (s = t.in_reply_to_status_id))
      {
        t = jsonData.globalObjects.tweets[s].extended_entities;
        s = t.media["0"].video_info.variants;
      }
    }

    if (!s && (s = t.entities) && (s = s.urls [0]) && (s = s.expanded_url))
    {
      s = pullstring (s, '/spaces/', '') || pullstring (s, '/broadcasts/', '');
      if (s.length == 13) id = s; else s = "";
    }
    if (!s) throw ("!!!");
  }

  if (id.length == 13)
  {
    url = cors_kraker + "**https://twitter.com/i/api/1.1/";
    u = url + "broadcasts/show.json?ids=" + id;

    response = await fetch (u, { headers: { 'Authorization': b, 'x-guest-token': g } });
    jsonData = await response.json();

    var v = {
      "id": id, "isMetatagsQuery":true, "withSuperFollowsUserFields":true, "withDownvotePerspective":false,
      "withReactionsMetadata":false, "withReactionsPerspective":false, "withSuperFollowsTweetFields":true,
      "withReplays":true
    }

    var w = {
      "spaces_2022_h2_clipping":true, "spaces_2022_h2_spaces_communities":true,
      "responsive_web_twitter_blue_verified_badge_is_enabled":true, "verified_phone_label_enabled":false,
      "tweetypie_unmention_optimization_enabled":true, "responsive_web_uc_gql_enabled":true,
      "vibe_api_enabled":true, "responsive_web_edit_tweet_api_enabled":true,
      "graphql_is_translatable_rweb_tweet_is_translatable_enabled":true, "standardized_nudges_misinfo":true,
      "tweet_with_visibility_results_prefer_gql_limited_actions_policy_enabled":false,
      "responsive_web_graphql_timeline_navigation_enabled":true, "interactive_text_enabled":true,
      "responsive_web_text_conversations_enabled":false, "responsive_web_enhance_cards_enabled":true
    }

    if (!(u = jsonData.broadcasts[id].media_key))
    {
      v = JSON.stringify (v); v = "%7B" + v.substr (1, v.length - 2) + "%7D";
      w = JSON.stringify (w); w = "%7B" + w.substr (1, w.length - 2) + "%7D";
      u = "?variables=" + v + "&features=" + w;
      u = cors_kraker + "~**https://twitter.com/i/api/graphql/Ma7fHBtqnBIX0GbrXwrc4w/AudioSpaceById" + u;

      response = await fetch (u, { headers: { 'Authorization': b, 'x-guest-token': g }});
      jsonData = await response.json();

      if (!(u = jsonData.data.audioSpace.metadata.media_key)) throw ("!!!");
    }

    u = url + "live_video_stream/status/" + u;
    response = await fetch (u, { headers: { 'Authorization': b, 'x-guest-token': g } });
    jsonData = await response.json();

    url = jsonData.source.location; if (!url) throw ("!!!");
    if (localhost) url = localhost + "~*,,*" + url;

    if (stream_all (frame, 1)) fmt = 0; else
    {
      response = await fetch (url);
      textData = await response.text();

      url = crack_m3u8 (url, textData, frame, fmt); if (!url) throw ("!!!");
      fmt = pullstring (url, "<>", ""); url = pullstring (url, "", "<>");
      if (!fmt) fmt = 0;
    }
  }
  else
  {
    var n, j, f = [0,0,0,0,0,0,0,0], r = [0,0,0,0];

    for (n = 0; n < s.length; n++)
    {
      url = s[n].url; j = url.search (/[0-9]x[0-9]/); if (j < 0) { f[3] = n + 1; continue; }
      url = url.substr (j + 2, url.indexOf ("/", j) - j - 2) * 1;
      if ((j = chkformat (url)) < 0 || r[j] > url) continue;
      f[j] = n + 1; r[j] = url;
    }

    j = getformat (f, fmt); fixformat (f, frame);
    if ((j = argformat (j)) < 0 || (n = f[j] - 1) < 0) throw ("!!!");
    j = r[j]; url = s[n].url; //if ((n = url.indexOf ("?")) > 0) url = url.substr (0, n);

    if (j) fmt = j; else if (stream_all (frame, 1)) fmt = 0; else
    {
      response = await fetch (url);
      textData = await response.text();

      url = crack_m3u8 (url, textData, frame, fmt); if (!url) throw ("!!!");
      fmt = pullstring (url, "<>", ""); url = pullstring (url, "", "<>");
    }
  }

} catch (err) { console.log (err); busy = 0; }

  error = id; if (!fmt) no_format (frame);
  if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: " + id);
}
////////////////////

const req_twitchtv = async (id, frame, fmt) =>
{
  var tag = "twitch"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
  id = id.split ("/"); id = id [id.length - 1];
  var url = "https://www.twitch.tv/" + id;

try
{
  var local = (localhost && cors_kraker) ? localhost : "";

  response = await fetch (local + url);
  textData = await response.text();

  var p = '\\"' + id + '\\", params:{platform:\\"web\\",playerType:\\"site\\"}';
  var q = ') @include(if:true){value signature}';

  p = '{"operationName":"PlaybackAccessToken_Template","query":"query PlaybackAccessToken_Template(){' +
    'streamPlaybackAccessToken(channelName:' + p + q + ' videoPlaybackAccessToken(id:' + p + q + '}"}';

  q = pullstring (textData, '"Client-ID":"', '"');
  if (!q) q = pullstring (textData, 'clientId="', '"'); if (!q) throw ("!!!");
  url = local + "https://gql.twitch.tv/gql";

  response = await fetch (url, { method: 'POST', body: p, headers: { 'client-id': q } });
  jsonData = await response.json();

  url = jsonData.data; if (!url) throw ("!!!");
  url = id * 1 ? url.videoPlaybackAccessToken : url.streamPlaybackAccessToken;
  url = ".m3u8?sig=" + url.signature + "&token=" + encodeURIComponent (url.value);
  url = "https://usher.ttvnw.net/" + (id * 1 ? "vod/" : "api/channel/hls/") + id + url;

  if (stream_all (frame, 1)) fmt = 0; else
  {
    response = await fetch ((local ? local + "~" : "") + url);
    textData = await response.text();

    url = crack_m3u8 (url, textData, frame, fmt); if (!url) throw ("!!!");
    fmt = pullstring (url, "<>", ""); url = pullstring (url, "", "<>");
    fmt = fmt * 1;
  }
  if (local) url = local + "~*null,,*" + url;

} catch (err) { console.log (err); busy = 0; }

  error = id; if (!fmt) no_format (frame);
  if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: " + id);
}
////////////////////

const req_natfilmbrd = async (id, frame, fmt) =>
{
  var tag = "natfilmbrd"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
  var url = "https://cdnapisec.kaltura.com/p/2081491/sp/208149100/playManifest/entryId/" + id +
    "/flavorIds/1_z997vpzn/format/applehttp/protocol/https/a.m3u8";

try
{
  if (stream_all (frame, 1)) fmt = 0; else
  {
    response = await fetch (url);
    textData = await response.text();

    url = crack_m3u8 (url, textData, frame, fmt); if (!url) throw ("!!!");
    fmt = pullstring (url, "<>", ""); url = pullstring (url, "", "<>");
  }

} catch (err) { console.log (err); busy = 0; }

  error = id; if (!fmt) no_format (frame);
  if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: " + id);
}
////////////////////

const req_iheartradio = async (id, frame, fmt) =>
{
  var tag = "iheartradio"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
//  var url = "https://ca.api.iheart.com/api/v2/playback/streams";
  var url = "https://ca.api.iheart.com/api/v3/podcast/episodes/" + id;

try
{
  response = await fetch (localhost + url);
  jsonData = await response.json();

  url = jsonData.episode.mediaUrl; if (!url) throw ("!!!");

/*
  var header = { 'Content-Type': 'application/json', 'X-User-Id': '2473436724', 'X-Session-Id': '9jhqgkoyUST8iPLzLiFtDK' };
  var data = JSON.stringify ({'contentIds':[id],'hostName':'webapp','playedFrom':0,'stationId':'','stationType':'PODCAST'});

  response = await fetch (localhost + url, { method: 'POST', headers: header, body: data } );
  jsonData = await response.json();

  url = jsonData.items[0].streamUrl; if (!url) throw ("!!!");
  var n = url.indexOf ("?"); if (n > 0) url = url.substr (0, n);
*/

} catch (err) { console.log (err); busy = 0; }

  error = id; no_format (frame);
  if (no_fail (frame)) loadwindow (url, frame, tag + ": " + id);
}
////////////////////

///////////////////
///// DIG DUG /////
///////////////////

var digid = function (frame)
{
  var doc, src, fmt;

  if (busy) return; clear_video (frame); setup_cors (frame);

  doc = document.getElementById ("fmt" + frame);
  if (!(fmt = doc.value)) fmt = doc.children[0].value;

  src = document.getElementById ("src" + frame).value;
  doc = document.getElementById ("line" + frame).value.trim();

  if (src == 10) dig_test (doc, frame, fmt); else
  if (src == 14) dig_rumble (doc, frame, fmt); else
  if (src == 3 ) dig_infowars (doc, frame, fmt); else
  if (src == 4 ) dig_brighteon (doc, frame, fmt); else
  if (src == 17) dig_odysee (doc, frame, fmt); else
  if (src == 21) dig_twitter (doc, frame, fmt); else
  if (src == 22) dig_facebook (doc, frame, fmt); else
  if (src == 15) dig_telegram (doc, frame, fmt); else
  if (src == 28) dig_tiktok (doc, frame, fmt); else
  if (src == 16) dig_gabtv (doc, frame, fmt); else
  if (src == 8 ) dig_prageru (doc, frame, fmt); else
  if (src == 6 ) dig_tedtalks (doc, frame, fmt); else
  if (src == 7 ) dig_natfilmbrd (doc, frame, fmt); else
  if (src == 29) dig_earthtv (doc, frame, fmt); else
  if (src == 23) dig_podcast (doc, frame, fmt); else

  no_fail (frame, "Not supported");
}
////////////////////

const dig_test = async (doc, frame, fmt) =>
{
  var tag = "test"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";
  url = cors_bypass + doc;

try
{
  if (doc.substr (0,4) != "http")
  {
    doc = doc.replace (/-/g, "/"); doc = doc.replace (/_/g, "+");
    doc = doc.split("."); var i, j, p, q;

    for (i = 0; i < doc.length; i++)
    {
      p = atob (doc [i]); console.log (p);
      if (p.replace (/[\x20-\x7E]/g, ""))
      {
        j = 0; q = [];
        for (; j < p.length; j++) q.push (p.charCodeAt (j));
        console.log (q);
      }
    }
  }
  else
  {
    response = await fetch (url);
    textData = await response.text();
    console.log ("(" + textData + ")");
  }

} catch (err) { console.log (err); busy = 0; }

  if (no_fail (frame)) loadwindow ("", frame, tag + ": okay");
}
////////////////////

const dig_rumble = async (doc, frame, fmt) =>
{
  var tag = "rumble"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";
  var url = cors_bypass + doc;

try
{
  response = await fetch (url);
  textData = await response.text();

  url = pullstring (textData, '"video":"', '"');

  if (url.length < 6 || url.length > 8) throw ("!!!");

} catch (err) { console.log (err); busy = 0; }

  busy = -busy; if (no_fail (frame)) req_rumble (url, frame, fmt);
}
////////////////////

const dig_infowars = async (doc, frame, fmt) =>
{
  var tag = "infowars"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";
  var url = localhost + doc; if (url.indexOf ("infowars") < 0) url = cors_bypass + doc;

try
{ 
  response = await fetch (url);
  textData = await response.text();

  var s = 'data-video-id="';
  var n = textData.indexOf (s);
  
  if (n > 0) url = textData.substr (n + s.length, 200); else
  {
    n = textData.indexOf ('<iframe src="'); if (n < 0) throw ("!!!");
    url = textData.substr (n, 200);

    n = url.indexOf ("/embed/"); if (n < 0) throw ("!!!");
    url = url.substr (n + 7);
  }

  url = url.substr (0, url.indexOf ('"'));
  if ((n = url.indexOf ("?")) > 0) url = url.substr (0, n);

} catch (err) { console.log (err); busy = 0; }

  busy = -busy; if (no_fail (frame)) req_infowars (url, frame, fmt);
}
////////////////////

const dig_brighteon = async (doc, frame, fmt) =>
{
  var tag = "brighteon"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";
  var url = cors_bypass + doc;

try
{ 
  response = await fetch (url);
  textData = await response.text();

  var s = "/embed/"; var n = textData.indexOf (s);
  if (n < 0) { s = '"videoKey":"'; n = textData.indexOf (s); }
  if (n < 0) throw ("!!!");

  url = textData.substr (n + s.length, 100);
  url = url.substr (0, url.indexOf ('"'));

} catch (err) { console.log (err); busy = 0; }

  busy = -busy; if (no_fail (frame)) req_brighteon (url, frame, fmt);
}
////////////////////

const dig_odysee = async (doc, frame, fmt) =>
{
  var s, t, u, tag = "odysee"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";
  var url = doc, src = cors_kraker ? cors_kraker + "*https://odysee.com*" : "";

try
{
  if (!doc.includes ("/stream/"))
  {
    response = await fetch (cors_bypass + url);
    textData = await response.text();

    u = pullstring (textData, '"og:url" content="', '"'); if (!u) throw ("!!!");
    u = u.split ("/"); u.splice (0,3); u = "lbry://" + u.join ("/").replace (":", "#");

    s = JSON.stringify ({ jsonrpc: "2.0", method: "get", params: { uri: u }});
    t = JSON.stringify ({ jsonrpc: "2.0", method: "resolve", params: { urls: [u] }});
    url = cors_bypass + "https://api.na-backend.odysee.com/api/v1/proxy";

    response = await fetch (url, { method: 'POST', body: s });
    jsonData = await response.json();

    if (!(s = jsonData.result) || !(s = s.streaming_url))
    {
      response = await fetch (url, { method: 'POST', body: t });
      jsonData = await response.json();

      url = jsonData.result [u].signing_channel.claim_id;
      url = "https://cloud.odysee.live/content/" + url + "/master.m3u8";
    }
    else if (!(url = s).includes ("/streams/"))
    {
      url = pullstring (url, "/stream/", ""); if (!url) throw ("!!!");
      url = "https://player.odycdn.com/api/v4/streams/free/" + url + "/x";
    }
  }

  if (url.includes (".m3u8")) t = ""; else
  {
    response = await fetch (src + url, { method: 'HEAD' });
    if (response.status != 200) throw ("!!!");
    t = response.headers.get ("content-type");
    url = response.url.substr (src.length);
  }

  if (t.match (/\b(audio\/|video\/)/) || stream_all (frame, 1)) fmt = 0; else
  {
    response = await fetch (url);
    textData = await response.text();

    url = crack_m3u8 (url, textData, frame, fmt); if (!url) throw ("!!!");
    fmt = pullstring (url, "<>", ""); url = pullstring (url, "", "<>");
  }

} catch (err) { console.log (err); busy = 0; }

  if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: id-none");
}
////////////////////

const dig_twitter = async (doc, frame, fmt) =>
{
  var tag = "twitter"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";
  var url = cors_bypass + doc;

try
{ 
  response = await fetch (url);
  textData = await response.text();

  url = pullstring (textData, '/status/', '"');
  if (!url) url = pullstring (textData, '/spaces/', '"');
  var n = url.search (/\/|\?/); if (n > 0) url = url.substr (0, n);
  if (url.length != 13 && (url.length < 17 || url.length > 19)) throw ("!!!"); 

} catch (err) { console.log (err); busy = 0; }

  busy = -busy; if (no_fail (frame)) req_twitter (url, frame, fmt);
}
////////////////////

const dig_facebook = async (doc, frame, fmt) =>
{
  var n, s, f = [0,0,0,0,0,0,0,0]; u = [0,0,0,0]

  var tag = "facebook"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";
  var url = cors_kraker + "accept=text/html|*" + doc;

try
{
  if (!cors_kraker) throw ("???");

  response = await fetch (url);
  textData = await response.text();

  if (u [0] = pullstring (textData, 'playable_url":"', '"')) f [0] = 1;
  if (u [2] = pullstring (textData, '_quality_hd":"', '"'))  f [2] = 1;
  n = getformat (f, fmt); n = argformat (n);

  if (n < 0)
  {
    if (u [0] = pullstring (textData, 'sd_src:"', '"')) f [0] = 1;
    if (u [2] = pullstring (textData, 'hd_src:"', '"')) f [2] = 1;
    n = getformat (f, fmt); n = argformat (n);
  }

  if (n >= 0)
  {
    fixformat (f, frame); fmt = pixformat (n); url = u [n];
  }
  else
  {
    url = fmt = "";
    if (s = pullstring (textData, '"video_url":"', '"')) url = s;
    if (s = pullstring (textData, '"og:video" content="', '"')) url = s;
    if (s = pullstring (textData, '"sd_src_no_ratelimit":"', '"')) url = s;
    if (s = pullstring (textData, '"contentUrl":"', '"')) url = s;
    if (s = pullstring (textData, "src&quot;:&quot;", "&quot;,&quot;")) url = s;
  }

  if (!url) throw ("!!!");
  url = url.replace (/\\u0025/g, "%"); url = url.replace (/\\u0026/g, "&");
  url = url.replace (/&amp;/g, "&"); url = url.replace (/\\\//g, "/");

} catch (err) { console.log (err); busy = 0; }

  if (fmt) fmt = " [" + fmt + "]"; else no_format (frame);
  if (no_fail (frame)) loadwindow (url, frame, tag + fmt + ": id-none");
}
////////////////////

const dig_telegram = async (doc, frame, fmt) =>
{
  var tag = "telegram"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";
  var url = pullstring (doc, "", "?"); if (!url) url = doc;
  url = cors_bypass + url + "?embed=1";

try
{
  response = await fetch (url);
  textData = await response.text();

  url = pullstring (textData, '<video', '>'); if (!url) throw ("!!!");
  url = pullstring (url, 'src="', '"'); if (!url) throw ("!!!");

} catch (err) { console.log (err); busy = 0; }

  no_format (frame); if (no_fail (frame)) loadwindow (url, frame, tag + ": id-none");
}
////////////////////

const dig_tiktok = async (doc, frame, fmt) =>
{
  var tag = "tiktok"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";
  var url = cors_kraker + "**" + doc;

try
{
  if (!localhost || !cors_kraker) throw ("???");

  response = await fetch (url, allow_cookie ("", ""));
  textData = await response.text();

  var cookie = response.headers.get ("zz-set-cookie") || "";
  cookie = "tt_chain_token=" + pullstring (cookie, "tt_chain_token=", ";");

  url = pullstring (textData, '"playAddr":"', '"'); if (!url) throw ("!!!");
  url = url.replace (/\\u0026/g, "&");
  url = url.replace (/\\u002F/g, "/");

  url = cors_kraker + "~**cookie=" + cookie + "|*" + url;

} catch (err) { console.log (err); busy = 0; }

  no_format (frame); if (no_fail (frame)) loadwindow (url, frame, tag + ": id-none");
}
////////////////////

const dig_gabtv = async (doc, frame, fmt) =>
{
  var a, b, c, i, j, k, n, q, s, t, f = [0,0,0,0,0,0,0,0];

  var tag = "gabtv"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";
  var src = "https://tv.gab.com", url = cors_bypass + doc;

try
{ 
  response = await fetch (url);
  textData = await response.text();

  url = pullstring (textData, '<video ', '<\/video>');

  if (url)
  {
    url = url.split ('<source src="');

    for (n = 1; n < url.length; n++)
    {
      s = url [n];
      if (s.includes ('size="360"')) f [0] = n;
      if (s.includes ('size="480"')) f [1] = n;
      if (s.includes ('size="540"')) f [1] = n;
      if (s.includes ('size="720"')) f [2] = n;
    }

    fmt = getformat (f, fmt); fixformat (f, frame);
    n = argformat (fmt); if (n < 0) throw ("!!!");
    url = pullstring (url [f [n]], "", '"'); if (!url) throw ("!!!");
    if (url [0] == "/") url = src + url; fmt = pixformat (n);
  }

  if (!url)
  {
    if ((i = textData.indexOf ('property="og:video"')) < 0) url = ""; else
    {
      url = textData.substr (i - 300, 298); i = url.lastIndexOf ("<meta content=");
      if (i < 0) url = ""; else url = url.substr (i + 15); fmt = 0;
    }
  }

  if (!url) throw ("!!!");

/*
  {
    a = "connect.sid="; b = "__cflb="; c = response.headers.get ("zz-set-cookie");
    c = "~cookie=" + a + pullstring (c, a, ";") + ";" + b + pullstring (c, b, ";") + "|*";
  
    s = pullstring (textData, 'data-episode-id="', '"');
    t = pullstring (textData, 'data-view-key="', '"'); if (!s || !t) throw ("!!!");
    q = pullstring (textData, 'id="tv-quality-select"', '</ul>').split ('<li id="tv-quality-');

    for (i = 1; i < q.length; i++)
    {
      j = q[i]; j = j.substr (0, j.indexOf ('p')) * 1;
      k = chkformat (j); if (k >= 0 && j > f[k]) f[k] = j;
    }

    fixformat (f, frame); fmt = getformat (f, fmt); fmt = f [argformat (fmt)];

    url = cors_kraker + c + "https://tv.gab.com/media/" + s + "?viewKey=" + t + "&r=" + fmt + "p";
  }
*/

} catch (err) { console.log (err); busy = 0; }

  if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: id-none");
}
////////////////////

const dig_prageru = async (doc, frame, fmt) =>
{
  var tag = "prageru"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";
  var url = doc;

try
{ 
  response = await fetch (cors_bypass + url);
  textData = await response.text();

  url = pullstring (textData, '"playbackId":"', '"'); if (!url) throw ("!!!");
  url = "https://stream.mux.com/" + url + ".m3u8";
 
  if (stream_all (frame, 1)) fmt = 0; else
  {
    response = await fetch (url);
    textData = await response.text();

    url = crack_m3u8 (url, textData, frame, fmt); if (!url) throw ("!!!");
    fmt = pullstring (url, "<>", ""); url = pullstring (url, "", "<>");
  }

} catch (err) { console.log (err); busy = 0; }

  if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: id-none");
}
////////////////////

/*
const dig_prageru = async (doc, frame, fmt) =>
{
  var tag = "prageru"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";
  var url = doc.split ("/");
  url = url[0] + "//" + url[2] + "/page-data/video/" + url[4] + "/page-data.json";

try
{ 
  response = await fetch (cors_kraker + url);
  jsonData = await response.json();

  url = jsonData.result.data.video.video.playbackId; if (!url) throw ("!!!");
  url = "https://stream.mux.com/" + url + ".m3u8";
 
  if (stream_all (frame, 1)) fmt = 0; else
  {
    response = await fetch (url);
    textData = await response.text();

    url = crack_m3u8 (url, textData, frame, fmt); if (!url) throw ("!!!");
    fmt = pullstring (url, "<>", ""); url = pullstring (url, "", "<>");
  }

} catch (err) { console.log (err); busy = 0; }

  if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: id-none");
}
////////////////////
*/

const dig_tedtalks = async (doc, frame, fmt) =>
{
  var tag = "tedtalks"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";
  var url = cors_bypass + doc;

try
{ 
  response = await fetch (url);
  textData = await response.text();

  url = pullstring (textData, '\\"bitrate\\":1200,\\"file\\":\\"', '\\"'); if (!url) throw ("!!!");

} catch (err) { console.log (err); busy = 0; }

  if (no_fail (frame)) loadwindow (url, frame, tag + ": id-none");
}
////////////////////

const dig_natfilmbrd = async (doc, frame, fmt) =>
{
  var tag = "natfilmbrd"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";
  var url = localhost + doc;

  var n = url.indexOf ("?");
  if (n > 0) url = url.substr (0, n);
  if (doc.substr (-1) != "/") url = url + "/";
  url = url + "embed/player/";

//https://www.nfb.ca/film/turbine/
//https://www.nfb.ca/film/turbine/embed/player/

try
{ 
  response = await fetch (url);
  textData = await response.text();

  var s = '"entry_id": "';
  var n = textData.indexOf (s); if (n < 0) throw ("!!!");
  
  url = textData.substr (n + s.length, 20);
  url = url.substr (0, url.indexOf ('"'));

  if (url.length != 10) throw ("!!!");

} catch (err) { console.log (err); busy = 0; }

  busy = -busy; if (no_fail (frame)) req_natfilmbrd (url, frame, fmt);
}
////////////////////

const dig_earthtv = async (doc, frame, fmt) =>
{
  var tag = "earthtv"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";
  var url = cors_bypass + doc;

try
{
  response = await fetch (url);
  textData = await response.text();

  url = pullstring (textData, "token: '", "'"); if (url == "") throw ("!!!");
  url = "https://livecloud2.earthtv.com/api/v1/media.getPlayerConfig?playerToken=" + url;

  response = await fetch (localhost + url);
  jsonData = await response.json();

  if (!(url = jsonData.streamUris) || !(url = url.hls)) throw ("!!!");

  stream_all (frame, 1);

} catch (err) { console.log (err); busy = 0; }

  no_format (frame); if (no_fail (frame)) loadwindow (url, frame, tag + ": id-none");
}
////////////////////

const dig_podcast = async (doc, frame, fmt) =>
{
  var tag = "podcast"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";
  var url = cors_bypass + doc;

try
{ 
  response = await fetch (url);
  textData = await response.text();

  url = pullstring (textData, '\\"assetUrl\\":\\"', '\\"');		// Apple Podcast (November 15, 2021)
  if (!url) url = pullstring (textData, '"assetUrl":"', '"');		// Apple Podcast
  if (!url) url = pullstring (textData, 'enclosureUrl":"', '"');	// Radio Public
  if (!url) url = pullstring (textData, 'episodeURL: "', '"');		// Stitcher
  if (!url) url = pullstring (textData, '<source src="', '"');		// Overcast
  if (!url) url = pullstring (textData, 'data-uri="', '"');	   	// Podbean
  if (!url) url = pullstring (textData, 'download" href="', '"');	// Spreaker
  if (!url) throw ("!!!");

  var n = url.indexOf ("?"); if (n > 0) url = url.substr (0, n);

} catch (err) { console.log (err); busy = 0; }

  no_format (frame); if (no_fail (frame)) loadwindow (url, frame, tag + ": id-none");
}
////////////////////

</script><script>

/////////////////////////////
///// NEWS & PROPAGANDA /////
/////////////////////////////

var loadnews = function (frame, mode)
{
  var url, fmt, doc, sub, src;

  if (busy) return; clear_video (frame); setup_cors (frame);

  doc = document.getElementById ("fmt" + frame);
  if (!(fmt = doc.value)) fmt = doc.children[0].value;

  if (mode == 0)
  {
    url = document.getElementById ("stk" + frame).value;
    if (!url) url = document.getElementById ("id" + frame).value.trim();
  }
  else if (mode == 1)
  {
    url = document.getElementById ("line" + frame).value.trim();
    url = url.replace (/\\u0025/g, "%"); url = url.replace (/\\u002F/g, "/"); 
    url = url.replace (/&amp;/g, "&"); url = url.replace (/\\\//g, "/");
  }
  else url = error;

  if (url [0] == "?") { open_livestream (url, frame, fmt); return; }
  if (mode == 1) { loadwindow (url, frame, ""); return; }

  src = document.getElementById ("src" + frame).value;
  if (!src) src = 0; sub = url.split (": ");

  if (sub.length > 1) url = sub [sub.length - 1]; else
  {
    sub = url.split (":"); doc = sub [0];
    if (sub.length > 1 && doc.length < 4)
    {
      src = 0; url = sub [sub.length - 1];
      if (doc == "fox") src = 1;
      if (doc == "abc") src = 2;
      if (doc == "cnb") src = 4;
      if (doc == "msn") src = 7;
      if (doc == "pbs") src = 8;
      if (doc == "cbc") src = 11;
      if (doc == "ctv") src = 12;
      if (doc == "glo") src = 13;
      if (doc == "tvo") src = 14;
      if (doc == "bbc") src = 21;
      if (doc == "alj") src = 22;
      select_site (frame, src);
    }
  }      
  if (url == "") return;

  if (src == 1  && (url = getid (url, 13))) req_fox (url, frame, fmt); else
  if (src == 2  && (url = getid (url,  8))) req_abc (url, frame, fmt); else
  if (src == 4  && (url = getid (url, 10))) req_cnbc (url, frame, fmt); else
  if (src == 7  && (url = getid (url,-13))) req_msnbc (url, frame, fmt); else
  if (src == 8  && (url = getid (url, 10))) req_pbs (url, frame, fmt); else
  if (src == 11 && (url = getid (url,-13))) req_cbc (url, frame, fmt); else
  if (src == 15 && (url = getid (url, 36))) req_cpac (url, frame, fmt); else
  if (src == 12 && (url = getid (url,  7))) req_ctv (url, frame, fmt); else
  if (src == 13 && (url = getid (url,  7))) req_global (url, frame, fmt); else
  if (src == 14 && (url = getid (url, 13))) req_tvo (url, frame, fmt); else
  if (src == 21 && (url = getid (url,  8))) req_bbc (url, frame, fmt); else
  if (src == 22 && (url = getid (url, 13))) req_aljazeera (url, frame, fmt); else
  if (src == 25 && (url = getid (url,  0))) req_bloomberg (url, frame, fmt); else
  if (src == 26 && (url = getid (url,  8))) req_deutsche (url, frame, fmt); else

  if (src == 30) load_brightcove ("", url, "", frame, fmt); else

  if (src == 0 && (url = getid (url, 11))) request (url, frame, fmt); else

  no_fail (frame, url ? "Not supported" : "Invalid ID");
}
////////////////////

const req_fox = async (id, frame, fmt) =>
{
  var tag = "fox"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
  var url, src = "https://api.foxnews.com/v3/video-player/" + id;

try
{
  response = await fetch (localhost + src);
  jsonData = await response.json();

  if (jsonData.error != undefined)
  {
    src = "https://api.foxbusiness.com/v3/video-player/" + id;
    response = await fetch (localhost + src);
    jsonData = await response.json();
    if (jsonData.error != undefined) throw ("!!!");
  }

  url = jsonData.channel.item["media-group"]["media-content"][0]["@attributes"].url;

  if (!url) throw ("!!!"); else if (stream_all (frame, 1)) fmt = 0; else
  {
    response = await fetch (url);
    textData = await response.text();

    url = crack_m3u8 (url, textData, frame, fmt); if (!url) throw ("!!!");
    fmt = pullstring (url, "<>", ""); url = pullstring (url, "", "<>");
  }

  var n = url.indexOf ("?");
  if (n > 0 && url.includes ("/tokenvod.")) url = url.substr (0, n);

} catch (err) { console.log (err); busy = 0; }

  error = id; if (!fmt) no_format (frame);
  if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: " + id);
}
////////////////////

const req_abc = async (id, frame, fmt) =>
{
  var tag = "abc"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
  var url = "https://abcnews.go.com/video/itemfeed?id=" + id;

try
{ 
  response = await fetch (cors_bypass + url);
  jsonData = await response.json();

  url = jsonData.channel.item["media-group"]["media-content"][2]["@attributes"].url; 

} catch (err) { console.log (err); busy = 0; }

  error = id; no_format (frame); if (no_fail (frame)) loadwindow (url, frame, tag + ": " + id);
}
////////////////////

const req_cnbc = async (id, frame, fmt) =>
{
  var tag = "cnbc"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
  var url = "https://player.cnbc.com/p/gZWlPC/cnbc_global?playertype=synd&byGuid=" + id;

try
{ 
  response = await fetch (cors_bypass + url);
  textData = await response.text();

  if (!(url = pullstring (textData, '"playbackURL":"', '"'))) throw ("!!!");
  if (url.substr (0,2) == "//") url = "https:" + url;

  if (stream_all (frame, 1)) fmt = 0; else
  {
    response = await fetch (url);
    textData = await response.text();

    url = crack_m3u8 (url, textData, frame, fmt); if (!url) throw ("!!!");
    fmt = pullstring (url, "<>", ""); url = pullstring (url, "", "<>");
  }

} catch (err) { console.log (err); busy = 0; }

  error = id; if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: " + id);
}
////////////////////

const req_msnbc = async (id, frame, fmt) =>
{
  var tag = "msnbc"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
//var url = "https://www.msnbc.com/msnbc/embedded-video/mmvo" + id;
//var url = "https://www.nbcnews.com/news/embedded-video/mmvo" + id;
  var url = "https://www.nbcnews.com/msnbc/embedded-video/mmvo" + id;

try
{ 
  response = await fetch (cors_bypass + url);
  textData = await response.text();

  var s = '},"videoType":'; var n = textData.indexOf (s);
  if (n < 0) { s = '"videoAssets":'; n = textData.lastIndexOf (s); }
  if (n < 0) throw ("!!!");

  url = textData.substr (n, 2000);
  var sub = url.split ('"publicUrl":"'); if (sub.length < 2) throw ("!!!");

  url = sub [sub.length - 1]; url = url.substr (0, url.indexOf ('"'));
  n = url.indexOf ("?"); if (n > 0) url = url.substr (0, n); if (!url) throw ("!!!");
  url += "?formats=M3U";

  if (stream_all (frame, 1)) fmt = 0; else
  {
    response = await fetch (url);
    textData = await response.text();

    url = crack_m3u8 (url, textData, frame, fmt); if (!url) throw ("!!!");
    fmt = pullstring (url, "<>", ""); url = pullstring (url, "", "<>");
  }

} catch (err) { console.log (err); busy = 0; }

  error = id; if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: " + id);
}
////////////////////

const req_pbs = async (id, frame, fmt) =>
{
  var tag = "pbs"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
  var url = "https://player.pbs.org/portalplayer/" + id + "/";

try
{ 
  response = await fetch (cors_bypass + url);
  textData = await response.text();

  var s = '"encodings": ["';
  var n = textData.indexOf (s); if (n < 0) throw ("!!!");

  url = textData.substr (n + s.length, 200);
  url = url.substr (0, url.indexOf ('"'));

  url = url + "?format=jsonp&callback=__jp1";

  response = await fetch (cors_bypass + url);
  textData = await response.text();

  s = '"url": "'; n = textData.indexOf (s); if (n < 0) throw ("!!!");

  url = textData.substr (n + s.length);
  url = url.substr (0, url.indexOf ('"'));

  if (url.indexOf ("m3u8") < 0 || stream_all (frame, 1)) fmt = 0; else
  {
    response = await fetch (url);
    textData = await response.text();

    url = crack_m3u8 (url, textData, frame, fmt); if (!url) throw ("!!!");
    fmt = pullstring (url, "<>", ""); url = pullstring (url, "", "<>");
  }

} catch (err) { console.log (err); busy = 0; }

  error = id; if (!fmt) no_format (frame);
  if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: " + id);
}
////////////////////

const req_cbc = async (id, frame, fmt) =>
{
  var tag = "cbc"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
  var url = "https://link.theplatform.com/s/ExhSPC/media/guid/2655402169/" + id + "/meta.smil?format=smil";

try
{ 
  response = await fetch (localhost + url);
  textData = await response.text();

  url = crack_smil (textData, frame, fmt); if (!url) throw ("!!!");
  fmt = pullstring (url, "<>", "") * 1; url = pullstring (url, "", "<>");

  if (url.includes (".m3u8")) if (stream_all (frame, 1)) fmt = 0; else
  {
    response = await fetch (url);
    textData = await response.text();

    url = crack_m3u8 (url, textData, frame, fmt); if (!url) throw ("!!!");
    fmt = pullstring (url, "<>", ""); url = pullstring (url, "", "<>");
  }

} catch (err) { console.log (err); busy = 0; }

  error = id; if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: " + id);
}
////////////////////

const req_cpac = async (id, frame, fmt) =>
{
  var tag = "cpac"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
  var url = localhost + "https://www.cpac.ca/api/1/services/contentModel.json?url=%2Fsite%2Fwebsite%2Fepisode%2Findex.xml&crafterSite=cpacca&id=" + id;

try
{ 
  response = await fetch (url);
  jsonData = await response.json();

  if (!(url = jsonData.page.details.videoUrl)) throw ("!!!");

  if (stream_all (frame, 1)) fmt = 0; else
  {
    response = await fetch (url);
    textData = await response.text();

    url = crack_m3u8 (url, textData, frame, fmt); if (!url) throw ("!!!");
    fmt = pullstring (url, "<>", ""); url = pullstring (url, "", "<>");
  }

} catch (err) { console.log (err); busy = 0; }

  error = id; if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: " + id);
}
////////////////////

const req_ctv = async (id, frame, fmt) =>
{
  var tag = "ctv"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
  var url = "https://capi.9c9media.com/destinations/ctvnews_web/platforms/desktop/contents/" + id;

try
{ 
  response = await fetch (localhost + url + "?%24include=%5BContentPackages%5D");
  jsonData = await response.json();

  url = url + "/contentpackages/" + jsonData.ContentPackages[0] + "/manifest.m3u8";

  if (stream_all (frame, 1)) fmt = 0; else
  {
    response = await fetch (url);
    textData = await response.text();

    url = crack_m3u8 (url, textData, frame, fmt); if (!url) throw ("!!!");
    fmt = pullstring (url, "<>", ""); url = pullstring (url, "", "<>");
  }

} catch (err) { console.log (err); busy = 0; }

  error = id; if (!fmt) no_format (frame);
  if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: "  + id);
}
////////////////////

const req_global = async (id, frame, fmt) =>
{
  var tag = "global"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
  var url = "https://globalnews.ca/video/embed/" + id;

try
{ 
  response = await fetch (cors_bypass + url);
  textData = await response.text();

  var s = 'sources":[{"file":"';
  var n = textData.indexOf (s); if (n < 0) throw ("!!!");

  url = textData.substr (n + s.length, 200);
  url = url.substr (0, url.indexOf ('"'));
  url = url.replace (/\\/g, "");

} catch (err) { console.log (err); busy = 0; }

  error = id; no_format (frame); if (no_fail (frame)) loadwindow (url, frame, tag + ": "  + id);
}
////////////////////

const req_tvo = async (id, frame, fmt) =>
{
  load_brightcove ("18140038001", id, "tvo", frame, fmt);
}
////////////////////

const req_bbc = async (id, frame, fmt) =>
{
  var tag = "bbc"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
  url = "https://open.live.bbc.co.uk/mediaselector/6/select/version/2.0/mediaset/pc/vpid/" + id + "/format/xml/atk/";

try
{ 
  response = await fetch (cors_bypass + url);
  textData = await response.text();

  var s, n = 0, sub = textData.split ("<connection");

  for (var i = 1; i < sub.length; i++)
  {
    s = sub [i]; if (!s.includes ("href=")) continue;
    if (s.includes (".m3u8?")) { n = 1; url = s; break; }
    if (s.includes (".mpd?")) if (!n) { n = 2; url = s; }
    if (s.includes (".mp4?")) { n = 3; url = s; }
  }

  if (!n) throw ("!!!"); url = pullstring (url, 'href="', '"');

  if (n == 3 || stream_all (frame, n) || n == 2) fmt = 0; else
  {
    response = await fetch (url);
    textData = await response.text();

    url = crack_m3u8 (url, textData, frame, fmt); if (!url) throw ("!!!");
    fmt = pullstring (url, "<>", ""); url = pullstring (url, "", "<>");
  }

} catch (err) { console.log (err); busy = 0; }

  error = id; if (!fmt) no_format (frame);
  if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: "  + id);
}
////////////////////

const req_aljazeera = async (id, frame, fmt) =>
{
  var tag = "aljazeera", pub = "665003303001", x = id.split ("-");
  if (x.length > 1) { id = x [1]; if (pub != x [0]) { pub = x [0]; tag = ""; }}
  load_brightcove (pub, id, tag, frame, fmt);
}
////////////////////

const req_bloomberg = async (id, frame, fmt) =>
{
  var f = [0,0,0,0,0,0,0,0], u = [], n;
  var url, tag = "bloom"; if (is_busy (frame)) return;

  if (!(url = getid (id, 36)) && !(url = getid (id, 22)))
  {
    busy = 0; no_fail (frame, "Invalid ID"); return;
  }
  document.getElementById ("id" + frame).value = tag + " (ID)";
  id = url; url = "https://www.bloomberg.com/multimedia/api/embed?id=" + id;

try
{
  response = await fetch (cors_bypass + url);
  jsonData = await response.json();
  var sub = jsonData.downloadURLs;

  if ((url = sub["600"])  != undefined) { f[0] = 360; u[0] = url; }
  if ((url = sub["700"])  != undefined) { f[0] = 360; u[0] = url; }
  if ((url = sub["800"])  != undefined) { f[1] = 540; u[1] = url; }
  if ((url = sub["1200"]) != undefined) { f[2] = 720; u[2] = url; }

  if ((n = getformat (f, fmt)))
  {
    fixformat (f, frame); n = argformat (n); fmt = f[n]; url = u[n];
  }
  else
  {
    url = jsonData.streams[0].url; if (!url) throw ("!!!");

    if (stream_all (frame, 1)) fmt = 0; else
    {
      response = await fetch (url);
      textData = await response.text();

      url = crack_m3u8 (url, textData, frame, fmt); if (!url) throw ("!!!");
      fmt = pullstring (url, "<>", ""); url = pullstring (url, "", "<>");
    }
  }

} catch (err) { console.log (err); busy = 0; }

  error = id; if (!fmt) no_format (frame);
  if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: " + id);
}
////////////////////

const req_deutsche = async (id, frame, fmt) =>
{
  var i, j, f = [0,0,0,0,0,0,0,0];

  var tag = "deutsche"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
  url = localhost + "https://www.dw.com/playersources/";

try
{
  response = await fetch (url + "v-" + id);
  textData = await response.text();
 
  if (textData[0] != "[")
  {
    response = await fetch (url + "a-" + id);
    textData = await response.text();

    fmt = 0; if (textData[0] != "[") throw ("!!!");
    url = textData.substr (textData.indexOf ("http"));
    url = url.substr (0, url.indexOf ('"')); if (!url) throw ("!!!");
  }
  else
  {
    var sub = JSON.parse (textData); if (sub.length < 1) throw ("!!!");

    for (i = 0; i < sub.length; i++)
      if ((url = sub[i].label) && (j = chkformat (url)) >= 0) f[j] = i + 1;

    fmt = getformat (f, fmt); fixformat (f, frame);
    if ((j = argformat (fmt)) < 0 || (j = f[j] - 1) < 0) throw ("!!!");
    fmt = sub[j].label; url = sub[j].file;
  }

} catch (err) { console.log (err); busy = 0; }

  error = id; if (!fmt) no_format (frame);
  if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: " + id);
}
////////////////////

///////////////////
///// DIG DUG /////
///////////////////

var dignews = function (frame)
{
  var doc, src, fmt;

  if (busy) return; clear_video (frame); setup_cors (frame);

  doc = document.getElementById ("fmt" + frame);
  if (!(fmt = doc.value)) fmt = doc.children[0].value;

  src = document.getElementById ("src" + frame).value;
  doc = document.getElementById ("line" + frame).value.trim();

  if (src == 1 ) dig_fox (doc, frame, fmt); else
  if (src == 2 ) dig_abc (doc, frame, fmt); else
  if (src == 3 ) dig_cbs (doc, frame, fmt); else
  if (src == 4 ) dig_cnbc (doc, frame, fmt); else
  if (src == 5 ) dig_cnn (doc, frame, fmt); else
  if (src == 6 ) dig_cspan (doc, frame, fmt); else
  if (src == 7 ) dig_msnbc (doc, frame, fmt); else
  if (src == 8 ) dig_pbs (doc, frame, fmt); else
  if (src == 11) dig_cbc (doc, frame, fmt); else
  if (src == 12) dig_ctv (doc, frame, fmt); else
  if (src == 13) dig_global (doc, frame, fmt); else
  if (src == 14) dig_tvo (doc, frame, fmt); else
  if (src == 21) dig_bbc (doc, frame, fmt); else
  if (src == 24) dig_presstv (doc, frame, fmt); else
  if (src == 22) dig_aljazeera (doc, frame, fmt); else
  if (src == 25) dig_bloomberg (doc, frame, fmt); else
  if (src == 27) dig_epochtimes (doc, frame, fmt); else

  if (src == 30) find_brightcove (doc, "", frame, fmt); else

  no_fail (frame, "Not supported");
}
////////////////////

const dig_fox = async (doc, frame, fmt) =>
{
  var tag = "fox"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";
  var url = cors_bypass + doc;

try
{ 
  response = await fetch (url);
  textData = await response.text();

  var s = 'data-video-id="'; var n = textData.indexOf (s);
  if (n < 0) { s = "video_id="; n = textData.indexOf (s); }

  if (n > 0) url = textData.substr (n + s.length, 13); else
  {
    s = 'data-url="'; n = textData.indexOf (s);
    if (n > 0)
    {
      url = textData.substr (n + s.length, 200);
      url = url.substr (url.indexOf ("/v/") + 3, 13);
    }
    else
    {
      s = "redirect.mp3"; n = textData.indexOf (s); if (n < 0) throw ("!!!");
      url = textData.substr (n + s.length + 2, 200);
      url = url.substr (0, url.indexOf ('"')); if (url == "") throw ("!!!");
      url = "https://" + url.replace (/\\/g, "");
      busy = -busy;
    }
  }
  busy = -busy;

} catch (err) { console.log (err); busy = 0; }

  if (busy > 0)
  {
    no_fail (frame); loadwindow (url, frame, tag + ": id-none");
  }
  else if (no_fail (frame)) req_fox (url, frame, fmt);
}
////////////////////

const dig_abc = async (doc, frame, fmt) =>
{
  var tag = "abc"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";
  var url = cors_bypass + doc;

try
{ 
  response = await fetch (url);
  textData = await response.text();

  url = pullstring (textData, 'data-video="', '"');
  if (!url) url = pullstring (textData, '"videoId":"', '"');
  if (!url) url = pullstring (textData, '/video/itemfeed?id=', '"');
  if (!url) url = pullstring (textData, 'playlist":[{"id":"', '"');
  if (url.length != 8) throw ("!!!");

} catch (err) { console.log (err); busy = 0; }

  busy = -busy; if (no_fail (frame)) req_abc (url, frame, fmt);
}
////////////////////

const dig_cbs = async (doc, frame, fmt) =>
{
  var tag = "cbs"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";
  var url = cors_bypass + doc;

try
{ 
  response = await fetch (url);
  textData = await response.text();

  var s = '"embedUrl":"'; var n = textData.indexOf (s);

  if (n > 0)
  {
    url = textData.substr (n + s.length, 300);
    url = url.substr (0, url.indexOf ('"')); url = url.replace (/\\/g, "");

    if (url != doc)
    {
      if (url.indexOf ("/live/") > 0) throw ("!!!");
      response = await fetch (cors_bypass + url);
      textData = await response.text();
    }
  }

  n = textData.indexOf ("defaultPayload");
  if (n > 0) textData = textData.substr (n);

  s = '"video":"';
  n = textData.indexOf (s); if (n < 0) throw ("!!!");

  url = textData.substr (n + s.length, 300);
  url = url.substr (0, url.indexOf ('"'));
  
  if (url.indexOf ("m3u8") < 0 || stream_all (frame, 1)) fmt = 0; else
  {
    response = await fetch (url);
    textData = await response.text();

    url = crack_m3u8 (url, textData, frame, fmt); if (!url) throw ("!!!");
    fmt = pullstring (url, "<>", ""); url = pullstring (url, "", "<>");
  }

} catch (err) { console.log (err); busy = 0; }

  if (!fmt) no_format (frame);
  if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: id-none");
}
////////////////////

const dig_cnbc = async (doc, frame, fmt) =>
{
  var tag = "cnbc"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";
  var url = cors_bypass + doc;

try
{ 
  response = await fetch (url);
  textData = await response.text();

  url = pullstring (textData, "'content_id' : '", "'");
  if (!url) url = pullstring (textData, 'data-vilynx-id="', '"');

  if (url.length != 10) throw ("!!!");

} catch (err) { console.log (err); busy = 0; }

  busy = -busy; if (no_fail (frame)) req_cnbc (url, frame, fmt);
}
////////////////////

const dig_cnn = async (doc, frame, fmt) =>
{
  var n, m, s, f = [0,0,0,0,0,0,0,0];

  var tag = "cnn"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";
  var url = localhost + doc;

try
{ 
  response = await fetch (url);
  textData = await response.text();

  s = 'data-video-id="'; n = textData.indexOf (s);
  if (n < 0) { s = 'videoid="'; n = textData.indexOf (s); }
  if (n < 0) { s = 'videoId":"'; n = textData.indexOf (s); }
  if (n < 0) throw ("!!!");

  url = textData.substr (n + s.length, 300);
  url = url.substr (0, url.indexOf ('"'));

  url = "https://www.cnn.com/video/data/3.0/video/" + url + "/index.xml";

  response = await fetch (localhost + url);
  textData = await response.text();

  var sub = textData.split ("<file bitrate=");
  var p = ["640x360_900k", "896x504_1850k", "1280x720_3500k", "hls_1080p"];

  for (n = 1; n < sub.length; n++)
     for (m = 0, url = pullstring (sub[n], '"', '"'); m < 4; m++)
        if (url == p[m]) if (m == 3 || sub[n].indexOf (p[m] + ".mp4") > 0) f[m] = n;

  if ((n = argformat (getformat (f, fmt))) < 0) throw ("!!!");
  if (!(url = pullstring (sub [f[n]], '>', '<'))) throw ("!!!");
  if (url[0] == "/") url = "https://ht.cdn.turner.com/cnn/big" + url;

  if (n == 3) if (stream_all (frame, 1)) fmt = 0; else
  {
    response = await fetch (url);
    textData = await response.text();

    url = crack_m3u8 (url, textData, frame, fmt); if (!url) throw ("!!!");
    fmt = pullstring (url, "<>", ""); url = pullstring (url, "", "<>");
  }
  else
  {
    fixformat (f, frame); fmt = pixformat (n); if (n == 1) fmt = 504;
  }

} catch (err) { console.log (err); busy = 0; }

  if (!fmt) no_format (frame);
  if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: id-none");
}
////////////////////

const dig_cspan = async (doc, frame, fmt) =>
{
  var tag = "cspan"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";
  var url = cors_kraker + doc;

try
{
  if (!localhost || !cors_kraker) throw ("???");

  response = await fetch (url);
  textData = await response.text();

  if (url = pullstring (textData, 'data-altbcid="', '"'))
  {
    busy = -busy; url += "~*,,*?hdnts=" + pullstring (textData, 'data-akamaitoken="', '"');
  }
  else
  {
    if (!(url = pullstring (textData, "[{file: '", "'"))) throw ("!!!");

    if (stream_all (frame, 1)) fmt = 0; else
    {
      response = await fetch (cors_kraker + "~" + url);
      textData = await response.text();

      url = crack_m3u8 (url, textData, frame, fmt); if (!url) throw ("!!!");
      fmt = pullstring (url, "<>", ""); url = pullstring (url, "", "<>");
    }
    url = cors_kraker + "~*,,*" + url;
  }

} catch (err) { console.log (err); busy = 0; }

  if (busy < 0)
  {
    no_fail (frame); load_brightcove ("3617315736001", url, "cspan", frame, -fmt); return;
  }

  if (!fmt) no_format (frame);
  if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: id-none");
}
////////////////////

const dig_msnbc = async (doc, frame, fmt) =>
{
  var s, tag = "msnbc"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";
  var url = cors_bypass + doc;

try
{ 
  response = await fetch (url);
  textData = await response.text();

  if (!(url = pullstring (textData, 'video":{"id":"mmvo', '"')))
  {
    s = pullstring (textData, '"embedURL":"', '"');
    if (!s) s = pullstring (textData, '"embedUrl":"', '"');
    url = pullstring (url, "/mmvo", "");
  }

  if (url)
  {
    if (url.length < 11 || url.length > 13) throw ("!!!");
    busy = 0; req_msnbc (url, frame, fmt); return;
  }

  s = pullstring (s, "/config/", '?'); if (!s) throw ("!!!");
  url = pullstring (textData, '"MPX":{', '}'); if (!url) throw ("!!!");

  var a = pullstring (url, '"pid":"', '"');
  var b = pullstring (url, '"playerName":"', '"');

  url = "https://player.theplatform.com/p/" + a + "/" + b + "/" + s;

  response = await fetch (cors_bypass + url);
  textData = await response.text();

  url = pullstring (textData, ':releaseUrl="', '?'); if (!url) throw ("!!!");
  url += "?switch=HLSServiceSecure&formats=M3U,MPEG4";

  if (stream_all (frame, 1)) fmt = 0; else
  {
    response = await fetch (url);
    textData = await response.text();

    url = crack_m3u8 (response.url, textData, frame, fmt); if (!url) throw ("!!!");
    fmt = pullstring (url, "<>", ""); url = pullstring (url, "", "<>");
  }

} catch (err) { console.log (err); busy = 0; }

  if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: id-none");
}
////////////////////

const dig_pbs = async (doc, frame, fmt) =>
{
  var tag = "pbs"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";
  var url = cors_bypass + doc;

try
{ 
  response = await fetch (url);
  textData = await response.text();

  if (url = pullstring (textData, '<iframe src="https://player', '"'))
  {
    url = pullstring (url, "player/", ""); if (!url) throw ("!!!");
    var s = pullstring (url, "", "/"); if (s) url = s;
  }
  else
  {
    url = pullstring (textData, "'VideoTPMediaId': '", "'");
    if (!url) url = pullstring (textData, 'data-coveid="', '"');
    if (!url) url = pullstring (textData, 'data-coveId="', '"');
    if (!url) url = pullstring (textData, '"tp_media_id":"', '"');
    if (!url) throw ("!!!");
  }

  if (url.length != 10) throw ("!!!");

} catch (err) { console.log (err); busy = 0; }

  busy = -busy; if (no_fail (frame)) req_pbs (url, frame, fmt);
}
////////////////////

const dig_cbc = async (doc, frame, fmt) =>
{
  var n, s, t, u, tag = "cbc"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";
  var url = cors_bypass + doc;

try
{
/*
  if (doc == "stations")
  {
    response = await fetch (localhost + "cbc.json");
    jsonData = await response.json();

    s = ""; t = jsonData.props.pageProps.data.freeTv.items;

    for (n = 0; n < t.length; n++) s += t[n].idMedia + " " + t[n].title + "\n";

    console.log (s); throw ("???");
  }
*/

  if (doc.includes ("/gem.cbc.ca/"))
  {
    n = doc.indexOf ("?"); if (n > 0) doc = doc.substr (0, n);
    doc = doc.split ("/"); if (doc [3] == "media") doc.splice (3,1);
    if (!(u = doc [3]) || !doc [4]) throw ("!!!");
    t = '"key":"' + doc [4] + '","idMedia":'
  }

  if (u && u != "live" && u != "live-event")
  {
    if (!doc [4].match (/\bs\d{2}e\d+\b/)) throw("!!!");
    url = "https://services.radio-canada.ca/ott/catalog/v2/gem/show/" + doc [3] + "?device=web"

    response = await fetch (localhost + url);
    jsonData = await response.json();

    if (!(s = jsonData.content[0].lineups)) throw ("!!!");

    u = doc [3] + "/" + doc [4].substr (0, 3);
    for (t = "", n = 0; n < s.length; n++) if (u == s [n].url) t = s [n].items;
    u = doc [3] + "/" + doc [4]; if (!t || !t.length) throw ("!!!");

    for (s = "", n = 0; n < t.length; n++) if (u == t [n].url) s = t [n].idMedia;
    if (!s) throw ("!!!");

    url = "https://services.radio-canada.ca/media/validation/v2/?idMedia=" + s +
      "&appCode=gem&output=json&tech=hls&manifestType=desktop";

    response = await fetch (localhost + url);
    jsonData = await response.json();

    if (!(url = jsonData.url)) throw ("!!!"); else if (stream_all (frame, 1)) fmt = 0; else
    {
      response = await fetch (url);
      textData = await response.text();

      url = crack_m3u8 (response.url, textData, frame, fmt); if (!url) throw ("!!!");
      fmt = pullstring (url, "<>", ""); url = pullstring (url, "", "<>");
    }

    no_fail (frame); loadwindow (url, frame, tag + ": id-none"); return;
  }

  response = await fetch (url);
  textData = await response.text();

  if (u) url = pullstring (textData, t, ','); else
  {
    s = pullstring (textData, "'clipId': '", "'");
    if (!s) s = pullstring (textData, '"clipID":"', '"');

    if (!s && (s = pullstring (url, "/clip/", "-")))
      if (s = pullstring (textData, '"clipID":' + s + ',', '"clipType"'))
        if (!(s = pullstring (s, '"src":"', '"')).includes (".mp3")) s = ""; else
         { no_fail (frame); loadwindow (s, frame, tag + ": id-none"); return; }

    if (!s)
    {
      url = pullstring (textData, '"guid":"', '"');
      if (!url) url = pullstring (textData, "'mediaId': '", "'");
      if (!url) throw ("!!!");
    
      url = "https://www.cbc.ca/bistro/order?clipId=" + url;
      response = await fetch (cors_bypass + url);
      jsonData = await response.json();
      url = jsonData.items[0].id;
    }
  }

  if (url.length < 10 || url.length > 13) throw ("!!!");

} catch (err) { console.log (err); busy = 0; }

  busy = -busy; if (no_fail (frame)) req_cbc (url, frame, fmt);
}
////////////////////

const dig_ctv = async (doc, frame, fmt) =>
{
  var tag = "ctv"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";
  var url = cors_bypass + doc;

try
{ 
  response = await fetch (url);
  textData = await response.text();

  url = pullstring (textData, "); initPlayer(", ")");
  // these appear to be obsolete
  if (!url) url = pullstring (textData, 'data-video-id="', '"');
  if (!url) url = pullstring (textData, "contentId: ", ",");
  if (!url) url = pullstring (textData, "currentId=", "&");

  if (!url && (url = pullstring (textData, 'getAuthStates("', '"')))
    if (!(url = url.split (",")).length) url = ""; else url = url [url.length - 1];

  if (!url && (url = pullstring (textData, '"axisId":', 'title')))
  {
    if (!cors_kraker) throw ("???");
    var s = pullstring (url, '"heroBrand":"', '"'), t = pullstring (url, "", ",");
    s = s.replace (/hub\b/, "_hub");

    url = "https://capi.9c9media.com/destinations/" + s + "/platforms/desktop/contents/" + t;

    response = await fetch (localhost + url + "?%24include=%5BContentPackages%5D");
    jsonData = await response.json();

    url += "/contentpackages/" + jsonData.ContentPackages[0].Id + "/manifest.mpd";
    url += "##" + cors_kraker + "~https://license.9c9media.ca/widevine";

    stream_all (frame, 2); no_fail (frame);
    loadwindow (url, frame, tag + ": id-none"); return;
  }

  if (url.length != 7) throw ("!!!");

} catch (err) { console.log (err); busy = 0; }

  busy = -busy; if (no_fail (frame)) req_ctv (url, frame, fmt);
}
////////////////////

const dig_global = async (doc, frame, fmt) =>
{
  var n, s, t, u, tag = "global"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";
  var url = cors_bypass + doc;

try
{ 
  if (doc.includes ("watch.globaltv.com"))
  {
    s = pullstring (doc, "/movie/", "");
    if (!s) s = pullstring (doc, "/video/", "");
    if (!s) s = pullstring (doc, "/episode/", "");

    n = s.indexOf ("?"); if (n > 0) s = s.substr (0, n); if (!s) throw ("!!!");
    n = s.indexOf ("/"); if (n > 0) s = s.substr (0, n);

    t = { path: '/authorization/authorizeresource', data: { duid: '1f152a54-ac6c-43ae-8a01-e2f0a86acfa7' }};
    t.data.resource_id = s; s = JSON.stringify (t);

    t = { 'content-type': 'application/json' };
    u = cors_bypass + "https://global.corusappservices.com/";

    url = u + "authorization/untrusted/sign";
    response = await fetch (url, { method: 'POST', headers: t, body: s });
    textData = await response.text();

    s = pullstring (textData, '"data":', '}') + "}";

    url = u + "authorization/authorizeresource";
    response = await fetch (url, { method: 'POST', headers: t, body: s });
    textData = await response.text();

    s = pullstring (textData, 'data":"', '"').split(".")[1];
    s = pullstring (atob (s), '"data":', '}') + ',"platform":"web_widevine"}';

    url = u + "media/getstream";
    response = await fetch (url, { method: 'POST', headers: t, body: s });
    textData = await response.text();

    s = pullstring (textData, 'data":"', '"').split(".")[1];
    url = pullstring (atob (s), '"streaming_url":"', '"'); if (!url) throw ("!!!");

    stream_all (frame, 2); no_fail (frame);
    loadwindow (url, frame, tag + ": id-none"); return;
  }

  response = await fetch (url);
  textData = await response.text();

  s = 'data-displayinline="'; n = textData.indexOf (s);

  if (n < 0)
  {
    s = 'data-miniplayer-video="'; n = textData.indexOf (s);
    if (n < 0) { s = '<iframe src="'; n = textData.indexOf (s); }
    if (n < 0) throw ("!!!");
  }
  url = textData.substr (n, 100);

  s = "/playlist/"; n = url.indexOf (s);
  if (n < 0) { s = "/embed/"; n = url.indexOf (s); }
  if (n < 0) throw ("!!!");

  url = url.substr (n + s.length, 7);

} catch (err) { console.log (err); busy = 0; }

  busy = -busy; if (no_fail (frame)) req_global (url, frame, fmt);
}
////////////////////

const dig_tvo = async (doc, frame, fmt) =>
{
  find_brightcove (doc, "tvo", frame, fmt);
}
////////////////////

const dig_bbc = async (doc, frame, fmt) =>
{
  var tag = "bbc"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";
  var url = cors_bypass + doc;

try
{ 
  response = await fetch (url);
  textData = await response.text();

  url = pullstring (textData, 'embed\\/', '\\');
  if (!url) url = pullstring (textData, '[{"id":"', '"');
  if (!url) url = pullstring (textData, '[{\\"id\\":\\"', '\\"');
  if (!url) url = pullstring (textData, 'versionID&quot;:&quot;', '&');
  if (!url) url = pullstring (textData, 'data-vpid="', '"');
  if (!url) url = pullstring (textData, 'data-id="', '"');
  if (!url) url = pullstring (textData, '"vpid":"', '"');
  if (!url) url = pullstring (textData, '/vpid/', '.');

  if (!url) if (!(url = pullstring (textData, '"videoPid":"', '"'))) throw ("!!!"); else
  {
    var n = textData.indexOf ('"pid":"' + url + '"'); if (n < 0) throw ("!!!");
    n = textData.indexOf ('"versionPid":"', n); if (n < 0) throw ("!!!");
    url = textData.substr (n + 14, 20); url = url.substr (0, url.indexOf ('"'));
  }

  if (url.length != 8) throw ("!!!");

} catch (err) { console.log (err); busy = 0; }

  busy = -busy; if (no_fail (frame)) req_bbc (url, frame, fmt);
}
////////////////////

const dig_presstv = async (doc, frame, fmt) =>
{
  var tag = "presstv"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";
  var url = cors_bypass + doc;

try
{ 
  response = await fetch (url);
  textData = await response.text();

  url = pullstring (textData, '<source src="', '"');
  if (!url) url = pullstring (textData, '<source src=', ' ');

  if (url)
  {
    if (url[0] == "/") url = "https:" + url;
  }
  else
  {
    var n = textData.indexOf ("og:video:url'"); if (n < 0) throw ("!!!");
    url = textData.substr (n, 200); url = url.substr (url.indexOf ("http"));
    url = url.substr (0, url.indexOf ("'")); if (url == "") throw ("!!!");
  }

  url = url.replace ("\.presstv\.com", ".presstv.ir");

  if (!url.includes (".m3u8") || stream_all (frame, 1)) fmt = 0; else
  {
    response = await fetch (url);
    textData = await response.text();

    url = crack_m3u8 (url, textData, frame, fmt); if (!url) throw ("!!!");
    fmt = pullstring (url, "<>", ""); url = pullstring (url, "", "<>");
  }

} catch (err) { console.log (err); busy = 0; }

  if (!fmt) no_format (frame);
  if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: id-none");
}
////////////////////

const dig_aljazeera = async (doc, frame, fmt) =>
{
  var tag = "aljazeera"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";
  var url = cors_bypass + doc;

try
{ 
  response = await fetch (url);
  textData = await response.text();

  url = pullstring (textData, "RenderPagesVideo('", "'");
  if (!url) url = pullstring (textData, "RenderGeneralBCVideo(", ",");
  if (!url) url = pullstring (textData, 'data-video-id="', '"');

  if (!url && (url = pullstring (textData, '"embedUrl": "', '"')))
    url = pullstring (url, "brightcove.net/", "/") + "-" + pullstring (url, "?videoId=", "");

  if (url.length != 13 && url.length != 26) throw ("!!!");

} catch (err) { console.log (err); busy = 0; }

  busy = -busy; if (no_fail (frame)) req_aljazeera (url, frame, fmt);
}
////////////////////

const dig_bloomberg = async (doc, frame, fmt) =>
{
  var tag = "bloom"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";
  var url = cors_bypass + doc;

try
{ 
  response = await fetch (url);
  textData = await response.text();

  var s = 'data-url="'; var n = textData.indexOf (s);

  if (n > 0)
  {
    url = textData.substr (n + s.length, 500);
    url = url.substr (0, url.indexOf ('"'));
    
    response = await fetch (cors_bypass + url);
    textData = await response.text();
  }

  s = '"resourceId":"'; n = textData.indexOf (s); if (n < 0) throw ("!!!");

  url = textData.substr (n + s.length, 50);
  url = url.substr (0, url.indexOf ('"'));
  if (url.length != 22 && url.length != 36) throw ("!!!");

} catch (err) { console.log (err); busy = 0; }

  busy = -busy; if (no_fail (frame)) req_bloomberg (url, frame, fmt);
}
////////////////////

const dig_epochtimes = async (doc, frame, fmt) =>
{
  var tag = "epochtimes"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";
  var url = cors_bypass + doc;

try
{ 
  response = await fetch (url);
  textData = await response.text();

  url = pullstring (textData, 'data-id="', '"'); if (!url) throw ("!!!");
  url = "https://vs1.youmaker.com/assets/" + url + "/playlist.m3u8";

  if (stream_all (frame, 1)) fmt = 0; else
  {
    response = await fetch (url);
    textData = await response.text();

    url = crack_m3u8 (url, textData, frame, fmt); if (!url) throw ("!!!");
    fmt = pullstring (url, "<>", ""); url = pullstring (url, "", "<>");
  }

} catch (err) { console.log (err); busy = 0; }

  if (!fmt) no_format (frame);
  if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: id-none");
}
////////////////////

</script><script>

////////////////////////////
///// FREE MOVIES & TV /////
////////////////////////////

var loadmovie = function (frame, mode)
{
  var url, fmt, doc, sub, src;

  if (busy) return; clear_video (frame); setup_cors (frame);

  doc = document.getElementById ("fmt" + frame);
  if (!(fmt = doc.value)) fmt = doc.children[0].value;

  if (mode == 0)
  {
    url = document.getElementById ("stk" + frame).value;
    if (!url) url = document.getElementById ("id" + frame).value.trim();
  }
  else if (mode == 1)
  {
    url = document.getElementById ("line" + frame).value.trim();
    url = url.replace (/\\u0025/g, "%"); url = url.replace (/\\u002F/g, "/"); 
    url = url.replace (/&amp;/g, "&"); url = url.replace (/\\\//g, "/");
  }
  else url = error;

  if (url [0] == "?") { open_livestream (url, frame, fmt); return; }
  if (mode == 1) { loadwindow (url, frame, ""); return; }

  src = document.getElementById ("src" + frame).value;
  if (!src) src = 0; sub = url.split (": ");

  if (sub.length > 1) url = sub [sub.length - 1]; else
  {
    sub = url.split (":"); doc = sub [0];
    if (sub.length > 1 && doc.length < 4)
    {
      src = 0; url = sub [sub.length - 1];
      select_site (frame, src);
    }
  }      
  if (url == "") return;

  if (src == 1  && (url = getid (url, -7))) req_tubitv (url, frame, fmt); else
  if (src == 4  && (url = getid (url, -6))) req_thearchive (url, frame, fmt); else
  if (src == 2  && (url = getid (url, -8))) req_vidnode (url, frame, fmt); else
  if (src == 5  && (url = getid (url, -8))) req_vidnode (url, frame, -fmt); else
  if (src == 10 && (url = getid (url, -6))) req_emovies (url, frame, fmt); else
  if (src == 12 && (url = getid (url,  6))) req_goojara (url, frame, fmt); else
  if (src == 8  && (url = getid (url, -8))) req_xhamster (url, frame, fmt); else
  if (src == 26 && (url = getid (url, 15))) req_eplayvid (url, frame, fmt); else
  if (src == 21 && (url = getid (url, 12))) req_doodstream (url, frame, fmt); else
  if (src == 29 && (url = getid (url,  0))) req_mixdrop (url, frame, fmt); else
  if (src == 31 && (url = getid (url, 12))) req_pkspeed (url, frame, fmt); else
  if (src == 20 && (url = getid (url,-15))) req_streamtape (url, frame, fmt); else
  if (src == 27 && (url = getid (url, 12))) req_upstream (url, frame, fmt); else
  if (src == 28 && (url = getid (url, 12))) req_vidoza (url, frame, fmt); else
  if (src == 23 && (url = getid (url, 12))) req_voe (url, frame, fmt); else
  if (src == 30 && (url = getid (url,  8))) req_wootly (url, frame, fmt); else
  if (src == 41 && (url = getid (url, -6))) req_audiorealm (url, frame, fmt); else

  if (src == 0  && (url = getid (url, 11))) request (url, frame, fmt); else

  no_fail (frame, url ? "Not supported" : "Invalid ID");
}
////////////////////

const req_tubitv = async (id, frame, fmt) =>
{
  var tag = "tubitv"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
  var url = "https://tubitv.com/oz/videos/" + id + "/content";

try
{ 
  response = await fetch (cors_bypass + url);
  jsonData = await response.json();
 
  if (!(url = jsonData.url))
  {
    url = "https://tubitv.com/movies/" + id;

    response = await fetch (cors_bypass + url);
    textData = await response.text();

    s = pullstring (textData, '"video_resources":', '}]'); if (!s) throw ("!!!");
    s = JSON.parse ('{"x":' + s + '}]}'); s = s.x;

    for (n = 0; n < s.length; n++) if (s [n].type.includes ("widevine"))
    {
      if (s [n].license_server.hdcp_version != "hdcp_disabled") continue;
      t = s [n].license_server.url; u = s [n].manifest.url; break;
    }
    if (!u) throw ("!!!"); url = u + (t ? "##" + t : "");
  }

  if (stream_all (frame, 1)) fmt = 0; else
  {
    response = await fetch (url);
    textData = await response.text();

    url = crack_m3u8 (url, textData, frame, fmt); if (!url) throw ("!!!");
    fmt = pullstring (url, "<>", ""); url = pullstring (url, "", "<>");
  }

} catch (err) { console.log (err); busy = 0; }

  error = id; if (!fmt) no_format (frame);
  if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: " + id);
}
////////////////////

const req_thearchive = async (id, frame, fmt) =>
{
  var tag = "thearchive"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
  var url = localhost + "https://api-ott.thearchive.tv/search";

try
{ 
  var s = { 'content-type':'application/x-www-form-urlencoded' };

  response = await fetch (url, { method: 'POST', headers: s, body: "id=" + id } );
  jsonData = await response.json();

  url = jsonData.objects[0].video_url; if (!url) throw ("!!!");

  if (stream_all (frame, 1)) fmt = 0; else
  {
    response = await fetch (url);
    textData = await response.text();

    url = crack_m3u8 (url, textData, frame, fmt); if (!url) throw ("!!!");
    fmt = pullstring (url, "<>", ""); url = pullstring (url, "", "<>");
  }

} catch (err) { console.log (err); busy = 0; }

  error = id; if (!fmt) no_format (frame);
  if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: " + id);
}
////////////////////

const req_vidnode = async (id, frame, fmt) =>
{
  var n, s, t, e, f = [0,0,0,0,0,0,0,0], anime;
  if (fmt < 0) { fmt = -fmt; anime = true; }

  var tag = anime ? "gotaku" : "vidnode"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";

  var src = anime ? "https://gotaku1.com" : "https://membed1.com";
  var url = src + "/loadserver.php?id=" + id;

try
{
  if (!localhost || !cors_kraker || !got_crypto()) throw ("???");

  response = await fetch (cors_kraker + url);
  textData = await response.text();

  var sub = pullstring (textData, "dood", "Doodstream"); sub = pullstring (sub, '/e/', '"');
  if ((n = sub.indexOf ("?")) > 0) sub = sub.substr (0, n);

  if (sub) try  // cribbed from req_doodstream
  {
    url = "!mock:1A|*https://dood.pm";
    response = await fetch (cors_kraker + url + "/d/" + sub);
    t = await response.text(); await new Promise (x => setTimeout (x, 500));
    t = pullstring (t, '/download/', '"'); if (!t) throw ("");
    response = await fetch (cors_kraker + url + "/download/" + t);
    t = await response.text(); url = pullstring (t, "window.open('", "'");
  }
  catch (e) { sub = ""; }

  if (!sub || !url) sub = "Not available"; else
  {
    sub = "<a href='" + url + "'>" + sub + "</a>";
    url = localhost + "~**!content-disposition=|*" + url;
    sub += " - <a href='" + url + "'>playable link</a>";
  }

  download_doc = head + "DoodStream download link: " + sub; sub = "";
  var iv = CryptoJS.enc.Utf8.parse (anime ? "3134003223491201" : "9225679083961858");
  var ss = CryptoJS.enc.Utf8.parse (anime ? "37911490979715163134003223491201" : "25742532592138496744665879883281");

  if (s = pullstring (textData, "/iframe", "/iframe"))  // VidNode
    if (s = pullstring (s, 'src="', '"')) try
    {
      response = await fetch (cors_kraker + s);
      textData = await response.text();
    
      s = "(p,a,c,k,e,d)"; t = pullstring (textData, s, ")))"); if (!t) throw ("");
      eval ("s=function" + s + t + "))"); s = pullstring (s, '{file:"', '"');
      n = 3; url = cors_kraker + "~" + s;
    }
    catch (e) { s = ""; }

  if (!s)
  {
    if (!(s = pullstring (textData, 'data-value="', '"'))) s = "&c=aaaaaaaa&refer=none"; else
    {
      e = CryptoJS.AES.decrypt (s, ss, {iv: iv});
      s = CryptoJS.enc.Utf8.stringify (e);
    }

    e = CryptoJS.AES.encrypt (id, ss, {iv: iv}); s = s.substr (s.indexOf ("&"));
    if (anime) ss = CryptoJS.enc.Utf8.parse ("54674138327930866480207815084989");

    url = src + "/encrypt-ajax.php?id=" + e.toString() + s + "&alias=" + id;
    response = await fetch (cors_kraker + "accept=application/json|x-requested-with=XMLHttpRequest|*" + url);
    jsonData = await response.json();

    if (s = jsonData.data)
    {
      e = CryptoJS.AES.decrypt (s, ss, {iv: iv});
      e = JSON.parse (e.toString (CryptoJS.enc.Utf8)); console.log(e);

      if (!(s = e.source) || !s.length) if (s = e.linkiframe)
      {
        if ((n = s.indexOf ("?")) > 0) s = s.substr (0, n);
        if (s.substr (-1) == "/") s = s.substr (0, s.length - 1);
        url = pullstring (s, "", "/e/"); s = pullstring (s, "/e/", "");
        if (!url.includes ("/sbnet.") && !url.includes ("/sbani.")) s = "";
      }
    }

    if (!s) throw ("!!!"); else if (typeof (s) == "string")
    {
      s = "012345678901||" + s + "||987654321098||streamsb";
      url += "/375664356a494546326c4b797c7c6e756577776778623171737/";
      sub = "*,,*user-agent=|accept=|accept-language=|";

      for (n = 0; n < s.length; n++) url += parseInt (s.charCodeAt (n)).toString (16);

      response = await fetch (cors_kraker + sub + "watchsb=sbstream|*" + url);
      jsonData = await response.json();

      n = 3; if (!(url = jsonData.stream_data.file)) throw ("!!!");
    }
    else
    {
      for (n = 0; n < s.length; n++)
      {
        url = s [n].label; if (!url) continue;
        if (url == "360 P") f [0] = n + 1;
        if (url == "480 P") f [1] = n + 1;
        if (url == "720 P") f [2] = n + 1;
        if (url == "hls P" || url == "auto P") f [3] = n + 1;
      }

      n = getformat (f, fmt); n = argformat (n);
      if (n < 0) throw ("!!!"); url = s [f [n] - 1].file;
    }
  }

  if (n != 3)  // mp4 may not be available anymore
  {
    fixformat (f, frame); fmt = pixformat (n);
    url = localhost + "~*" + src + "*" + url;
  }
  else if (stream_all (frame, 1)) fmt = 0; else
  {
    if (sub) url = cors_kraker + "~" + sub + "*" + url;

    response = await fetch (url);
    textData = await response.text();

    url = crack_m3u8 (url, textData, frame, fmt); if (!url) throw ("!!!");
    fmt = pullstring (url, "<>", "") * 1; url = pullstring (url, "", "<>");
  }

} catch (err) { console.log (err); busy = 0; }

  error = id; if (!fmt) no_format (frame);
  if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: " + id);
}
////////////////////

const req_emovies = async (id, frame, fmt) =>
{
  var tag = "emovies"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
  var url = "https://emovies.si/ajax/v4_get_sources?s=oserver&id=" + id;

try
{
  if (!localhost || !cors_kraker) throw ("???");

  response = await fetch (cors_kraker + url);
  jsonData = await response.json();

  if (!(url = jsonData.value)) throw ("!!!");

  response = await fetch (cors_kraker + "*https://emovies.si/*" + url);
  textData = await response.text();

  if (!(url = pullstring (textData, '"file":"', '"'))) throw ("!!!");
  url = url.replace (/\\/g, "");

  if (stream_all (frame, 1)) fmt = 0; else
  {
    response = await fetch (url);
    textData = await response.text();

    url = crack_m3u8 (url, textData, frame, fmt); if (!url) throw ("!!!");
    fmt = pullstring (url, "<>", ""); url = pullstring (url, "", "<>");
  }

} catch (err) { console.log (err); busy = 0; }

  error = id; if (!fmt) no_format (frame);
  if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: " + id);
}
////////////////////

const req_goojara = async (id, frame, fmt) =>
{
  var c, s, t, u, tag = "goojara"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
  var url = "https://ww1.goojara.to/" + id;

try
{
  if (!localhost || !cors_kraker) throw ("???");

  response = await fetch (cors_kraker + url, allow_cookie ("", ""));
  textData = await response.text();

  url = pullstring (textData, 'Direct Links:', 'wootly');
  url = pullstring (url, 'href="', '"'); if (!url) throw ("!!!");

  s = pullstring (textData, "<script\>", "</script\>"); if (!s) throw ("!!!");
  s = "var cookie='';" + s.replace (/document[^=^\)]*/g, "cookie") + "s=cookie";

  eval (s); c = response.headers.get ("zz-set-cookie") || "";
  c = pullstring (c, "", ";") + ";" + pullstring (s, "", ";");

  response = await fetch (cors_kraker + url, allow_cookie ("", c));
  textData = await response.text();

  url = response.headers.get ("zz-location");
  response = await fetch (cors_kraker + url, allow_cookie ("", ""));
  textData = await response.text();

  url = pullstring (textData, '<iframe src="', '"'); if (!url) throw ("!!!");
  c = response.headers.get ("zz-set-cookie") || ""; c = pullstring (c, "", ";");
  s = { 'content-type': 'application/x-www-form-urlencoded', accept: "**" + c };

  response = await fetch (cors_kraker + url, { method: 'POST', headers: s, body: 'qdf=1' });
  textData = await response.text();

  c = response.headers.get ("zz-set-cookie") || ""; c = pullstring (c, "", ";");
  t = pullstring (textData, 'tk="', '"'); u = pullstring (textData, 'vd="', '"');

  url = pullstring (url, "", "//") + "//" + pullstring (url, "//", "/");
  url += "/grabd?t=" + t + "&id=" + u; if (!t || !u) throw ("!!!");

  response = await fetch (cors_kraker + url, allow_cookie ("", c));
  textData = await response.text();

  url = textData; if (url.substr (0,4) != "http") throw ("!!!");

} catch (err) { console.log (err); busy = 0; }

  error = id; if (no_fail (frame)) loadwindow (url, frame, tag + ": " + id);
}
////////////////////

const req_xhamster = async (id, frame, fmt) =>
{
  var i, j, k, f = [0,0,0,0,0,0,0,0], r = [0,0,0,0,0,0,0,0];

  var tag = "xhamster"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
  var url = "https://xhamster.com/embed/" + id;

if (!document.getElementById ("mov" + frame + "b").checked) fmt = 0; else try
{
  if (!localhost || !cors_kraker) throw ("???");

  response = await fetch (cors_kraker + "**" + url);
  textData = await response.text();

  var s = '"standard":';
  var n = textData.indexOf (s); if (n < 0) throw ("!!!");
  var sub = textData.substr (n + s.length);
  sub = sub.substr (0, sub.indexOf ("}]}") + 3);
  sub = JSON.parse (sub); sub = sub.h264;

  for (i = 0; i < sub.length; i++)
  {
    k = sub[i].quality; k = k.substr (0, k.indexOf ("p"));
    if ((j = chkformat (k)) >= 0) if (r[j] < k) { f[j] = i + 1; r[j] = k; }
  }

  fmt = getformat (f, fmt); fixformat (f, frame);
  if ((j = argformat (fmt)) < 0 || (n = f[j] - 1) < 0) throw ("!!!");

  fmt = r[j]; url = sub[n].url;
  if (url.indexOf (".xhcdn.") < 0) url = sub[n].fallback;
  if (url.indexOf (".xhcdn.") < 0) throw ("!!!");
  url = cors_kraker + "~**" + url;

} catch (err) { console.log (err); busy = 0; }

  error = id; if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: " + id);
}
////////////////////

const req_eplayvid = async (id, frame, fmt) =>
{
  var tag = "eplayvid"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
  var url = "https://eplayvid.net/watch/" + id;

if (!document.getElementById ("mov" + frame + "b").checked) fmt = 0; else try
{
  if (!localhost || !cors_kraker) throw ("!!!");

  response = await fetch (cors_kraker + url);
  textData = await response.text();

  url = pullstring (textData, '<source src="', '"'); if (!url) throw ("!!!");
  url = cors_kraker + "~**" + url;

} catch (err) { console.log (err); busy = 0; }

  error = id; if (no_fail (frame)) loadwindow (url, frame, tag + ": " + id);
}
////////////////////

const req_doodstream = async (id, frame, fmt) =>
{
  var tag = "doodstream"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
  var src = "https://dood.pm", url = src + "/d/" + id;

try
{
  if (!localhost || !cors_kraker) throw ("???");

  response = await fetch (cors_kraker + "!mock:1A|*" + url);
  textData = await response.text();

  await new Promise (x => setTimeout (x, 500));

  var s = pullstring (textData, '/download/', '"'); if (!s) throw ("!!!");
  url = src + "/download/" + s;

  response = await fetch (cors_kraker + "!mock:1A|*" + url);
  textData = await response.text();

  url = pullstring (textData, "window.open('", "'"); if (!url) throw ("!!!");
  url = cors_kraker + "~**" + url;

} catch (err) { console.log (err); busy = 0; }

  error = id; if (no_fail (frame)) loadwindow (url, frame, tag + ": " + id);
}
////////////////////

const req_mixdrop = async (id, frame, fmt) =>
{
  var n, tag = "mixdrop"; if (is_busy (frame)) return;

  if (id [0] == "*") id = id.substr (1); else
  {
    if ((n = id.lastIndexOf ("/")) >= 0) id = id.substr (n + 1);
    if (id.length < 5)
    {
      busy = 0; no_fail (frame, "Invalid ID"); return;
    }
  }
  document.getElementById ("id" + frame).value = tag + " (ID)";
  var url = "https://mixdrop.co/e/" + id;

if (!document.getElementById ("mov" + frame + "b").checked) fmt = 0; else try
{
  if (!localhost || !cors_kraker) throw ("!!!");

  response = await fetch (cors_kraker + url);
  textData = await response.text();

  n = textData.indexOf ("p,a,c,k,e,d"); if (n < 0) throw ("!!!");

  var sub = textData.substr (n - 9, 1000);
  sub = sub.substr (0, sub.indexOf ("script") - 4); if (!sub) throw ("!!!");
  eval ("sub=" + sub); url = sub.substr (sub.indexOf ("wurl=") + 6);
  url = url.substr (0, url.indexOf ('"')); if (!url) throw ("!!!");
  url = cors_kraker + "~https:" + url;

} catch (err) { console.log (err); busy = 0; }

  error = id; no_format (frame);
  if (no_fail (frame)) loadwindow (url, frame, tag + ": " + id);
}
////////////////////

const req_pkspeed = async (id, frame, fmt) =>
{
  var n, s, t, f = [0,0,0,0,0,0,0,0];

  var tag = "pkspeed"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
  var src = "https://pkspeed.net", url = src + "/embed-" + id + ".html";

if (!document.getElementById ("mov" + frame + "b").checked) fmt = 0; else try
{
  if (!localhost || !cors_kraker) throw ("???");

  response = await fetch (cors_kraker + url);
  textData = await response.text();

  s = "(p,a,c,k,e,d)"; t = pullstring (textData, s, ")))"); if (!t) throw ("!!!");
  eval ("url=function" + s + t + "))"); s = pullstring (url, "sources:[", "]").split ("{");

  for (n = 1; n < s.length; n++)
  {
    t = pullstring (s [n], 'label:"', '"');
    if (t == "360p") f [0] = n;
    if (t == "480p") f [1] = n;
    if (t == "720p") f [2] = n;
  }

  fmt = getformat (f, fmt); fixformat (f, frame);
  n = argformat (fmt); fmt = pixformat (n); n = f [n] - 1;
  url = pullstring (s [n], '"', '"'); if (!url) throw ("!!!");
  url = cors_kraker + "~" + url;

} catch (err) { console.log (err); busy = 0; }

  error = id; if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: " + id);
}
////////////////////

const req_streamtape = async (id, frame, fmt) =>
{
  var tag = "streamtape"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
  var url = "https://streamtape.com/e/" + id;

if (!document.getElementById ("mov" + frame + "b").checked) busy = 0; else try
{
  response = await fetch (cors_bypass + url);
  textData = await response.text();

  url = pullstring (textData, "substring(1).substring(2)", "<\/script>"); if (!url) throw ("!!!");
  url = pullstring (url, "&expires=", "')"); if (!url) throw ("!!!");
  url = "https://streamtape.com/get_video?id=" + id + "&expires=" + url;

} catch (err) { console.log (err); busy = 0; }

  error = id; no_format (frame);
  if (no_fail (frame)) loadwindow (url, frame, tag + ": " + id);
}
////////////////////

const req_upstream = async (id, frame, fmt) =>
{
  var tag = "upstream"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
  var src = "https://upstream.to", url = src + "/embed-" + id + ".html";

if (!document.getElementById ("mov" + frame + "b").checked) fmt = 0; else try
{
  if (!localhost || !cors_kraker) throw ("???");

  response = await fetch (cors_kraker + url);
  textData = await response.text();

  var n = textData.indexOf ("p,a,c,k,e,d"); if (n < 0) throw ("!!!");

  var sub = textData.substr (n - 9, 4000);
  sub = sub.substr (0, sub.indexOf ("script") - 4);
  eval ("sub=" + sub); url = pullstring (sub, 'file:"', '"');

  if (!url) throw ("!!!"); if (url[0] == "/") url = "http:" + url;

  if (!url.includes (".m3u8") || stream_all (frame, 1)) fmt = 0; else
  {
    response = await fetch (url);
    textData = await response.text();

    url = crack_m3u8 (url, textData, frame, fmt); if (!url) throw ("!!!");
    fmt = pullstring (url, "<>", ""); url = pullstring (url, "", "<>");
  }

  //url = cors_kraker + "~*" + src + "/,,*" + url;

} catch (err) { console.log (err); busy = 0; }

  error = id; fmt = fmt ? fmt = " [" + fmt + "]" : "";
  if (no_fail (frame)) loadwindow (url, frame, tag + fmt + ": " + id);
}
////////////////////

const req_vidoza = async (id, frame, fmt) =>
{
  var tag = "vidoza"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
  var url = "https://vidoza.net/embed-" + id + ".html";

if (!document.getElementById ("mov" + frame + "b").checked) fmt = 0; else try
{
  response = await fetch (cors_bypass + url);
  textData = await response.text();

  var s = '<source src="';
  var n = textData.indexOf (s); if (n < 0) throw ("!!!");

  url = textData.substr (n + s.length, 200);
  url = url.substr (0, url.indexOf ('"')); if (!url) throw ("!!!");

} catch (err) { console.log (err); busy = 0; }

  error = id; no_format (frame);
  if (no_fail (frame)) loadwindow (url, frame, tag + ": " + id);
}
////////////////////

const req_voe = async (id, frame, fmt) =>
{
  var tag = "voe"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
  var url = "https://voe.sx/e/" + id;

if (!document.getElementById ("mov" + frame + "b").checked) fmt = 0; else try
{
  response = await fetch (cors_bypass + url);
  textData = await response.text();

  url = pullstring (textData, "'hls': '", "'");
  if (!url) url = pullstring (textData, '"hls": "', '"');
  if (!url.includes (".m3u8")) throw ("!!!");

  if (stream_all (frame, 1)) fmt = 0; else
  {
    response = await fetch (url);
    textData = await response.text();

    url = crack_m3u8 (url, textData, frame, fmt); if (!url) throw ("!!!");
    fmt = pullstring (url, "<>", ""); url = pullstring (url, "", "<>");
  }

} catch (err) { console.log (err); busy = 0; }

  error = id; no_format (frame);
  if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: " + id);
}
////////////////////

const req_wootly = async (id, frame, fmt) =>
{
  var c, s, t, u, tag = "wootly"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
  var url = "https://www.wootly.ch/?v=" + id;

try
{
  if (!localhost || !cors_kraker) throw ("???");

  response = await fetch (cors_kraker + url);
  textData = await response.text();

  url = pullstring (textData, '<iframe src="', '"'); if (!url) throw ("!!!");
  s = { 'content-type': 'application/x-www-form-urlencoded', accept: "**" };

  response = await fetch (cors_kraker + url, { method: 'POST', headers: s, body: 'qdf=1' });
  textData = await response.text();

  c = response.headers.get ("zz-set-cookie") || ""; c = pullstring (c, "", ";");
  t = pullstring (textData, 'tk="', '"'); u = pullstring (textData, 'vd="', '"');

  url = pullstring (url, "", "//") + "//" + pullstring (url, "//", "/");
  url += "/grabd?t=" + t + "&id=" + u; if (!t || !u) throw ("!!!");

  response = await fetch (cors_kraker + url, allow_cookie ("", c));
  textData = await response.text();

  url = textData; if (url.substr (0,4) != "http") throw ("!!!");

} catch (err) { console.log (err); busy = 0; }

  error = id; if (no_fail (frame)) loadwindow (url, frame, tag + ": " + id);
}
////////////////////

const req_audiorealm = async (id, frame, fmt) =>
{
  var tag = "audiorealm"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (ID)";
  var url = "http://audiorealm.com/station/listen/id/" + id;

try
{ 
  response = await fetch (cors_bypass + url);
  textData = await response.text();

  var s = "'listenurl'>";
  var n = textData.indexOf (s); if (n < 0) throw ("!!!");

  url = textData.substr (n + s.length, 100);
  url = url.substr (0, url.indexOf ("<")); if (!url) throw ("!!!");

} catch (err) { console.log (err); busy = 0; }

  error = id; no_format (frame);
  if (no_fail (frame)) loadwindow (url, frame, tag + ": " + id);
}
////////////////////

///////////////////
///// DIG DUG /////
///////////////////

var digmovie = function (frame)
{
  var doc, src, fmt;

  if (busy) return; clear_video (frame); setup_cors (frame);

  doc = document.getElementById ("fmt" + frame);
  if (!(fmt = doc.value)) fmt = doc.children[0].value;

  src = document.getElementById ("src" + frame).value;
  doc = document.getElementById ("line" + frame).value.trim();

  if (src == 1 ) dig_tubitv (doc, frame, fmt); else
  if (src == 4 ) dig_thearchive (doc, frame, fmt); else
  if (src == 3 ) dig_darkmatter (doc, frame, fmt); else
  if (src == 2 ) dig_vidnode (doc, frame, fmt); else
  if (src == 5 ) dig_vidnode (doc, frame, -fmt); else
  if (src == 10) dig_emovies (doc, frame, fmt); else
  if (src == 11) dig_goku (doc, frame, fmt); else
  if (src == 14) dig_noxx (doc, frame, fmt); else
  if (src == 15) dig_pressplay (doc, frame, fmt); else
  if (src == 13) dig_gdrive (doc, frame, fmt); else
  if (src == 9 ) dig_xvideos (doc, frame, fmt); else
  if (src == 41) dig_audiorealm (doc, frame, fmt); else
  if (src == 42) dig_radionet (doc, frame, fmt); else

  no_fail (frame, "Not supported");
}
////////////////////

const dig_tubitv = async (doc, frame, fmt) =>
{
  var tag = "tubitv"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";

try
{
  var url = doc; var n = url.indexOf (":");
  if (n > 0) url = url.substr (n + 3);
  url = url.split ("/"); url = url [url.length - 2];
  if (url.length < 5 || url.length > 7) throw ("!!!");

} catch (err) { console.log (err); busy = 0; }

  busy = -busy; if (no_fail (frame)) req_tubitv (url, frame, fmt);
}
////////////////////

const dig_thearchive = async (doc, frame, fmt) =>
{
  var tag = "thearchive"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";
  var url = localhost + doc;

try
{ 
  response = await fetch (url);
  textData = await response.text();

  url = pullstring (textData, 'data-ottera-id="', '"');

  if (url.length < 4 || url.length > 6) throw ("!!!");

} catch (err) { console.log (err); busy = 0; }

  busy = -busy; if (no_fail (frame)) req_thearchive (url, frame, fmt);
}
////////////////////

const dig_darkmatter = async (doc, frame, fmt) =>
{
  var tag = "darkmatter"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";
  var url = cors_bypass + doc;

try
{ 
  response = await fetch (url);
  textData = await response.text();

  url = pullstring (textData, 'class="elementor-button-wrapper"', '>Watch Now<');
  url = pullstring (url, 'href="', '"'); url = url.substr (0, url.lastIndexOf ("/"));
  if (!url) throw ("!!!");

  response = await fetch (us_geo_bypass + url);
  textData = await response.text();

  url = pullstring (textData, '"sources":[{"uri":"', '"'); if (!url) throw ("!!!");

  if (stream_all (frame, 1)) fmt = 0; else
  {
    response = await fetch (url);
    textData = await response.text();

    url = crack_m3u8 (url, textData, frame, fmt); if (!url) throw ("!!!");
    fmt = pullstring (url, "<>", ""); url = pullstring (url, "", "<>");
  }

} catch (err) { console.log (err); busy = 0; }

  if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: id-none");
}
////////////////////

const dig_vidnode = async (doc, frame, fmt) =>
{
  var tag = "vidnode"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";
  var url = cors_bypass + doc;

try
{ 
  response = await fetch (url);
  textData = await response.text();

  var s = pullstring (textData, '<iframe src="', '"'); url = pullstring (s, "?id=", "");

  if ((n = url.indexOf ("=")) > 0) url = url.substr (0, n);
  if ((n = url.indexOf ("&")) > 0) url = url.substr (0, n);

  if (url.length < 4 || url.length > 8) throw ("!!!");

} catch (err) { console.log (err); busy = 0; }

  busy = -busy; if (no_fail (frame)) req_vidnode (url, frame, fmt);
}
////////////////////

const dig_emovies = async (doc, frame, fmt) =>
{
  var tag = "emovies"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";
  var url = cors_bypass + doc, n = url.indexOf ("?episode_id=");
  var p, q = "/watching.html";

try
{
  if (n > 0) url = url.substr (n + 12); else
  {
    response = await fetch (url);
    textData = await response.text();

    if ((p = response.url) != url)
    {
      if (!p.includes (q)) if (p.includes (".html"))
        p = p.replace (".html", q); else p += q;

      response = await fetch (p);
      textData = await response.text();
    }

    if (!(url = pullstring (textData, "episode_id: ", ","))) throw ("!!!");
  }

  if (url.length < 4 || url.length > 6) throw ("!!!");

} catch (err) { console.log (err); busy = 0; }

  busy = -busy; if (no_fail (frame)) req_emovies (url, frame, fmt);
}
////////////////////

const dig_goku = async (doc, frame, fmt) =>
{
  var tag = "goku"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";
  var n, s, t, w, url = doc.replace ("/movie/", "/watch-movie/");
  var src = "https://goku.sx/ajax/movie/episode/";
  var bypass = cors_kraker + "**!mock:1A|*";

try
{
  if (!cors_kraker || !crypto) throw ("???");

  response = await fetch (bypass + url, allow_cookie (tag, ""));
  textData = await response.text();

  if (s = response.headers.get ("zz-location")) url = s;
  url = url.substr (url.lastIndexOf ("/") + 1); if (url.length != 7) throw ("!!!");

  s = pullstring (response.headers.get ("zz-set-cookie") || "", "", ";");

  response = await fetch (bypass + src + "servers/" + url, allow_cookie (tag, s));
  textData = await response.text();

  url = textData.substr (textData.indexOf (">UpCloud<") - 100, 100);
  url = pullstring (url, 'data-id="', '"'); if (url.length != 7) throw ("!!!");

  response = await fetch (bypass + src + "server/sources/" + url, allow_cookie (tag, s));
  jsonData = await response.json();

  url = jsonData.data.link; if (!url) throw ("!!!");
  n = url.indexOf ("?"); if (n > 0) url = url.substr (0, n);
  url = url.replace ("https:", "http:");

  response = await fetch (url);
  textData = await response.text();

  src = url.split ("/").slice (0,3).join ("/");
  n = url.lastIndexOf ("/"); s = url.substr (n + 1);
  url = pullstring (textData, 'src="/js/', '"'); if (!url) throw ("!!!");

  response = await fetch (src + "/js/" + url);
  textData = await response.text();

  n = textData.indexOf ("return JSON"); if (n < 0) throw ("!!!");
  t = textData.substr (n).replace ("return JSON", "\n\nvar xxx=JSON");
  t = t.replace (";", ";\ncrap (xxx[0].file); return [];\n\n") + "\n";

  w = "<script>(function(){" +
    "var w = new WebSocket('" + src.replace ("http", "ws") + "/sock" + "');" +
    " crap = function(x){w.send ('?@alleycat:@' + x);}})();<\/script>\n";

  await fetch ("/~@scratch", { method: 'PUT', body: textData.substr (0, n) + t });

  t = '<!DOCTYPE html><html><body style="display:none">\n' +
    '<div class="vidcloud-player-embed"><div id="vidcloud-player" data-id="' + s + '">\n' +
    '<div class="loading-relative"><div class="loading"></div></div></div></div>\n' + w +
    '<script>const settings = {"time":0,"autoPlay":"0"};<\/script>' +
    '<script src="/file"><\/script></body></html>';

  await fetch ("/~wanna_scratch=html", { method: 'POST', body: t });

  t = document.getElementById ("mov" + frame); t.src = src + "/html";
  url = await cat_worker(); t.src = ""; if (url.indexOf ("http")) throw ("!!!");

  if (stream_all (frame, 1)) fmt = 0; else
  {
    response = await fetch (url);
    textData = await response.text();

    url = crack_m3u8 (url, textData, frame, fmt); if (!url) throw ("!!!");
    fmt = pullstring (url, "<>", ""); url = pullstring (url, "", "<>");
  }

} catch (err) { console.log (err); busy = 0; }

  if (no_fail (frame)) loadwindow (url, frame, tag + ": id-none");
}
////////////////////

const dig_noxx = async (doc, frame, fmt) =>
{
  var tag = "noxx"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";
  var url = cors_kraker + doc;

try
{
  if (!localhost || !cors_kraker) throw ("???");

  response = await fetch (url, allow_cookie (tag, ""));
  textData = await response.text();

  if (response.status == 403)
  {
    url = pullstring (response.url.substr (cors_kraker.length), "//", "/");
    cookiecutter (tag + "=" + url); no_fail (frame); return;
  }

  url = pullstring (textData, '<button value="', '"'); if (!url) throw ("!!!");

  response = await fetch (cors_kraker + "!mock:1A|*" + url);
  textData = await response.text();

  var s = pullstring (textData, "/pass_md5/", "'"); if (!s) throw ("!!!");
  url = "https://" + pullstring (url, "//", "/") + "/pass_md5/" + s;

  response = await fetch (cors_kraker + "**!mock:1A|*" + url);
  textData = await response.text();

  url = url.substr (url.lastIndexOf ("/") + 1);
  if (textData.substr (0, 4) != "http") throw ("!!!");
  url = cors_kraker + "~**" + textData + "?token=" + url

} catch (err) { console.log (err); busy = 0; }

  if (no_fail (frame)) loadwindow (url, frame, tag + ": id-none");
}
////////////////////

const dig_pressplay = async (doc, frame, fmt) =>
{
  var tag = "pressplay"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";
  var url = cors_kraker + doc, src = "https://api.9animetv.live";

try
{
  if (!localhost || localhost != cors_kraker) throw ("???");

  response = await fetch (url);
  textData = await response.text();

  var n = url.indexOf ("?"), u = "*!*user-agent=abc|*";
  var m = n < 0 ? "" : "-" + url.substr (n + 1);

  url = pullstring (textData, 'data-cinemaplayer-query-api-tmdb_id="', '"');
  if (!url) throw ("!!!"); url = src + (m ? "/tv/" : "/movie/") + url + m;

  response = await fetch (cors_kraker + "**" + url);
  textData = await response.text();

  url = pullstring (textData, '"vidframe" src="', '"'); if (!url) throw ("!!!");

  response = await fetch (cors_kraker + u + url);
  textData = await response.text();

  url = pullstring (textData, "MasterJS = '", "'"); if (!url) throw ("!!!");

  var p = '11x&W5UBrcqn$9Yl'; m = JSON.parse (atob (url)); n = m.iterations;
  var ss = CryptoJS.enc.Hex.parse (m.salt), iv = CryptoJS.enc.Hex.parse (m.iv);

  p = CryptoJS.PBKDF2 (p, ss, { hasher: CryptoJS.algo.SHA512, keySize: 8, iterations: n });
  m = CryptoJS.AES.decrypt (m.ciphertext, p, { mode: CryptoJS.mode.CBC, iv: iv });

  url = pullstring (m.toString (CryptoJS.enc.Utf8), '"file":"', '"'); if (!url) throw ("!!!");

  if (stream_all (frame, 1)) fmt = 0; else
  {
    response = await fetch (cors_kraker + "~" + u + url);
    textData = await response.text();

    url = crack_m3u8 (url, textData, frame, fmt); if (!url) throw ("!!!");
    fmt = pullstring (url, "<>", ""); url = pullstring (url, "", "<>");
  }

  url = cors_kraker + "~" + u + url;

} catch (err) { console.log (err); busy = 0; }

  if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: id-none");
}
////////////////////

const dig_gdrive = async (doc, frame, fmt) =>
{
  var s, t, u, tag = "gdriveplayer"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";
  var url = cors_kraker + doc;

try
{
  if (!cors_kraker || !got_crypto) throw ("???");

  response = await fetch (url);
  textData = await response.text();

  s = pullstring (textData, "eval(", "{}))"); if (s) eval ("url=" + s + "{})");
  s = pullstring (url, "data='{", "}"); if (!s) throw ("!!!");

  t = JSON.parse ("{" + s + "}");
  s = "alsfheafsjklNIWORNiolNIOWNKLNXakjsfwnBdwjbwfkjbJjkopfjweopjASoiwnrflakefneiofrt";

  u = CryptoJS.lib.CipherParams.create ({ciphertext: CryptoJS.enc.Base64.parse (t.ct)});
  u.iv = CryptoJS.enc.Hex.parse (t.iv); u.salt = CryptoJS.enc.Hex.parse (t.s);
  u = JSON.parse (CryptoJS.AES.decrypt (u, s).toString(CryptoJS.enc.Utf8));

  eval ("url=" + u.substr (4)); url = pullstring (url, '"file":"', '&');
  if (!url.includes ("?id=")) throw ("!!!"); url = "https:" + url.replace (/\\/g, "");

} catch (err) { console.log (err); busy = 0; }

  if (no_fail (frame)) loadwindow (url, frame, tag + ": id-none");
}
////////////////////

const dig_xvideos = async (doc, frame, fmt) =>
{
  var tag = "xvideos"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";
  var url = cors_bypass + doc;

try
{
  response = await fetch (url);
  textData = await response.text();

  if (url = pullstring (textData, "setVideoHLS('", "'")) if (stream_all (frame, 1)) fmt = 0; else
  {
    response = await fetch (url);
    textData = await response.text();

    url = crack_m3u8 (url, textData, frame, fmt); if (!url) throw ("!!!");
    fmt = pullstring (url, "<>", ""); url = pullstring (url, "", "<>");
    fmt = fmt * 1;
  }
  else if (url = pullstring (textData, '"contentUrl": "', '"')) fmt = 0; else throw ("!!!");

} catch (err) { console.log (err); busy = 0; }

  if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: id-none");
}
////////////////////

const dig_audiorealm = async (doc, frame, fmt) =>
{
  var tag = "audiorealm"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";

try
{ 
  var url = doc.substr (doc.indexOf ("play") + 5);
  url = url.substr (0, url.indexOf ("/"));

  if (url.length < 3 || url.length > 6) throw ("!!!");

} catch (err) { console.log (err); busy = 0; }

  busy = -busy; if (no_fail (frame)) req_audiorealm (url, frame, fmt);
}
////////////////////

const dig_radionet = async (doc, frame, fmt) =>
{
  var tag = "radionet"; if (is_busy (frame)) return;
  document.getElementById ("id" + frame).value = tag + " (DIG)";
  var url = cors_bypass + doc;

try
{ 
  response = await fetch (url);
  textData = await response.text();

  url = pullstring (textData, '"streams":[{"url":"', '"');
  if (!url) throw ("!!!");

} catch (err) { console.log (err); busy = 0; }

  no_format (frame); if (no_fail (frame)) loadwindow (url, frame, tag + ": id-none");
}
////////////////////

</script><script>

//////////////////////////////
///// INTERNET TV (IPTV) /////
//////////////////////////////

var open_livestream = function (url, frame, fmt)
{
  var n, z = frame, f = [0,0,0,0,0,0,0,0]; if (!url || busy) return;

  if (url [0] == "?") url = url.substr (1);
  if (url [0] == "<") { open_dloader (url, frame, fmt); return; }

  if (url [0] == "/")
  {
    var s = url.split (" "); var t = (s[0] + "/////").split ("/");
    f[0] = t[1] * 1; f[1] = t[2] * 1; f[2] = t[3] * 1;
    f[4] = t[4] * 1; f[5] = t[5] * 1; f[6] = t[6] * 1;
    fmt = getformat (f, fmt); if ((n = argformat (fmt)) < 0) return;
    n = f[n]; if (n != Math.trunc (n)) n = (n * 10) % 10;
    url = s[n]; if (n <= 0 || !url) return;
  }

  n = url.indexOf (":"); if (n > 3) return;
  var src = url.substr (0, n); url = url.substr (n+1); if (!src) return;

  if (url [0] == "^")  // string is reversed to hide from DMCA scans
  {
    var a = url.lastIndexOf ("//") + 2, b = url.lastIndexOf ("/"), c = url.substr (a, b - a);
    a = url.substr (1, a - 1); b = url.substr (b); url = a + c.split("").reverse().join("") + b;
  }

  if (src == "a")
    { popup_radio (-1, 320, 200, "https://www.iheart.com/live/" + url + "/?embed=1&autoplay=1"); return; }

  if (src == "0") { request (url, frame, -fmt); return; }
  if (src == "1") { open_yt (url, frame, -fmt); return; }

  document.getElementById ("id" + frame).value = "Tuning...";

  if (src == "7") open_tv0 (z, 0, f, fmt, url);
  if (src == "8") open_tv0 (z, 1, f, fmt, url);
  if (src == "9") open_tv0 (z, 1, f, fmt, cors_bypass + url);

  if (src == "1a") open_tv1 (z, 2, f, fmt, url, src);
  if (src == "1b") open_tv1 (z, 3, f, fmt, url, src);
  if (src == "1c") open_tv1 (z, 2, f, fmt, url, src);
  if (src == "1d") open_tv1 (z, 3, f, fmt, url, src);  // from https://daddyhd.com/24-7-channels.php
  if (src == "1e") open_tv1 (z, 1, f, fmt, url, src);
  if (src == "1f") open_tv1 (z, 1, f, fmt, url, src);
  if (src == "1p") open_tv1 (z, 1, f, fmt, url, src);
  if (src == "1x") open_tv1 (z, 1, f, fmt, url, src);
  if (src == "2a") open_tv2 (z, 0, f, fmt, url, src);
  if (src == "2b") open_tv2 (z, 0, f, fmt, url, src);
  if (src == "3a") open_tv3 (z, 1, f, fmt, url, "http://www.freeintertv.com");
  if (src == "4a") open_tv4 (z, 0, f, fmt, url, "https://streamplus.one");
  if (src == "7a") open_tv7 (z, 1, f, fmt, url, "https://watch.plex.tv");
  if (src == "8a") open_tv8 (z, 0, f, fmt, url, "https://easycatchup.eu");
  if (src == "9a") open_tv9 (z, 1, f, fmt, url, "https://www.distro.tv");
}
////////////////////

const open_dloader = async (url, frame, fmt) =>
{
  if (is_busy (frame)) return; else try
  {
    var n = document.getElementById ("hls" + frame).checked;
    if (n != 1 || (n = url.indexOf (">")) < 2) throw ("???");
    var name = url.substr (1, n - 1); url = url.substr (n + 1);
    var resp = await fetch (url);
    var data = await resp.text();
  } catch (err) { console.log (err); busy = 0; }

  busy = -busy; if (!no_fail (frame)) return;
  document.getElementById ("vid" + frame).innerHTML = "Download";
  dloader = name; crack_m3u8 (url, data, frame, fmt); dloader = "";
}

const open_yt = async (url, frame, fmt) =>
{
  if (is_busy (frame)) return;
  url = "https://www.youtube.com/embed/live_stream?channel=" + url;
  document.getElementById ("id" + frame).value = "youtube";

try
{
  response = await fetch (cors_bypass + url);
  textData = await response.text();

  url = pullstring (textData, '<link rel="canonical" href="', '"');
  if (url == "") throw ("!!!"); url = url.substr (url.length - 11);

} catch (err) { console.log (err); busy = 0; }

  busy = -busy; if (no_fail (frame)) request (url, frame, fmt);
}

const open_tv0 = async (frame, mode, f, fmt, url) =>
{
  var n; if (is_busy (frame)) return;

  if (url [0] == "*") if (localhost) url = localhost + "~" + url; else
  {
    url = url.substr (1); n = url.indexOf ("*"); if (n >= 0) url = url.substr (n + 1);
  }

  if (stream_all (frame, 1)) fmt = mode = 0; else
  {
    var x = 0; n = getformat (f, fmt);
    if ((n = argformat (n)) >= 0)
    {
      x = pixformat (n); n = f[n]; var y = Math.trunc (n); if (n != y) x = y;
    }
    if (mode) mode = (x ? x : 2); else { fmt = x; if (x) mode = 1; }
  }

  if (mode > 1) try
  {
    response = await fetch (url);
    textData = await response.text();

    url = crack_m3u8 (response.url, textData, frame, fmt); if (!url) throw ("!!!");
    fmt = pullstring (url, "<>", ""); url = pullstring (url, "", "<>");
    if (fmt && mode > 2) fmt = mode; else mode = 0;

  } catch (err) { console.log (err); busy = 0; }

  if (mode) fixformat (f, frame); else if (!fmt) { fmt = 0; no_format (frame); }
  fmt = " [" + fmt + "]"; if (no_fail (frame)) loadwindow (url, frame, "Internet TV" + fmt);
}
////////////////////

const open_tv1 = async (frame, mode, f, fmt, url, src) =>
{
  var n, p, s, sub = src + "," + url; if (is_busy (frame)) return;

try
{
  if (mode & 2) if (!localhost) throw ("???");

  if (src == "1a") url = "*http://tv247.us,,*http://live.tv247us.com/tv247/" + url + ".m3u8";
  if (src == "1b") url = "*http://tv247.us,,*http://cdn.tv247.us/channel/" + url + ".m3u8";

  if (src == "1c")
  {
    response = await fetch (cors_bypass + "http://tv247.us/watch/" + url);
    textData = await response.text();

    url = pullstring (textData, 'var link= "', '"'); if (!url) throw ("!!!");
  }

  if (src == "1d") url = "*https://ntuplay.xyz/*https://webudit.salamus1.lol/lb/" + url + "/index.m3u8";
  if (src == "1e") url = "https://content.uplynk.com/channel/" + url + ".m3u8";
  if (src == "1p") url = "*,,*https://stitcher.pluto.tv/stitch/hls/channel/" + url + "/master.m3u8" +
    "?appName=web&appVersion=na&deviceVersion=na&deviceDNT=na&deviceMake=na&deviceModel=na" +
    "&deviceType=na&deviceId=na&sid=na";

  if (src == "1f")
  {
    response = await fetch (cors_bypass + "https://frankspeech.com");
    textData = await response.text();

    var a = textData.indexOf ("Setup player");
    var b = textData.indexOf ("Setup player", a + 1);
    var c = textData.indexOf ("Setup player", b + 1);
    if (url == "lindell-1") src = textData.substr (a, 300);
    if (url == "lindell-2") src = textData.substr (b, 300);
    if (url == "lindell-3") src = textData.substr (c, 300);
    url = pullstring (src, "src: '", "'"); if (!url) throw ("!!!");
  }

  if (src == "1x") if (url == "olympic")
  {
    url = "https://olympics.com/tokenGenerator?url=https://ott-dai-oc.akamaized.net/OC1/master.m3u8&domain=";

    response = await fetch (cors_bypass + url);
    textData = await response.text();

    url = pullstring (textData, '"', '"'); if (!url) throw ("!!!");
  }

} catch (err) { console.log (err); busy = 0; }

  busy = -busy; if (no_fail (frame)) open_tv0 (frame, mode & 1, f, fmt, url);
}
////////////////////

const open_tv2 = async (frame, mode, f, fmt, url, src) =>
{
  var n, s, sub = "2," + url; if (is_busy (frame)) return;

if (s = saved_path (sub)) url = s; else try
{
  if (!localhost || !cors_kraker) throw ("!!!");

  if (src == "2a") url = cors_kraker + "**https://coolcast2.com/spstream.php?live=" + url;
  if (src == "2b") url = cors_kraker + "**https://wikicast.tv/wiki.php?live=" + url;

  response = await fetch (url);
  textData = await response.text();

  url = pullstring (textData, "return([", "]"); if (!url) throw ("!!!");
  url = cors_kraker + "*https://coolcast2.com,,*" + url.replace (/[",\\]/g, "");
  freetv [sub] = the_time + " 0 " + url;

} catch (err) { console.log (err); busy = 0; }

  busy = -busy; if (no_fail (frame)) open_tv0 (frame, mode, f, fmt, url);
}
////////////////////

// http://www.freeintertv.com  format: ?????
const open_tv3 = async (frame, mode, f, fmt, url, src) =>
{
  var n, s, sub = "3," + url; if (is_busy (frame)) return;

if (s = saved_path (sub)) url = s; else try
{
  var header = { 'Content-Type': 'application/x-www-form-urlencoded' };
  var data = "chname=" + url + "&html5=11";

  url = cors_kraker + src + "/myAjax/get_item_m3u8/";

  response = await fetch (url, { method: 'POST', headers: header, body: data } );
  textData = await response.text();

  url = textData.substr (textData.indexOf ("http"));
  url = url.substr (0, url.indexOf ("'"));
  if (url == "") throw ("!!!");

  freetv [sub] = the_time + " 0 " + url;

} catch (err) { console.log (err); busy = 0; }

  busy = -busy; if (no_fail (frame)) open_tv0 (frame, mode, f, fmt, url);
}
////////////////////

// https://streamplus.one  format: ?????
const open_tv4 = async (frame, mode, f, fmt, url, src) =>
{
  var n, s, sub = "4," + url; if (is_busy (frame)) return;

if ((s = saved_path (sub))) url = s; else try
{
  if (!localhost || !cors_kraker) throw ("???");

  url = cors_kraker + "*https://streamwink.com/*" + src + "/x00x10xxx100xsdwx010x/" + url + ".phtml";

  response = await fetch (url);
  textData = await response.text();

  url = pullstring (textData, 'whistler = "', '"');
  url = pullstring (url, "http:", ""); if (!url) throw ("!!!");
  url = "*,,*http:" + url;

} catch (err) { console.log (err); busy = 0; }

  busy = -busy; if (no_fail (frame)) open_tv0 (frame, mode, f, fmt, url);
}
////////////////////

const open_tv5 = async (frame, mode, f, fmt, url, src) =>
{
  var n, s, sub = "5," + url; if (is_busy (frame)) return;

if ((s = saved_path (sub))) url = s; else try
{

} catch (err) { console.log (err); busy = 0; }

  busy = -busy; if (no_fail (frame)) open_tv0 (frame, mode, f, fmt, url);
}
////////////////////

const open_tv6 = async (frame, mode, f, fmt, url, src) =>
{
  var n, s, sub = "6," + url; if (is_busy (frame)) return;

if ((s = saved_path (sub))) url = s; else try
{

} catch (err) { console.log (err); busy = 0; }

  busy = -busy; if (no_fail (frame)) open_tv0 (frame, mode, f, fmt, url);
}
////////////////////

// https://watch.plex.tv/live-tv  format: channel/?????
const open_tv7 = async (frame, mode, f, fmt, url, src) =>
{
  var h, s, t, sub = "7," + url; if (is_busy (frame)) return;

if ((s = saved_path (sub))) url = s; else try
{
  url = src + "/live-tv/" + url; if (!cors_kraker) throw ("???");

  response = await fetch (cors_kraker + url, allow_cookie ("", ""));
  textData = await response.text();

  if (!(s = pullstring (textData, '"id":"', '"'))) throw ("!!!");
  t = pullstring (response.headers.get ("zz-set-cookie") || "", "=", ";");
  h = { accept: 'application/json', 'x-plex-client-identifier': t, 'x-plex-product': 'Plex Mediaverse' };
  url = "https://plex.tv/api/v2/users/anonymous";

  response = await fetch (cors_kraker + url, { method: 'POST', headers: h });
  jsonData = await response.json();

  if (!(t = jsonData.authToken)) throw ("!!!");
  url = "https://epg.provider.plex.tv/library/parts/" + s + ".m3u8?X-Plex-Token=" + t;
  freetv [sub] = the_time + " 0 " + url;

} catch (err) { console.log (err); busy = 0; }

  busy = -busy; if (no_fail (frame)) open_tv0 (frame, mode, f, fmt, url);
}
////////////////////

// https://easycatchup.eu  format: stream=?????
const open_tv8 = async (frame, mode, f, fmt, url, src) =>
{
  var n, s, sub = "8," + url; if (is_busy (frame)) return;

if ((s = saved_path (sub))) url = s; else try
{
  if (!cors_kraker) throw ("???"); url = src + "/watch.php?" + url;

  response = await fetch (cors_kraker + url);
  textData = await response.text();

  url = pullstring (textData, "video.src='", "'");
  if (url == "") throw ("!!!");

  url = "**" + url; freetv [sub] = the_time + " 0 " + url;

} catch (err) { console.log (err); busy = 0; }

  busy = -busy; if (no_fail (frame)) open_tv0 (frame, mode, f, fmt, url);
}
////////////////////

// view-source:https://www.distro.tv/live format: live/?????
const open_tv9 = async (frame, mode, f, fmt, url, src) =>
{
  var n, s, sub = "9," + url; if (is_busy (frame)) return;

if (s = saved_path (sub)) url = s; else try
{
  url = src + "/" + url + "/";

  response = await fetch (cors_bypass + url);
  textData = await response.text();

  url = pullstring (textData, '"contentUrl":"', '"'); if (!url) throw ("!!!");
  n = url.indexOf ("?"); if (n > 0) url = url.substr (0, n);

  freetv [sub] = the_time + " 0 " + url;

} catch (err) { console.log (err); busy = 0; }

  busy = -busy; if (no_fail (frame)) open_tv0 (frame, mode, f, fmt, url);
}
////////////////////

</script><script>

//////////////////////////
///// INTERNET RADIO /////
//////////////////////////

var radio = function (url)
{
  document.getElementById ("ir_url").value = url;
  ir_action (0); if (url) ir_action (2);
}
////////////////////

var ir_action = function (mode)
{
  var win = document.getElementById ("internet_radio");
  var pop = document.getElementById ("ir_popup");
  var sts = document.getElementById ("ir_status");
  var vol = document.getElementById ("ir_volume");
  var url = document.getElementById ("ir_url").value;

  var src_ok = (win.src && win.src != "file:///");
  var volume = vol.value * 1;

  if (mode == 3)
  {
    sts = pop.checked; pop.checked = !sts;
    pop.className = (sts ? "is_off" : "is_on"); return;
  }

  if (mode == 2 && url.length == 11 && url.indexOf (":") < 0)
  {
    var src = document.getElementById ("ctr7z").value; if (src < 10) src = 0;
    url = invidious_site [src] + "/latest_version?local=true&itag=251&id=" + url;
    document.getElementById ("ir_url").value = url;
  }

  if (mode == 2 && pop.checked && url)
  {
    popup_radio (volume, 440, 120, url); mode = 0;
  }

  if (mode == 2 && !src_ok) if (url)
  {
    if (last_time > get_time() - 2) mode = 0; else win.src = url; last_time = the_time;
  }
  else
  {
    url = document.getElementsByName ("ir");
    for (var i = 0; i < url.length; i++) if (url[i].checked) url[i].onclick();
    return;
  }

  if (mode == 0 || (mode == -2 && src_ok))
  {
    sts.value = (mode ? "ERROR" : "Stopped"); win.pause(); win.src = "file:///";
    win = win.nextElementSibling; win.children [0].value = ""; win.children [2].value = "";
    win.children [1].style.background = "transparent"; win.children [1].value = 0.5;
  }

  if (mode == 2 || (mode == -1 && src_ok))
    { sts.value = "Playing"; win.play(); }

  if (mode == 1 && src_ok)
    { sts.value = "Paused"; win.pause(); }

  if (mode == 4 && volume > 0) volume -= volume > 40 ? 10 : 5;
  if (mode == 5 && volume < 100) volume += volume < 40 ? 5 : 10;

  if (mode == 6)
  {
    var s = win.duration * win.nextElementSibling.children [1].value;
    if (!isNaN (s) && isFinite (s)) win.currentTime = s;
  }

  win.muted = true; win.volume = volume / 100;
  win.muted = false; vol.value = volume;
}
////////////////////

var ir_update = function ()
{
  var win = document.getElementById ("internet_radio"); if (win.paused) return;

  var t = win.currentTime, d = win.duration;
  if (isNaN (t)) t = 0; if (isNaN (d) || !isFinite (d)) d = 0;
  var z = (t > 0 && d > 0) ? 400 * t / d : 0; z = Math.round (z) * 0.25;

  var ts = Math.round (t), ds = Math.round (d);
  var th = Math.trunc (ts / 3600), dh = Math.trunc (ds / 3600); ts -= th * 3600; ds -= dh * 3600;
  var tm = Math.trunc (ts / 60), dm = Math.trunc (ds / 60); ts -= tm * 60; ds -= dm * 60;
  t = th + ":" + (tm < 10 ? "0" : "") + tm + ":" + (ts < 10 ? "0" : "") + ts;
  d = dh + ":" + (dm < 10 ? "0" : "") + dm + ":" + (ds < 10 ? "0" : "") + ds;

  win = win.nextElementSibling; win.children [0].value = t; win.children [2].value = d;
  win.children [1].style.background = "linear-gradient(90deg, lightpink " + z + "%, mistyrose 0%)";
}
////////////////////

var popper = function (frame, mode)
{
  var i, j, k, val = "", txt = "";
  var win = document.getElementById ("pop" + frame);
  var index = win.style.zIndex; if (!index) index = -1;
  var popup = document.getElementById ("mov" + frame + "m").checked;

  if (busy) return;

  if (mode.length != undefined)
  {
    txt = mode.substr (mode.indexOf ("<>") + 2);
    val = mode.substr (0, mode.indexOf ("<>"));
    txt = txt.substr (txt.indexOf (" ") + 1);
    if (val == "") mode = 1;
  }

  if (mode && mode.length == undefined)
  {
    if (mode == 1) win.style.zIndex = -index;
    if (mode == 2) win.style.zIndex = popup ? -index : index;
    if (mode == 3) win.style.zIndex = -1;
    if (mode == 4) win.style.zIndex = popup ? 1 : -1;
    return;
  }

  var box = document.getElementById ("stk" + frame);
  var doc = win.getElementsByTagName ("table");

  if (doc.length < 2 || !(doc = doc [1])) doc = null;
  if (doc) doc = doc.getElementsByTagName ("button");
  if (!doc || doc.length < 2) doc = null;

  if (mode)
  {
    if (doc)
    {
      for (i = 0; i < doc.length - 1; i++) if (txt == doc[i].innerText) break;

      for (; i > 0; i--)
      {    
        doc[i].value = doc[i-1].value; doc[i].innerText = doc[i-1].innerText;
      }
      doc[0].value = mode; doc[0].innerText = txt;
    }
    error = val; box.value = "";
    box.parentNode.firstElementChild.value = "@ " + txt;
    if (frame == 5) loadid (frame, 2);
    if (frame == 6) loadnews (frame, 2);
    if (frame == 7) loadmovie (frame, 2);
    return;
  }

  var start = '<button onclick="javascript:popper(' + frame + ',this.value)" value="';
  var middle2 = '" style="background-color:lightblue">';
  var middle1 = '" style="background-color:pink">';
  var pop = "<table><tr><td>"; box = box.children;

  var n = Math.floor (((i = box.length) + 2) / 3);
  if ((i -= 45) > 0) n = 15; else i = 1;

  for (j = k = 0; k < 3; i++)
  {
    if (i >= box.length) { val = ""; txt = "-"; } else
      { val = box[i].value; txt = box[i].innerText; }
    pop = pop + start + val + "<>" + txt + middle1 + txt + "</button><br>";
    if (++j >= n) { j = 0; if (++k < 3) pop = pop + "</td><td>"; }
  }
  pop = pop + "</td></tr></table><table><tr><td>";

  for (i = 0, j = k = 0; k < 3; i++)
  {
    if (!doc || i >= doc.length) { val = ""; txt = "-"; } else
      { val = doc[i].value; txt = doc[i].innerText; }
    pop = pop + start + val + middle2 + txt + "</button><br>";
    if (++j >= 4) { j = 0; if (++k < 3) pop = pop + "</td><td>"; }
  }
  win.innerHTML = pop + "</td></tr></table>";
  win.style.zIndex = 1;  //if (popup) win.style.zIndex = 1;
}
////////////////////

var popup_radio = function (volume, width, height, url)
{
  var win, title = "Internet Radio";

  var audio = "controls style='position:absolute;left:0;bottom:0;width:100%;height:32px'";
  var specs = "width=" + width + ",height=" + height + ",top=100,left=100";

  var insert = "<body style='margin:0;padding:0;font-size:42px;line-height:80px;text-align:center;" +
    "background-color:cornflowerblue;color:turquoise'><div style='height:100vh'>" +
    "<i><b>" + title + "</b></i></div><audio " + audio + "></audio></body>";

  var iframe = "<body style='margin:0;padding:0;overflow:hidden'>" +
    "<div style='width:0;height:100vh;position:absolute'></div><iframe style=" +
    "'width:100vw;height:100vh;margin:0;padding:0;border:none'></iframe></body>";

  win = window.open ("", "radiobox", specs); win.focus();
  if (!win.document.doctype) window.open (blank_page, "radiobox", specs);
  if (volume < 0) insert = iframe;

  load_window (win, null, title, insert, width + " " + height, function (doc)
  {
    if (volume < 0) doc.getElementsByTagName ("iframe")[0].src = url; else
    {
      win = doc.getElementsByTagName ("audio")[0]; win.src = url;
      win.volume = volume / 100; win.play();
    }
  });
}
////////////////////

</script><script>

//////////////////////
///// LOADWINDOW /////
//////////////////////

var loadwindow = function (url, frame, site)
{
  var h, w, raw, win, title, insert, specs;
  var sandbox = "allow-scripts allow-same-origin allow-forms";
  var client = last_client; last_client = ""; get_time();

  var bstyle = "<body style='margin:0;padding:0;overflow:hidden;background-color:";
  var istyle = " style='position:absolute;border:none;outline:none;width:100%;height:100%'";
  var vstyle = " autoplay allowfullscreen ";

  var frm = document.getElementById ("mov" + frame);
  var msg = document.getElementById ("vid" + frame);

  if (!url)
  {
    // remove and append <iframe> to block history
    frm.src = "about:blank"; frm.removeAttribute ("sandbox");
    win = frm.parentNode; win.removeChild (frm); win.appendChild (frm);
    frm.style.backgroundColor = ""; frm.style.pointerEvents = "none";
    if (site) document.getElementById ("id" + frame).value = site;
    msg.innerHTML = "No Video"; return;
  }

  if (last_time > the_time - 2) return; last_time = the_time;

  var btn_a = document.getElementById ("btn" + frame + "a").checked;
  var btn_b = document.getElementById ("btn" + frame + "b").checked;
  var multi = document.getElementById ("mov" + frame + "m").checked;
  var nplay = document.getElementById ("mov" + frame + "n").checked;
  var scale = document.getElementById ("ctr" + frame + "w").value * 10;

  if (site != "")
  {
    if (url [0] == "~") url = localhost ? localhost + url : url.substr (1);
    specs = url.substr (0,4); scale += document.getElementById ("meta" + frame).step * 1;

    if (specs != "http" && specs != "file")
    {
      msg.innerHTML = "Bad URL"; return;
    }
    document.getElementById ("id" + frame).value = site;
    document.getElementById ("line" + frame).value = url; urlcopy (frame, false);

    if (nplay) if (client && (btn_a || btn_b)) client = ""; else
    {
      msg.innerHTML = "No Play"; return;
    }
  }

  raw = 0; var filter = frm.value; if (!filter) filter = "initial";
  if (document.getElementById ("mov" + frame + "b").checked) raw = 1;
  if (document.getElementById ("mov" + frame + "c").checked) raw = 2;

  if (raw == 0)
  {
    title = "Raw Mouse (squeak)";
    insert = "'><iframe" + istyle + vstyle + "src='" + url + "'></iframe></body>";
  }
  if (raw == 1)
  {
    title = "Cat Wrapper (meow)";
    insert = "'><video" + istyle + vstyle + "id='video'></video></body>";
  }
  if (raw == 2)
  {
    title = "Cat Sandbox (screech)";
    insert = "'><iframe" + istyle + vstyle +
      "src='" + url + "' sandbox='" + sandbox + "'></iframe></body>";
  }

  if (btn_a) { h = w = 0; specs = ""; } else if (btn_b)
  {
    var lft, top;

    win = document.getElementById ("win" + frame);
    if (!(specs = win.value)) specs = win.children[0].value;

    h = specs.indexOf (":"); w = specs.substr (0, h); h = specs.substr (h + 1);
    lft = (window.screen.width - w)  / 2 - 4; top = (window.screen.height - h) / 3 - 15;
    specs = "width=" + w + ",height=" + h + ",top=" + top + ",left=" + lft;
  }
  else
  {
    if (raw == 1)
    {
      win = frm.contentDocument; win.open();
      win.write ("<!DOCTYPE html>" + bstyle + "black" + insert);
      win.close(); load_stream (frame, true, url, win, filter, scale);
    }
    else
    {
      if (raw == 2) frm.sandbox = sandbox; frm.src = url;
      frm.style.filter = filter; frm.style.backgroundColor = "lemonchiffon";
    }
    frm.style.pointerEvents = "auto"; return;
  }

  if (multi) vidwin = null; else if (client || h != last_h || w != last_w || raw != last_raw)
  {
    if (vidwin) vidwin.close(); vidwin = null;
  }
  last_h = h; last_w = w; last_raw = raw;

  if (!vidwin || vidwin.closed) vidwin = window.open (blank_page, "_blank", specs);
  vidwin.focus(); insert = bstyle + (raw == 1 ? "black" : "lemonchiffon") + insert;
  msg.innerHTML = ""; win = blank_page ? null : vidwin.document;

  load_window (vidwin, win, title, insert, w + " " + h,
    function (doc) { load_stream (frame, false, url, doc, filter, scale); });
}
////////////////////

var load_window = function (win, doc, title, insert, resize, func, count)
{
  if (!doc)
  {
    doc = win.document; if (count == undefined) count = 10;
    if (--count && (!doc.doctype || !doc.body)) { setTimeout (function()
      { load_window (win, null, title, insert, resize, func, count); }, 100); return; }
  }

  if (doc.doctype)
  {
    var dom = new DOMParser();
    dom = dom.parseFromString (insert, "text/html");
    doc.body.replaceWith (dom.body);
  }
  else
  {
    doc.open(); doc.write ("<!DOCTYPE html>" + insert); doc.close();
  }

  doc.title = title; resize = resize.split (" ");
  var width = resize [0] * 1 || 0, height = resize [1] * 1 || 0;
  if (width <= 0 || height <= 0) { if (func) func (doc); return; }
  var bdy = doc.body; count = 0;

  bdy.onresize = function()
  {
    var w = bdy.clientWidth, h = bdy.firstChild.clientHeight;
    if (w <= 0 || h <= 0) return; w = width - w; h = height - h;
    if (count++ < 3) if (w || h) { win.resizeBy (w, h); return; }
    bdy.onresize = null; if (func) func (doc);
  }
  bdy.onresize();
}
////////////////////

var vid_oops = function (frame, vid, fatal)
{
  if (fatal) setTimeout (function() { vid_error (vid); }, 500);
}
////////////////////

var vid_info = function (frame, w, h, reset)
{
  if (!frame) return; var msg = w + " x " + h;
  if (w <= 0 || h <= 0) if (reset) msg = ""; else return;
  document.getElementById ("meta" + frame).value = msg;
}
////////////////////

var vid_status = function (action, message)
{
  if (action) ir_action (action); if (message) console.log (message);
}
////////////////////

var load_stream = function (frame, is_local, url, doc, filter, scale)
{
  var win = doc.getElementById ("video");
  var fmt = document.getElementById ("fmt" + frame).value;
  var hls = document.getElementById ("hls" + frame).checked;

  if (hls == 1 && !document.getElementById ("mov" + frame + "f").checked) fmt = 0;

  if (!win)
  {
    win = doc.getElementsByTagName ("iframe")[0];
    if (win) win.style.filter = filter; return;
  }

  doc = doc.body; if (!is_local) frame = 0; win.value = frame;
  win.step = scale; win.style.filter = filter; create_controls (win);

  win.onloadedmetadata = function()
  {
    var w = this.videoWidth, h = this.videoHeight; vid_info (frame, w, h, 0);
    vid_status (1); if (localhost && (w <= 0 || h <= 0)) vid_poster (this, "/~poster.jpg");
  }

  if (!hls)
  {
    doc.onunload = function() { vid_status (-1); }
    win.src = url; win.onerror = function() { vid_oops (frame, win, true); }
  }

  if (hls == 1)
  {
    var js = get_js ("HLS", !window.Hls);
    js.onload = function() { play_hls (frame, url, doc, win, fmt); }
    if (window.Hls) js.onload(); else if (localhost) js.src = "/~hls_player.js";
      else js.src = "https://cdn.jsdelivr.net/npm/hls.js@0.12.0/dist/hls.min.js";
  }

  if (hls == 2)
  {
    var js = get_js ("DASH", !window.dashjs);
    js.onload = function() { play_dash (frame, url, doc, win, fmt); }
    if (window.dashjs) js.onload(); else if (localhost) js.src = "/~dash.all.min.js";
      else js.src = "https://reference.dashif.org/dash.js/v3.0.2/dist/dash.all.min.js";
  }
}
////////////////////

var get_js = function (type, replace)
{
  var name = type + "_player", js = document.getElementById (name);
  if (js) if (!replace) return js; else js.parentNode.removeChild (js);
  js = document.createElement ("SCRIPT"); js.onerror = function() { err_play (type); }
  js.id = name; document.body.appendChild (js); return js;
}
////////////////////

var err_play = function (error)
{
  alert (error + " player seems to be missing! Server not serving.\n\n" +
    " (o o)  ((( Could be that THEY are watching you ! )))  (o o)\n \n");
}
////////////////////

var hls_quality = function (levels, fmt)
{
  if (!fmt) return (-1); var f = formats_m3u8 (levels);
  fmt = getformat (f, fmt); fmt = argformat (fmt);
  if (fmt >= 0) fmt = f[fmt] - 1; return (fmt);
}
////////////////////

var play_hls = function (frame, url, doc, win, fmt)
{
  var hls_cfg = {
    debug: false,
    startLevel: 2,
    autoStartLoad: false,
    capLevelOnFPSDrop: true,
    capLevelToPlayerSize: true,
    defaultAudioCodec: "mp4a.40.5",
    fpsDroppedMonitoringPeriod: 3000,
    fpsDroppedMonitoringThreshold: 0.1,
    minAutoBitrate: 350000,
    enableWebVTT: false,
    enableCEA708Captions: false,
  };

  if ((url = url.split ("##"))[1])
  {
    hls_cfg.emeEnabled = true; hls_cfg.widevineLicenseUrl = url [1];
    hls_cfg.drmSystems = { 'com.widevine.alpha': {licenseUrl: url [1]} };
  }

  var vid = new Hls (hls_cfg); vid.loadSource (url [0]); vid.attachMedia (win);

  doc.onunload = function() { vid.destroy(); vid_status (-1); }

  vid.on (Hls.Events.ERROR, function (event,data) { vid_oops (frame, win, data.fatal); });

  vid.on (Hls.Events.MANIFEST_LOADED, function (event,data)
    { vid.loadLevel = hls_quality (vid.levels, fmt); vid.startLoad(); });

  vid.on (Hls.Events.BUFFER_CODECS, function (event,data) {
    var x = data.video.metadata; if (x) vid_info (frame, x.width, x.height, 0); });
}
////////////////////

var play_dash = function (frame, url, doc, win, fmt)
{
  var dash_cfg = {
    streaming: { text: {defaultEnabled: false}, abr: {autoSwitchBitrate: {video: false}} }
  };

  url = url.split ("##"); var vid = dashjs.MediaPlayer().create();
  vid.initialize (win, url [0], true); vid.updateSettings (dash_cfg);
  if (url [1]) vid.setProtectionData ({ 'com.widevine.alpha': {serverURL: url [1]} });

  doc.onunload = function() { vid.reset(); vid_status (-1); }

  vid.on (dashjs.MediaPlayer.events ["ERROR"], function() { vid_oops (frame, win, true); });

  vid.on (dashjs.MediaPlayer.events ["PLAYBACK_METADATA_LOADED"], function()
  {
    var m, n, levels = [], rates = vid.getBitrateInfoListFor ("video");
    for (n = 0; n < rates.length; n++)
    {
      m = rates [n]; levels [n] = { width: m.width, height: m.height, bitrate: m.bitrate };
    }
    vid.setQualityFor ("video", hls_quality (levels, fmt));
  });

  vid.on (dashjs.MediaPlayer.events ["QUALITY_CHANGE_RENDERED"], function()
  {
    var x = vid.getCurrentTrackFor ('video'); if (!x) return;
    var y = x.bitrateList [vid.getQualityFor ('video')];
    vid_info (frame, y.width, y.height, 0);
  });
}
////////////////////

// DASH settings: http://cdn.dashjs.org/latest/jsdoc/module-Settings.html

/* HLS settings (https://github.com/video-dev/hls.js/blob/master/docs/API.md#fine-tuning)

var config = {
      autoStartLoad: true,
      startPosition: -1,
      debug: false,
      capLevelOnFPSDrop: false,
      capLevelToPlayerSize: false,
      defaultAudioCodec: undefined,
      initialLiveManifestSize: 1,
      maxBufferLength: 30,
      maxMaxBufferLength: 600,
      maxBufferSize: 60*1000*1000,
      maxBufferHole: 0.5,
      lowBufferWatchdogPeriod: 0.5,
      highBufferWatchdogPeriod: 3,
      nudgeOffset: 0.1,
      nudgeMaxRetry: 3,
      maxFragLookUpTolerance: 0.25,
      liveSyncDurationCount: 3,
      liveMaxLatencyDurationCount: Infinity,
      enableWorker: true,
      enableSoftwareAES: true,
      manifestLoadingTimeOut: 10000,
      manifestLoadingMaxRetry: 1,
      manifestLoadingRetryDelay: 1000,
      manifestLoadingMaxRetryTimeout: 64000,
      startLevel: undefined,
      levelLoadingTimeOut: 10000,
      levelLoadingMaxRetry: 4,
      levelLoadingRetryDelay: 1000,
      levelLoadingMaxRetryTimeout: 64000,
      fragLoadingTimeOut: 20000,
      fragLoadingMaxRetry: 6,
      fragLoadingRetryDelay: 1000,
      fragLoadingMaxRetryTimeout: 64000,
      startFragPrefetch: false,
      fpsDroppedMonitoringPeriod: 5000,
      fpsDroppedMonitoringThreshold: 0.2,
      appendErrorMaxRetry: 3,
      loader: customLoader,
      fLoader: customFragmentLoader,
      pLoader: customPlaylistLoader,
      xhrSetup: XMLHttpRequestSetupCallback,
      fetchSetup: FetchSetupCallback,
      abrController: AbrController,
      bufferController: BufferController,
      capLevelController: CapLevelController,
      fpsController: FPSController,
      timelineController: TimelineController,
      enableWebVTT: true,
      enableCEA708Captions: true,
      stretchShortVideoTrack: false,
      maxAudioFramesDrift: 1,
      forceKeyFrameOnDiscontinuity: true,
      abrEwmaFastLive: 3.0,
      abrEwmaSlowLive: 9.0,
      abrEwmaFastVoD: 3.0,
      abrEwmaSlowVoD: 9.0,
      abrEwmaDefaultEstimate: 500000,
      abrBandWidthFactor: 0.95,
      abrBandWidthUpFactor: 0.7,
      abrMaxWithRealBitrate: false,
      maxStarvationDelay: 4,
      maxLoadingDelay: 4,
      minAutoBitrate: 0,
      emeEnabled: false,
      widevineLicenseUrl: undefined,
      requestMediaKeySystemAccessFunc: requestMediaKeySystemAccess
  };
*/

//////////////////////////////
///// GENERIC BRIGHTCOVE /////
//////////////////////////////

const find_brightcove = async (doc, xtag, frame, fmt) =>
{
  if (is_busy (frame)) return;
  var url = cors_bypass + doc;
  var tag = xtag; if (tag == "") tag = "brightcove";
  document.getElementById ("id" + frame).value = tag + " (DIG)";

try
{
  response = await fetch (url);
  textData = await response.text();

  var pub, id;

  if (url = pullstring (textData, 'vms-embedcode="', '"'))  // for www.news.com.au
  {
    pub = pullstring (url, "", "-"); id = pullstring (url, "-", "");
    if (!pub || !id) pub = id = "";
  }

  if (!pub) pub = pullstring (textData, 'data-account="', '"');
  if (!pub) pub = pullstring (textData, 'accountId":"', '"');  // for www.skynews.com.au
  if (!pub) pub = pullstring (textData, 'data-deferred-account="', '"');  // for nypost.com
  if (!pub) throw ("!!!");

  if (!id) id = pullstring (textData, 'data-video-id="', '"');
  if (!id) id = pullstring (textData, 'data-video-id-pending="', '"');
  if (!id) id = pullstring (textData, 'data-brightcove-video-id="', '"');
  if (!id) id = pullstring (textData, 'assetId":"', '"');  // for www.skynews.com.au
  if (!id) id = pullstring (textData, 'data-deferred-video-id="', '"');  // for nypost.com
  if (!id) throw ("!!!");

} catch (err) { console.log (err); busy = 0; }

  busy = -busy; if (no_fail (frame)) load_brightcove (pub, id, xtag, frame, fmt);
}
////////////////////

const load_brightcove = async (pub, id, xtag, frame, xfmt) =>
{
  var i, j, k, fmt, tag, krak = "", key = "", f = [0,0,0,0,0,0,0,0], r = [0,0,0,0];

  if (is_busy (frame)) return;

  if ((i = id.indexOf ("?")) >= 0)
  {
    key = id.substr (i); id = id.substr (0, i);
  }

  if ((i = id.indexOf ("~")) >= 0)
  {
    krak = id.substr (i); id = id.substr (0, i);
  }

  if (pub == "")
  {
    i = id.indexOf ("-"); pub = id.substr (0, i); id = id.substr (i + 1);
  }
  
  if ((fmt = xfmt) < 0) fmt = -fmt; if (!(tag = xtag)) tag = "brightcove";
  var url = "https://players.brightcove.net/" + pub + "/default_default/index.min.js";
  document.getElementById ("id" + frame).value = tag + " (ID)";

try
{
  if (pub.length < 9 || pub.length > 13 || id.length < 10 || id.length > 13) throw ("!!!");

  response = await fetch (cors_bypass + url);
  textData = await response.text();

  var s = 'accountId:"' + pub + '",policyKey:"';
  var n = textData.indexOf (s); if (n < 0) throw ("!!!");

  var pk = textData.substr (n + s.length, 200);
  pk = pk.substr (0, pk.indexOf ('"'));

  url = "https://edge.api.brightcove.com/playback/v1/accounts/" + pub + "/videos/" + id;

  response = await fetch (cors_bypass + url, { headers: { 'Accept': 'application/json;pk=' + pk }, });
  textData = await response.json();

  var url_m3u8 = ""; var dat = textData.sources; if (dat == undefined) throw ("!!!");

  for (i = 0; i < dat.length; i++)
  {
    url = dat [i].src; if (url == undefined) continue;
    if (url.indexOf ("m3u8") > 0) { url_m3u8 = url; continue; }
    k = dat [i].height; if (k == undefined) continue;

    if ((j = chkformat (k)) >= 0) if (r[j] < k) { f[j] = i + 1; r[j] = k; }
  }

  if ((k = getformat (f, fmt)))
  {
    if ((k = argformat (k)) < 0 || (k = f[k] - 1) < 0) throw ("!!!");
    url = dat [k].src; fmt = dat [k].height; fixformat (f, frame);
  }
  else
  {
    if (!(url = url_m3u8)) throw ("!!!"); url = krak + url + key;

    if (stream_all (frame, 1)) fmt = 0; else
    {
      response = await fetch (url);
      textData = await response.text();

      url = crack_m3u8 (url, textData, frame, fmt); if (!url) throw ("!!!");
      fmt = pullstring (url, "<>", ""); url = pullstring (url, "", "<>");
    }
  }

} catch (err) { console.log (err); busy = 0; }

  if (!fmt) no_format (frame); if (!xtag) id = pub + "-" + id; if (xfmt < 0) id = "id-none";
  error = id; if (no_fail (frame)) loadwindow (url, frame, tag + " [" + fmt + "]: " + id);
}
////////////////////

var crack_source = function (data, frame, fmt)
{
  var sub, str, url, i, j, f = [0,0,0,0,0,0,0,0], r = [0,0,0,0];

  sub = data.split ("<source src="); if (sub.length < 2) return "";

  for (i = 1; i < sub.length; i++)
  {
    str = sub [i]; j = str.indexOf ('label='); str = str.substr (j + 6);
    j = str.indexOf (str[0], 1) - 1; str = str.substr (1, j); j = str.length - 1;
    if (str[j] == "p") str = str.substr (0, j); if (str == "original") str = "720";
    if ((j = chkformat (str)) >= 0) if (r[j] < str) { f[j] = i; r[j] = str; }
  }

  fmt = getformat (f, fmt); fixformat (f, frame);
  if ((j = argformat (fmt)) < 0) return "";

  str = sub [f[j]]; fmt = r[j]; j = str.indexOf (str[0], 1) - 1;
  url = str.substr (1, j); if (url == "") return "";

  return (url + "<>" + fmt);
}
////////////////////

var crack_smil = function (data, frame, fmt)
{
  var sub, url, i, j, k, f = [0,0,0,0,0,0,0,0], r = [0,0,0,0];

  if (s = pullstring (data, '<audio src="', '"')) return (s + "<>");

  sub = data.split ('<video src="'); if (sub.length < 2) return "";

  for (i = 1; i < sub.length; i++) if (url = sub [i])
  {
    if (!(k = pullstring (url, '', '"'))) continue;
    if (k.includes (".m3u8")) { f [3] = i; continue; }

    if (!(k = pullstring (url, 'height="', '"')))
      if (!(k = pullstring (url, 'bitrate="'))) continue; else
      {
        // for ???
        if (k == "3500000") k = "720"; else
        if (k == "1850000") k = "504"; else
        // for CNBC
        if (k == "1700000") k = "720"; else
        if (k == "1300000") k = "504"; else
        if (k ==  "900000") k = "360"; else
        if (k ==  "700000") k = "360"; else
        if (k ==  "500000") k = "300"; else continue;
      }

    if ((j = chkformat (k)) >= 0) if (r[j] < k) { f[j] = i; r[j] = k; }
  }

  fmt = getformat (f, fmt); if ((j = argformat (fmt)) < 0) return "";
  if (j == 3) fmt = ""; else { fmt = r[j]; fixformat (f, frame); }
  return (pullstring (sub [f[j]], '', '"') + "<>" + fmt);
}
////////////////////

///////////////////////
///// M3U8 LOADER /////
///////////////////////

var crack_m3u8 = function (path, data, frame, fmt)
{
  var i, j, k, b, h, w, sub, str, url, levels = [];

  sub = data.replace (/\r\n|\r|\n/gm, "\n").split ("#EXT-X-STREAM-INF");

  if (sub.length < 2)
  {
    if (dloader) make_downloader (dloader, "", path); return (path + "<>");
  }

  for (i = 1; i < sub.length; i++)
  {
    k = sub[i].split ("\n"); url = k[0];

    if ((j = url.indexOf ("BANDWIDTH")) < 0) b = 0; else
    {
      str = url.substr (j + 10); j = str.indexOf (",");
      if (j > 0) str = str.substr (0, j); b = str * 1;
    }

    if ((j = url.indexOf ("RESOLUTION")) < 0) w = h = 0; else
    {
      str = url.substr (j + 11); j = str.indexOf (",");
      if (j > 0) str = str.substr (0, j); j = str.indexOf ("x");
      h = str.substr (j + 1) * 1; w = str.substr (0, j) * 1;
    }
    levels [i-1] = { width: w, height: h, bitrate: b, url: k[1], dat: k[0] }
  }

  k = formats_m3u8 (levels); fixformat (k, frame); fmt = getformat (k, fmt);

  if ((j = argformat (fmt)) < 0 || (i = k[j] - 1) < 0)
  {
    // Jan. 2023 - was missing call to make_downloader
    if (dloader) make_downloader (dloader, "", ""); return (path + "<>0");
  }

  if (!(fmt = levels [i].height)) fmt = pixformat (j);
  // Sept. 8, 2021 - added trim() in case of leading spaces
  url = levels [i].url.trim(); url = merge_url (path, url) + url;

  audio = sub [0]; k = levels [i].dat.indexOf ("AUDIO=");
  sub = audio.split ("#EXT-X-MEDIA");

  for (i = 1, j = -1; i < sub.length; i++)
  {
    audio = sub[i];
    if (audio.indexOf ("TYPE=AUDIO") < 0) continue;
    if (audio.indexOf ("DEFAULT=YES") < 0 && k < 0) continue;
    if ((j = audio.indexOf ('URI="')) > 0) break;
  }

  if (j < 0) audio = ""; else
  {
    audio = audio.substr (j + 5);
    audio = audio.substr (0, audio.indexOf ('"'));
    audio = merge_url (path, audio) + audio;
  }

  if (dloader) make_downloader (dloader, audio, url);
  if (audio) return (path + "<>0"); else return (url + "<>" + fmt);
}
////////////////////

var formats_m3u8 = function (levels)
{
  var i, j, k, w, h, b, f = [0,0,0,0,0,0,0,0], p = [0,0,0,0], r = [0,0,0,0];

  if (!levels || !levels.length) return (f);

  for (i = 0; i < levels.length; i++)
  {
    if (!(w = levels[i].width)) w = 0;
    if (!(h = levels[i].height)) h = 0;
    if (!(b = levels[i].bitrate)) b = 0;

    if (!h) if ((b -= 175000) < 0) continue; else
    { h = Math.trunc (Math.sqrt (b * 0.2)); b = -1 } else
    { if (b) b -= w * h * 2 + 250000; if (b > 0) b *= 3; else b *= -2; }

    if ((j = chkformat (h)) < 0 || (b < 0 && r[j])) continue;

    k = ((b >= 0 && !r[j]) || (p[j] == h && b < r[j]));
    if (k || p[j] < h) { f[j] = i + 1; p[j] = h; r[j] = b + 1; }
  }

  if (f[1] && p[0] < 240) f[0] = 0; return (f);
}
////////////////////

var merge_url = function (path1, path2)
{
  var url = "", sub, str, i, j, k;

  if (path2.indexOf ("http") == 0) return "";

  if ((k = path1.indexOf ("?")) < 0) k = path1.length;
  sub = path1.substr (0, k).split ("/"); str = path2.split ("/");

  if (str[0] == "") k = str.length; else k = 1;
  j = sub.length - k; if (j < 3) j = 3;

  for (i = 0; i < j; i++) url = url + sub [i] + "/";

  if (k > 1) url = url.substr (0, url.length - 1);

  return url;
}
////////////////////

//////////////////////
///// DOWNLOADER /////
//////////////////////

var open_downloader = function ()
{
  var doc = window.open().document; doc.write (download_doc); doc.close ();
}
////////////////////

var make_downloader = function (url, aud, vid)
{
  var bstyle = "<body style='margin:0;padding:0;text-align:center;" +
    "background-color:cornflowerblue;color:yellow;font-size:20px'" +
    " onunload=document.value=''>";

  var istyle = "<input type=text size=10 disabled style='" +
    "background-color:transparent;color:white;font-size:18px;" +
    "font-family:inherit;text-align:right;border:none'>";

  var insert = bstyle +
    "<div style='width:0;height:100%;position:absolute'></div>" +
    "<h1 style='color:sandybrown;margin-top:12px'>" + url + "</h1>" +
    "Audio Progress : &nbsp;&nbsp; " + istyle + "<p></p>" +
    "Video Progress : &nbsp;&nbsp; " + istyle + "<p></p><br>" +
    "<button onclick=document.value=''>Cancel</button></body>";

  var specs = "width=400,height=240,top=100,left=100";
  var win = window.open (blank_page, "_blank", specs); win.focus();

  load_window (win, null, "Download", insert, "400 240",
    function (doc) { doc.value = url; download_m3u8 (doc, aud, vid); });
}
////////////////////

const download_m3u8 = async (doc, aud, vid) =>
{
  var i, j, k, resp, data, str, url, header;
  var src, sub, name, count, errors, msg = "DONE";

  var button = doc.getElementsByTagName ("button")[0];
  var status = doc.getElementsByTagName ("input");
  status[0].value = aud ? "Pending" : "No Track";
  status[1].value = vid ? "Pending" : "No Track";

  var fname = "+" + doc.value;
  if (!aud && !vid)    { button.innerText = "NO DATA"; return; }
  if (cookies [fname]) { button.innerText = "GO AWAY"; return; }
  cookies [fname] = "ok";

try { for (i = 0; i < 2; i++)
{ 
  name = fname + (i ? "-vid" : "-aud");
  try { resp = await fetch (name, { method: 'PUT' } ); } catch(e) { resp = ""; }
  if (!resp || resp.status != 200) throw ("Error writing file");
  src = i ? vid : aud; if (!src) continue;

  for (k = 1; k < 5; k++)
  {
    try { resp = await fetch (src);
          data = await resp.text(); } catch(e) { resp = ""; }
    if (resp && resp.status == 200) break;
    if (k > 3) throw ("Error loading m3u8");
  }
  k = data.indexOf ("#EXT-X-ENDLIST"); if (k < 0) k = data.length;
  sub = data.substr (0, k).split ("#EXTINF:"); count = errors = 0;

  for (j = 1; j < sub.length; j++)
  {
    url = ""; header = {}; str = sub [j].split ("\n");
    for (k = str.length - 1; k > 0; k--)
    {
      if (!str [k]) { str.splice (k, 1); continue; }
      if (!url && str [k][0] != "#") url = str [k];
    }
    if (!url) continue; url = merge_url (src, url) + url;

    if ((k = str [1].indexOf ("#EXT-X-BYTERANGE:")) >= 0)
    {
      str = str [1].substr (k + 17).split ("@");
      k = str [0] * 1 + str [1] * 1 - 1; str = str [1] + "-" + k;
      header = { headers: { Range: "bytes=" + str }}; 
    }
    for (k = 1; k < 5; k++)
    {
      if (!doc.value) throw ("STOPPED");
      try { resp = await fetch (url, header);
            data = await resp.arrayBuffer(); } catch(e) { resp = ""; }
      if (resp && (resp.status == 200 || resp.status == 206))
      {
        await fetch ("~+" + name, { method: 'PUT', body: data } );
        status[i].value = ++count + " of " + (sub.length - 1);
        if (errors > 0) errors--; break;
      }
      if (k > 3)
      {
        console.log ("Error loading segment " + j + " in " + name);
        if (++errors > 2) throw ("Server not responding");
      }
    }
  }

} } catch (err) { msg = err; }

  cookies [fname] = ""; button.innerText = msg;
}
////////////////////

var chkformat = function (q)
{
  if (q > 100 && q <= 432) return 0;
  if (q > 432 && q <= 580) return 1;
  if (q > 580 && q <= 800) return 2;

  return -1;
}
////////////////////

var pixformat = function (q)
{
  if (q == 0 || q == 4) return 360;
  if (q == 1 || q == 5) return 480;
  if (q == 2 || q == 6) return 720;

  return -1;
}
////////////////////

var isdashfmt = function (fmt)
{
  if (fmt == 134) return 0;
  if (fmt == 135) return 1;
  if (fmt == 136) return 2;
  if (fmt == 140) return 8;
  if (fmt == 243) return 4;
  if (fmt == 244) return 5;
  if (fmt == 247) return 6;
  if (fmt == 251) return 9;

  return -1;
}
////////////////////

var argformat = function (fmt)
{
  if (fmt == 18) return 0;
  if (fmt == 19) return 1;
  if (fmt == 22) return 2;
  if (fmt == 37) return 3;
  if (fmt == 43) return 4;
  if (fmt == 44) return 5;
  if (fmt == 45) return 6;
  if (fmt == 46) return 7;

  return -1;
}
////////////////////

var getformat = function (f, fmt)
{
  if (f[0] <= 0 && f[1] <= 0 && f[2] <= 0 && f[3] <= 0)
  {
    if (fmt == 18) fmt = 43;
    if (fmt == 19) fmt = 44;
    if (fmt == 22) fmt = 45;
    if (fmt == 37) fmt = 46;
  }

  if (f[4] <= 0 && f[5] <= 0 && f[6] <= 0 && f[7] <= 0)
  {
    if (fmt == 43) fmt = 18;
    if (fmt == 44) fmt = 19;
    if (fmt == 45) fmt = 22;
    if (fmt == 46) fmt = 37;
  }

  var m = 0, n = fmt;

  if (n == 37) if (f[3]) m = n; else n = 22;
  if (n == 22) if (f[2]) m = n; else n = 19;
  if (n == 19) if (f[1]) m = n; else n = 18;
  if (n == 18) if (f[0]) m = n;

  n = fmt; if (m) return m;

  if (n == 18) if (f[0]) m = n; else n = 19;
  if (n == 19) if (f[1]) m = n; else n = 22;
  if (n == 22) if (f[2]) m = n; else n = 37;
  if (n == 37) if (f[3]) m = n;

  n = fmt; if (m) return m;

  if (n == 46) if (f[7]) m = n; else n = 45;
  if (n == 45) if (f[6]) m = n; else n = 44;
  if (n == 44) if (f[5]) m = n; else n = 43;
  if (n == 43) if (f[4]) m = n;

  n = fmt; if (m) return m;

  if (n == 43) if (f[4]) m = n; else n = 44;
  if (n == 44) if (f[5]) m = n; else n = 45;
  if (n == 45) if (f[6]) m = n; else n = 46;
  if (n == 46) if (f[7]) m = n;

  return m;
}
////////////////////

var fixlist = function (item, doc, state)
{
  var txt = doc.children [item].text.slice (0, -1);
  if (state < 0) txt = txt + '*'; else if (state > 0) txt = txt + '+'; else txt = txt + '-';
  doc.children [item].text = txt;
}
////////////////////

var fixformat = function (f, frame)
{
  var doc = document.getElementById ("fmt" + frame);

  fixlist (0, doc, f[0]); fixlist (1, doc, f[1]); fixlist (2, doc, f[2]);
  fixlist (3, doc, f[4]); fixlist (4, doc, f[5]); fixlist (5, doc, f[6]);

/*
  fixlist (0, doc, f[0]); fixlist (1, doc, f[1]);
  fixlist (2, doc, f[2]); fixlist (3, doc, f[3]);
  fixlist (4, doc, f[4]); fixlist (5, doc, f[5]);
  fixlist (6, doc, f[6]); fixlist (7, doc, f[7]);
*/
}
////////////////////

var no_format = function (frame)
{
  var doc = document.getElementById ("fmt" + frame);

  fixlist (0, doc, -1); fixlist (1, doc, -1); fixlist (2, doc, -1);
  fixlist (3, doc, -1); fixlist (4, doc, -1); fixlist (5, doc, -1);
}
////////////////////

</script>

<!--
////////////////////////////
/// Custom Video Control ///
////////////////////////////
//-->

<!-- This element must be cloned and inserted into a video frame. -->

<div id="video_control" style="display:none">

<div class="v-control">
  <input type=range value=1 min=0 max=1 step=0.01 style="width:490px;margin:2px 2px 6px 2px">
  <button class="v-misc" style="width:48px;margin-right:1px">1.0</button>
  <input type=text style="width:72px;color:azure;background-color:transparent" disabled>
  <input type=text style="width:72px;color:azure;background-color:transparent" disabled>
  <br>
  <span class="play-lft"></span><span></span><span class="play-rgt"></span>
  <span class="t-alpha t-alpha2" style="width:auto">Mute</span>
  <input type=range value=1 min=0 max=1 step=0.05 style="min-width:40px;max-width:196px">
  <span class="t-alpha t-alpha2" style="width:auto">Seek</span>
  <input type=text value="0:0:0" style="width:78px">
  <button class="v-seek" style="width:36px">5s</button>
  <button class="v-seek" style="width:42px">15s</button>
  <button class="v-seek" style="width:36px">1m</button>
  <button class="v-seek" style="width:36px">2m</button>
  <button class="v-seek" style="width:36px">5m</button>
  <button class="v-seek" style="width:42px">10m</button>
  <button class="v-misc" style="width:30px">B</button>
  <button class="v-misc" style="width:30px">S</button>
  <button class="v-misc" style="width:30px">Z</button>
  <span class="t-alpha" style="width:8px;margin-left:1px">F</span>
  <span class="t-alpha" style="width:8px">R</span>
  <span class="t-alpha" style="width:14px">FS</span>
</div>
<span class="v-poster"></span>

<style type="text/css">

.v-poster {
  display: block; position: absolute; top: 0; width: 100%; height: 100%;
  background-position: center; background-size: contain; background-repeat: no-repeat;
  z-index: -1; pointer-events: auto;
}

.v-control {
  position: absolute; bottom: 0; text-align: center;
  width: 100%; margin: 0; padding: 4px 0 4px 0;
  font-family: 'segoe ui', serif;
  font-size: 14px; line-height: 19px;
  background-color: steelblue; cursor: default;
  user-select: none;
}

.v-control span {
  cursor: pointer;
}

.v-control input {
  appearance: none; -moz-appearance: none; -webkit-appearance: none;
  height: 13px; text-align: center; vertical-align: top;
  padding: 1px 3px 1px 3px; margin: 2px 1px 2px 1px;
  border: 1px solid darksalmon; border-radius: 7px;
  color: darkviolet; background-color: lightpink;
  font-family: 'consolas', 'lucida console', monospace;
  font-size: 14px; line-height: 12px;
  user-select: auto; outline: none;
}

.v-control input::-moz-range-thumb {
  -moz-appearance: none; width: 4px; height: 19px;
  background: greenyellow; border: none; border-radius: 0;
}

.v-control input::-webkit-slider-thumb {
  -webkit-appearance: none; width: 4px; height: 19px;
  background: greenyellow; border: none; border-radius: 0;
}

.v-control input::selection {
  color: yellow; background-color: orchid;
}

.v-control button {
  height: 17px; vertical-align: top; margin: 2px 0 2px 0; padding: 0;
  border-style: solid; border-radius: 4px; border-width: 1px 6px 1px 6px;
  outline: none; font-family: 'consolas', 'lucida console', monospace;
  font-size: 14px; line-height: 12px;
  cursor: pointer; outline: none;
}

.v-control button:hover {
  border-color: mediumturquoise;
}

.v-seek {
  border-color: mediumseagreen; color: snow; background-color: mediumslateblue;
}

.v-misc {
  border-color: lightseagreen; color: snow; background-color: mediumpurple;
}

.t-alpha {
  display: inline-block; vertical-align: top;
  padding: 0 3px 1px 3px; margin: 1px 0 0 0;
  color: yellow; background-color: mediumpurple;
}

.t-alpha2 {
  padding: 0 4px 1px 4px; margin: 0 -1px 0 0; font-style: italic;
}

.play-lft {
  display: inline-block; vertical-align: top; width: 2px; height: 16px;
  cursor: pointer; margin: 2px 0 0 2px; border-left: 3px solid greenyellow;
}

.pause-lft {
  border-left-width: 4px; border-color: yellow
}

.play-rgt {
  display: inline-block; vertical-align: top; width: 0; height: 0;
  margin: 2px 1px 0 0; border-style: solid; border-width: 8px 0 8px 7px;
  cursor: pointer; border-color: transparent greenyellow transparent greenyellow;
}

.pause-rgt {
  height: 16px; margin: 2px 3px 0 0; border-width: 0 4px 0 0; border-color: yellow;
}

.anim-bar {
  animation-name: waiting;
  animation-delay: 5s;
  animation-duration: 2.5s;
  animation-fill-mode: both;
  animation-direction: normal;
  animation-timing-function: linear;
  animation-iteration-count: infinite;
}

@keyframes waiting {
   0%  { background-color: lightpink; }
  30%  { background-color: lightpink; }
  70%  { background-color: salmon; }
 100%  { background-color: lightpink; }
}

</style></div>

<script>  // Video control script. NOT inserted into a video frame.

var create_controls = function (vid)
{
  var control = document.getElementById ("video_control");
  control = control.cloneNode (true);

  var doc = vid.ownerDocument;		// document
  var ctr = control.firstElementChild;	// video control
  var sib = ctr.children;		// video control elements

  sib [0].onchange = function() { vid_click (this, 1); }
  sib [8].onclick  = function() { vid_click (this, 2); }
  sib [9].onchange = function() { vid_click (this, 3); }
  sib [10].onclick = function() { vid_click (this, 4); }
  sib [21].onclick = function() { vid_click (this, 5); }
  sib [22].onclick = function() { vid_click (this, 6); }
  sib [23].onclick = function() { vid_click (this, 7); }

  vid.onended      = function() { vid_cntrl (this, 1); }
  vid.onclick      = function() { vid_cntrl (this, 2); }
  vid.onplay       = function() { vid_cntrl (this, 3); }
  vid.onpause      = function() { vid_cntrl (this, 4); }
  vid.onseeking    = function() { vid_cntrl (this, 5); }
  vid.onwaiting    = function() { vid_cntrl (this, 6); }
  vid.onstalled    = function() { vid_cntrl (this, 7); }
  vid.ontimeupdate = function() { vid_cntrl (this, 8); }

  ctr.onmousemove = function(e) { vid_event (e, 0); }
  vid.onmousemove = function(e) { vid_event (e, 1); }
  ctr.onclick     = function(e) { vid_event (e, 2); }

  ctr.onmouseleave = function() { vid_cntrl (vid, 0); }
  ctr.onmouseenter = function() { vid_cntrl (vid, 1); }
  doc.onfullscreenchange = function() { vid_cntrl (vid, 9); }

  ctr = ctr.nextElementSibling; // background <span>
  ctr.onmousemove = function(e) { vid.onmousemove (e); }
  ctr.onclick     = function(e) { vid.onclick (e); }

  sib [0].classList.add ("anim-bar");
  control.style.display = "inline-block";
  vid.checked = 0; vid_scaler (vid, 0, 0, sib);

  doc.body.appendChild (control); vid_resize (vid);
  doc.body.onresize = function() { vid_resize (vid); }
}
////////////////////

var vid_error = function (vid)
{
  var ctr = vid.nextElementSibling.firstElementChild, sib = ctr.children;
  vid.disabled = true; vid_cursor (vid, true); ctr.style.display = "initial";
  sib [0].classList.remove ("anim-bar"); sib [0].style.background = "crimson";
  if (!sib [2].value) sib [2].value = "ERROR"; sib [3].value = "!!!!!";
}
////////////////////

var vid_cntrl = function (vid, mode)
{
  var ctr = vid.nextElementSibling.firstElementChild, sib = ctr.children;
  if (ctr.value == undefined && mode > 2 && mode < 8) return;
  if (vid.disabled && mode > 2 && mode < 9) return;

  var t = vid.currentTime, d = vid.duration;
  if (isNaN (t)) t = 0; if (isNaN (d) || !isFinite (d)) d = 0;
  var z = (t > 0 && d > 0) ? 400 * t / d : 0; z = Math.round (z) * 0.25;

  var no_action = ctr.value == undefined || vid.disabled;
  var got_video = vid.videoWidth && vid.videoHeight;

  if (mode == 0)  // hide
  {
    ctr.disabled = false; if (no_action) return;
    ctr.value = 4; if (vid.paused && got_video) ctr.style.display = "none";
  }
  if (mode == 1)  // show
  {
    ctr.disabled = true; if (no_action) return;
    ctr.value = 0; ctr.style.display = "initial";
  }
  if (mode == 2)  // play/pause
  {
    vid_cursor (vid, true);
    if (vid.paused) vid.play(); else vid.pause();
    if (no_action) vid_external (vid.value, mode); else
      if (!ctr.disabled && !got_video) ctr.style.display = "none";
  }
  if (mode == 3)  // is playing
  {
    vid_external (vid.value, mode); mode = 10;
    // special case of video paused at video start
    if (!ctr.disabled && ctr.value <= 0) ctr.value = 1 - ctr.value;
  }
  if (mode == 4)  // is paused
  {
    vid_external (vid.value, mode); mode = 10;
    // special case of video paused while doing countdown or countup
    if (!ctr.disabled && ctr.value) { ctr.style.display = "none"; ctr.value = 0; }
  }
  if (mode == 5)  // is seeking
  {
    sib [0].style.background = "linear-gradient(90deg, darkorange " + z + "%, orange 0%)";
  }
  if (mode == 6)  // is waiting
  {
    sib [0].style.background = "linear-gradient(90deg, darkorange " + z + "%, orange 0%)";
    setTimeout (function() { vid_timer (vid, ctr, t); }, 2000);
  }
  if (mode == 7)  // is stalled
  {
    sib [0].style.background = "linear-gradient(90deg, deeppink " + z + "%, hotpink 0%)";
    setTimeout (function() { vid_timer (vid, ctr, t); }, 2000);
  }

  if (mode == 8)  // time update
  {
    if (t == vid.checked) return; vid.checked = t;
    var v = ctr.value, ts = Math.round (t), ds = Math.round (d);
    var th = Math.trunc (ts / 3600), dh = Math.trunc (ds / 3600); ts -= th * 3600; ds -= dh * 3600;
    var tm = Math.trunc (ts / 60), dm = Math.trunc (ds / 60); ts -= tm * 60; ds -= dm * 60;

    sib [0].style.background = "linear-gradient(90deg, skyblue " + z + "%, transparent 0%)";
    sib [2].value = th + ":" + (tm < 10 ? "0" : "") + tm + ":" + (ts < 10 ? "0" : "") + ts;
    sib [3].value = dh + ":" + (dm < 10 ? "0" : "") + dm + ":" + (ds < 10 ? "0" : "") + ds;

    if (v != undefined) v = v * 1; else
    {
      v = (vid.paused || ctr.disabled) ? -5 : 6;
      mode = 10; sib [0].classList.remove ("anim-bar");
    }
    if (v > 0 && !--v) { if (got_video) ctr.style.display = "none"; v = -5; }
    if (v < 0 && !++v) vid_cursor (vid, false); ctr.value = v;
  }

  if (mode == 9)  // fullscreen change
  {
    var fs = vid.ownerDocument.fullscreen;
    if (!no_action) { ctr.value = -8; ctr.disabled = false; ctr.style.display = "none"; }
    //sib [23].style.outline = fs ? "1px solid pink" : "none";
  }

  if (mode == 10)
  {
    if (!vid.paused)
      { sib [5].classList.add ("pause-lft"); sib [7].classList.add ("pause-rgt"); } else
      { sib [5].classList.remove ("pause-lft"); sib [7].classList.remove ("pause-rgt"); }
  }
}
////////////////////

var vid_timer = function (vid, ctr, time)  // catch wait/stall false flags
{
  if (vid.currentTime == time)
  {
    if (!ctr.disabled) ctr.value = 4; ctr.style.display = "initial";
  }
}
////////////////////

var vid_cursor = function (vid, mode)
{
  var style = mode ? "default" : "none"; if (vid.disabled) style = "default";
  vid.style.cursor = vid.nextElementSibling.children [1].style.cursor = style;
}
////////////////////

var vid_external = function (param, mode)
{
  var frame = param.split("|")[0] * 1; if (frame) popper (frame, mode == 2 ? 1 : mode);
}
////////////////////

var vid_click = function (item, mode)
{
  var min_vt = 0, ctr = item.parentNode, vid = ctr.parentNode.previousElementSibling;

  if (mode == 1)
  {
    var t = vid.duration * item.value; if (isNaN (t) || !isFinite (t)) return;  // Nov. 2022
    if (t < min_vt) t = min_vt; vid.currentTime = t; ctr.children [11].value = t.toFixed(2);
  }

  if (mode == 2) item.style.outline = (vid.muted = !vid.muted) ? "1px solid pink" : "none";

  if (mode == 3) { var m = vid.muted; vid.muted = true; vid.volume = item.value; vid.muted = m; }

  if (mode == 4)
  {
    var v = ctr.children[11].value.split (":"), i, j = v.length; if (!j) return;
    var t = v[0][0]; if (t == "-") t = -1; else if (t == "+") t = 1; else t = 0;
    if (t) v[0] = v[0].substr(1);

    i = v[j-1] * 1; if (j > 1) i += v[j-2] * 60; if (j > 2) i += v[j-3] * 3600;
    if (t) { i *= t; i += vid.currentTime; }

    if (i < min_vt) i = min_vt; if (i > vid.duration) i = vid.duration; vid.currentTime = i;
  }

  if (mode == 5) vid_rotate (vid, ctr.children, 1);

  if (mode == 6) vid_rotate (vid, ctr.children, 2);

  if (mode == 7) if (vid.ownerDocument.fullscreen || vid.ownerDocument.fullscreenElement)
    vid.ownerDocument.exitFullscreen(); else vid.parentNode.requestFullscreen();
}
////////////////////

var vid_event = function (event, type)
{
  var min_vt = 0, item = event.target, node = item.nodeName;

  if (type == 1)
  {
    if (node != "VIDEO") item = item.parentNode.previousElementSibling;

    var ctr = item.nextElementSibling.firstElementChild;
    vid_cursor (item, true); if (ctr.value == undefined) return;

    var h = item.step, e = event.clientY, s = ctr.step * ctr.checked;
    h = (h % 10) & 2 ? item.clientWidth : item.clientHeight;
    if (s < 0) { h += s; s /= -2; } else { h -= s; s = 0; }

    if (ctr.value <= 0) ctr.value = -8; if (e > h || e < s) vid_cntrl (item, 1);
  }
  if (type != 2 || node == "DIV") return;

  var ctr = item.parentNode, vid = ctr.parentNode.previousElementSibling;

  if (node == "SPAN")
  {
    var cls = item.classList; if (cls) cls = cls [0];
    if (cls && cls.substr (0,5) == "play-") vid_cntrl (vid, 2);
  }
  if (node != "BUTTON") return;

  var a = item.offsetLeft, b = item.offsetWidth / 2;
  var c = Math.abs (ctr.step), d = ctr.clientWidth / 2;

  var dir = (event.clientX < (a + b - d) * c + d) ? -1 : 1;
  var txt = item.innerText, speed = txt * 1;

  if (speed)
  {
    speed += dir * 0.1; if (speed > 0.4) speed += dir * 0.1;
    if (speed > 2) speed += dir * 0.3; if (speed < 0.1) speed = 0.1; if (speed > 5) speed = 5;
    item.innerText = speed.toFixed(1); vid.playbackRate = speed; return;
  }

  if (txt == "B") { vid_filter (vid, dir, 0); return; }
  if (txt == "S") { vid_filter (vid, dir, 1); return; }
  if (txt == "Z") { vid_scaler (vid, dir, 5); return; }

  if (txt == "5s" ) dir *= 5;
  if (txt == "15s") dir *= 15;
  if (txt == "1m" ) dir *= 60;
  if (txt == "2m" ) dir *= 120;
  if (txt == "5m" ) dir *= 300;
  if (txt == "10m") dir *= 600;

  if ((dir += vid.currentTime) < min_vt) dir = min_vt;
  vid.currentTime = dir > vid.duration ? vid.duration : dir;
}
////////////////////

var vid_resize = function (vid)
{
  var i, j = 0, k, h, w = vid.step % 10;

  var sib = vid.ownerDocument, fs = sib.fullscreen || sib.fullscreenElement;
  var ctr = vid.nextElementSibling.firstElementChild; sib = ctr.children;

  h = w & 2 ? vid.clientWidth : vid.clientHeight;
  w = w & 2 ? vid.clientHeight : vid.clientWidth;

  if (h <= 0 || w <= 0) return;  // looks like window is not ready

  // Dec. 2022 - this.hh & this.ww changed to vid.hh & vid.ww

  if (ctr.checked)  // block unnecessary calls
  {
    if (!vid.ww) vid.ww = 0; if (!vid.hh) vid.hh = 0;
    if (Math.abs (h - vid.hh) < 3 && Math.abs (w - vid.ww) < 3) return;
  }
  vid.ww = w; vid.hh = h;

  h = fs ? 9 : Math.round (h * 10 / screen.height) - 2;
  if (h < 5) h = 4; ctr.checked = 45 + h; ctr.style.paddingBottom = h + "px";
 
  if (w > 960) { h = w / 960; w = 960; } else h = 1;
  ctr.step = fs ? -h : h; ctr.style.transform = "scale(" + h + ")";
  ctr.style.transformOrigin = "bottom center";

  sib [0].style.width = (w - 246) + "px";
  sib [0].style.minWidth = (w > 260 && w < 380 ? w - 192 : 68) + "px";
  sib [1].style.display = w < 380 ? "none" : "inline-block";

  var sizes = [0,0,0,0,0,0,0,0,0,0,34,88,36,42,36,36,36,42,30,30,30,0,0,0];
  var scale = [0,0,0,0,0,0,0,0,0,0, 6, 6, 8, 7, 5, 2, 4, 1, 3, 3, 3,0,0,0];
  var block = [632,0,0,0,0,0,0,0,0];

  for (i = 0; i < sib.length; i++) if (k = scale [i]) block [k] += sizes [i] + 4;
  if ((w -= block [0]) < 80) for (j = 1; j < block.length; j++) if ((w += block [j]) >= 80) break;
  if (j > 5) for (i = 5; i > 3; i--) if (w - block [i] > 80) { w -= block [i]; block [i] = 0; }
  sib [9].style.width = w + "px";

  for (i = 0; i < sib.length; i++) if (k = scale [i])
    sib [i].style.display = (!block [k] || j < k) ? "inline-block" : "none";
}
////////////////////

var vid_rotate = function (vid, sib, mode)
{
  var s = vid.step * 1, v = vid.value.split ("|"), a = v[1] / 100, b = v[2] / 100;
  if (mode == 1) s ^= 1; if (mode == 2) s += 2; s = s & 7; vid.step = s;
  v = "scale(" + (s & 1 ? -a : a) + "," + (a * b) + ")";

  vid.style.transform = "rotate(" + ((s >> 1) * 90) + "deg) " + v;

  if (sib) sib [21].style.outline = s & 1 ? "1px solid pink" : "none";
  if (sib) sib [22].style.outline = s > 1 ? "1px solid pink" : "none";

  if (s & 2)
  {
    vid.style.top = "calc(50vh - 50vw)";
    vid.style.left = "calc(50vw - 50vh)";
    vid.style.width = "100vh";
    vid.style.height = "100vw";
  }
  else
  {
    vid.style.top = vid.style.left = "0";
    vid.style.width = vid.style.height = "100%";
  }
}
////////////////////

var vid_filter = function (vid, dir, mode)
{
  var n, s, con, lvl, sat, filter = vid.style.filter;

  if (!filter) lvl = sat = 1; else
  {
    if ((n = filter.indexOf ("brightness")) < 0) lvl = 1; else
      { s = filter.substr (n + 11); s = s.substr (0, s.indexOf (")")); lvl = s * 1; }
    if ((n = filter.indexOf ("saturate")) < 0) sat = 1; else
      { s = filter.substr (n + 9); s = s.substr (0, s.indexOf (")")); sat = s * 1; }
  }

  sat = sat / (3 - lvl) * 2; if (mode) sat += dir * 0.1; else lvl += dir * 0.05;
  if (lvl < 0) lvl = 0; if (sat < 0) sat = 0; if (lvl > 2) lvl = 2; if (sat > 2) sat = 2;

  sat = sat * (3 - lvl) / 2; con = (2 - lvl * (3 - lvl)) * (2.5 - sat) + 1;
  lvl = lvl.toFixed (3); con = con.toFixed (3); sat = sat.toFixed (3);

  vid.style.filter = "brightness(" + lvl + ") contrast(" + con + ") saturate(" + sat + ")";
}
////////////////////

var vid_scaler = function (vid, dir, scale, sib)
{
  var c, s = vid.step, v = vid.value; s = s ? s * 1 : 0; if (!v) v = "";

  if (!scale)
  {
    c = s % 10; scale = (s - c) / 10; if (!scale) scale = 100;
    s = dir = 0; vid.step = c; v = v + "||100";
  }

  v = v.split ("|"); c = scale; s = dir && (s & 1) ? 2 : 1;
  if (dir) c = v[s] * 1 + dir * scale; if (c < 25) c = 25; if (c > 200) c = 200;
  v[s] = c; vid.value = v.join ("|"); vid_rotate (vid, sib, 0);
}
////////////////////

var vid_poster = function (vid, name)
{
  vid.nextElementSibling.children[1].style.backgroundImage = "url('" + name + "')";
}
////////////////////

</script>

</body></html> 
