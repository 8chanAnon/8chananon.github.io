<!DOCTYPE html><html><head>

<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="referrer" content="no-referrer">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
<link rel="icon" href="launch-8kun.ico">
<base target="_blank">

<title>8kun Launcher</title>

<style type="text/css">

body {
  text-align: center;
  font-size: 16px; line-height: 19px;
  font-family: 'times new roman', serif;
  color: brown; background-color: navajowhite;
}

body.bread {
  margin: 0; font-size: 13px; line-height: 16px;
  font-family: 'verdana', 'helvetica', sans-serif;
  color: #083078; background-color: navajowhite;
  pointer-events: none; overflow-y: scroll;
}

body.postoffice {
  margin: 0; font-size: 13px; line-height: 17px;
  font-family: 'verdana', 'helvetica', sans-serif;
  color: green; background-color: navajowhite;
}

hr {
  border-color: orange; border-style: solid;
}

ul {
  padding: 0 1em 0 1em; list-style: square;
}

li {
  margin: 5px 0 5px 0;
}

input[type=text] {
  height: 17px; font-size: 16px; outline: none;
  font-family: 'consolas', 'lucida console', monospace;
  border-width: 2px; border-style: solid;
  border-color: tan lemonchiffon lightyellow burlywood;
  padding: 3px 5px 3px 5px; caret-color: navy;
  color: firebrick; background-color: seashell;
}

input[type=radio] {
  vertical-align: bottom; margin: 0 1px 3px 2px;
  filter: contrast(1.2) brightness(1.2) opacity(85%);
}

input[type=checkbox] {
  vertical-align: bottom; margin: 0 2px 3px 1px;
  filter: contrast(1.2) brightness(1.2) opacity(80%);
}

input.small {
  height: 12px; font-size: 14px; text-align: center; padding: 3px 1px 2px 1px;
}

input.static {
  font-family: 'times new roman', serif; text-align: center; 
  padding: 3px 7px 3px 7px; border: 2px solid burlywood;
  color: red; background-color: cornsilk;
}

button {
  width: auto; height: auto;
  font-size: 15px; line-height: 19px;
  padding: 1px 6px 0 6px; margin: 0;
  font-family: 'helvetica', sans-serif;
  color: darkblue; background-color: powderblue;
  outline: none; border-color: #e8e8e8 #9c9c9c #9c9c9c #ececec;
}

button:hover:active {
  border-color: #a8a8a8 #f8f8f8 #f4f4f4 #acacac;
}

button.pink {
  background-color: pink; padding: 1px 8px 0 8px;
}

a:link {
  color: blue;
}

a:visited {
  color: green;
}

p.listbox {
  display: inline-block; vertical-align: top;
  text-align: left; margin: -3px 2px 0 2px;
}

.command p {
  display: inline-block; vertical-align: top;
  text-align: center; line-height: 27px; margin: -15px 4px 0 4px;
}

.command input[type=text] {
  width: 300px;
}

.command input[type=checkbox] {
  width: auto; margin-bottom: 7px;
}

.command button {
  width: 100px;
}

span.status {
  display: block; position: sticky; top: 0;
  padding: 4px 0 4px 0; margin: 0 3px 1px 3px; height: 22px;
  text-align: center; font-size: 15px; line-height: 22px;
  border: 1px solid chocolate; border-top-width: 0;
  color: blue; background-color: pink;
}

.status p {
  display: inline-block; max-width: calc(100vw - 440px); margin: 0;
  text-overflow: ellipsis; font-style: italic; vertical-align: top;
  overflow: hidden; white-space: nowrap; word-break: break-all;
}

.status span {
  vertical-align: top;
}

span.status1 {
  float: left; width: 44px; margin-left: 4px;
  border-radius: 3px; background-color: silver;
}

span.status2 {
  float: right; width: 44px; margin-right: 4px;
  border-radius: 3px; background-color: silver;
}

span.status3 {
  display: inline-block; position: sticky; top: auto; bottom: 60px;
  left: 0; right: 0; margin: auto; padding: 10px;
  width: 600px; max-width: calc(100vw - 100px);
  border: 2px solid hotpink; border-radius: 10px;
  font-size: 16px; line-height: 21px;
  color: mediumblue; background-color: snow;
}

span.status4 {
  display: block; position: fixed; width: 550px; height: auto;
  top: 80px; bottom: auto; padding: 8px 10px 5px 10px;
}

span.status5 {
  width: 300px; bottom: 200px; font-family: 'verdana', 'helvetica', sans-serif;
}

span.postbox {
  display: inline-block; width: calc(100% - 12px); text-align: left;
  padding: 0 2px 4px 2px; margin: 0 3px 1px 3px; border: 1px solid peru;
  white-space: pre-wrap; word-wrap: break-word;
  overflow: hidden; vertical-align: middle;
}

p.header {
  margin: 0 0 2px 0; padding: 5px 8px 6px 15px; text-indent: -6px;
  border-bottom: 1px solid goldenrod; background-color: cornsilk; 
}

p.subject {
  margin: -2px 0 2px 0; padding: 3px 6px 4px 6px; font-weight: bold;
  color: blue; border-bottom: 1px solid peru;
}

.icon {
  float: right; font-size: 17px; color: indianred; padding-left: 12px;
}

.font1 {
  min-height: 30px; line-height: 1.2em; margin: 0 6px;
  font-size: 1em; font-family: 'verdana', sans-serif;
}

.font2 {
  min-height: 30px; line-height: 1.2em; margin: 0 6px;
  font-size: 1.05em; font-family: 'helvetica', sans-serif;
}

.font3 {
  min-height: 30px; line-height: 1.1em; margin: 0 6px;
  font-size: 1.175em; font-family: 'times new roman', serif;
}

.header a:link, .font1 a:link, .font2 a:link, .font3 a:link {
  color: firebrick; padding: 0 1px;
}

.header a:visited, .font1 a:visited, .font2 a:visited, .font3 a:visited {
  color: darkcyan;
}

a.reply:link, a.reply:visited {
  float: right; text-decoration: none; padding: 0;
  width: 8px; height: 12px; margin: 1px -3px 0 6px;
  border-style: solid; border-width: 2px; border-radius: 5px;
  border-color: lightpink; background-color: transparent;
}

a.moderate:link, a.moderate:visited {
  float: right; text-decoration: none; padding: 0;
  width: 7px; height: 10px; margin: 2px 0 0 6px;
  border-style: solid; border-width: 2px; border-radius: 5px;
  border-color: lightskyblue; background-color: transparent;
}

a.in-visited:link, a.in-visited:visited {
  color: darkcyan;
}

a.in-posted:link, a.in-posted:visited {
  color: yellow; background-color: violet;
  text-decoration: none; margin: 1px 0;
}

p.in-sliced {
  background-color: lavenderblush;
}

span.in-sliced {
  background-color: gainsboro; border-color: darkseagreen;
}

span.is-deleted {
  background-color: pink;
}

.body-line {
  margin: 0; padding: 0;
}

.empty {
  padding-bottom: 8px;
}

.blank {
  margin: 5px 0 0 0;
}

.quote {
  color: teal;
}

.rquote {
  color: deeppink;
}

.ltr {
  direction: ltr;
}

.rtl {
  direction: rtl;
}

.spoiler {
  padding: 0 2px; margin-top: 1px; color: pink; background-color: pink;
}

.spoiler:hover {
  color: firebrick;
}

span.heading {
  color: mediumvioletred; font-weight: bold;
}

span.red-padding {
  padding: 0 4px 0 4px;
}

span.small {
  color: darkviolet;
}

pre.prettyprint {
  margin: 0; padding: 0; width: 100%; max-height: 50vh; overflow: auto;
}

img {
  vertical-align: top; background-color: goldenrod; border: none; outline: none;
}

div.imgbox {
  text-align: center; line-height: 0; padding: 0; margin: 0;
}

div.left {
  float: left; margin: 0 10px -4px 5px;
}

div.right {
  float: right; margin: 0 5px -1px 10px;
}

div.multi1 {
  margin: 0 0 -3px 0;
}

div.multi2 {
  margin: 0 0 2px 0; border-bottom: 2px solid goldenrod;
}

span.image {
  display: inline-block; vertical-align: top; margin: 2px 0 4px 0;
}

span.banner {
  display: block; font-weight: bold;
  line-height: 10px; padding: 4px 0 5px 0;
  color: white; text-decoration: none !important;
}

span.banner_red {
  border-top: 1px solid darksalmon; background-color: crimson;
}

span.banner_green {
  border-top: 1px solid mediumseagreen; background-color: forestgreen;
}

span.banner_blue {
  border-top: 1px solid dodgerblue; background-color: royalblue;
}

a.banner {
  text-decoration: none;
}

textarea {
  box-sizing: border-box; resize: none;
  vertical-align: top; white-space: pre-wrap; outline: none;
  font-size: 13px; font-family: 'verdana', 'helvetica', sans-serif;
  caret-color: maroon; border: 2px solid burlywood;
  color: mediumblue; background-color: snow;
}

div.overlay {
  display: none; position: fixed; top: 30px; left: 10vw;
  width: calc(80vw - 6px); height: auto; text-align: center;
  font-size: 17px; line-height: 22px; font-family: 'times new roman', serif;
  border: 3px solid darkgoldenrod; border-top-width: 1px; padding: 1px;
  color: green; background-color: lightgoldenrodyellow;
}

.overlay div {
  padding: 9px 3px; margin: 7px 0;
  height: auto; background-color: burlywood;
}

.overlay button {
  margin: 0 3px 0 3px; padding: 1px 12px 0 12px;
  border: 1px solid darksalmon; border-radius: 15px;
  color: darkviolet; background-color: wheat;
}

.overlay button:hover:active {
  border-color: chocolate;
}

.overlay input {
  margin: 0 3px 0 3px; padding: 1px 7px 2px 7px;
  border: 1px solid darksalmon; border-radius: 10px;
  font-family: 'verdana', 'helvetica', sans-serif;
  font-size: 13px; vertical-align: top;
}

.overlay2 span {
  display: inline-block; position: relative;
  width: 255px; height: 271px; margin: 0 1px 0 0;
  vertical-align: top; border: 2px solid burlywood;
}

.overlay2 img {
  width: auto; height: auto; margin: auto;
  max-width: 255px; max-height: 250px;
  background-color: transparent;
}

.overlay2 p {
  position: absolute; bottom: 0; width: calc(100% - 10px); height: 20px;
  margin: 0; padding: 0 5px; text-align: center; font-size: 15px;
  border-top: 1px solid burlywood; cursor: default; text-overflow: ellipsis;
  word-break: break-all; overflow: hidden; white-space: nowrap;
}

.overlay2 textarea {
  margin: 0 0 0 1px; padding: 1px 5px;
  width: calc(100% - 277px); height: 275px;
}

div.editor {
  display: inline-block; font-family: 'times new roman', serif;
}

.editor input[type=text] {
  margin: 0 6px 0 6px; padding: 1px 7px 2px 7px;
  border: 1px solid darksalmon; border-radius: 10px;
  font-size: 13px; font-family: 'verdana', 'helvetica', sans-serif;
}

.editor input[type=checkbox] {
  margin-bottom: 4px;
}

.editor span {
  display: block; position: relative;
  box-sizing: border-box; vertical-align: top;
  width: 142px; height: calc((100vh - 100px) / 5);
  margin: 0 0 2px 0; border: 1px solid darksalmon;
}

.editor img {
  width: auto; height: auto; margin: auto;
  max-width: 100%; max-height: calc(100% - 18px);
  background-color: transparent;
}

.editor p {
  position: absolute; bottom: 0;
  width: calc(100% - 10px); height: 17px;
  margin: 0; padding: 0 5px; text-align: center;
  border-top: 1px solid burlywood; cursor: default; text-overflow: ellipsis;
  word-break: break-all; overflow: hidden; white-space: nowrap;
}

.editor textarea {
  display: block; margin: 0 0 8px 0; padding: 1px 5px;
  width: calc(100vw - 172px); height: calc(100vh - 92px);
  border: 1px solid darksalmon;
}

div.captcha {
  display: none; position: fixed; top: 10px; left: 10px;
  width: calc(100% - 20px); height: calc(25vw + 165px);
  box-sizing: border-box; text-align: center; padding: 12px;
  font-size: 17px; line-height: 22px; font-family: 'times new roman', serif;
  border: 3px solid darkgoldenrod; border-radius: 10px;
  background-color: mistyrose;
}

.captcha img {
  width: 75vw; height: 25vw; margin: 12px 0 15px 0; background-color: gray;
}

.captcha span {
  display: inline-block; width: 200px; height: 33px; font-size: 22px; line-height: 33px;
  font-style: italic; font-weight: bold; font-family: 'helvetica', sans-serif;
  border-radius: 16px; background-color: rosybrown; color: lightyellow;
}

.captcha button {
  color: darkgreen; background-color: pink;
}

button.cap_login {
  color: firebrick; background-color: mistyrose;
}

::selection {
  color: yellow; background-color: orchid;
}

r_ { color: crimson; }
g_ { color: green; }
b_ { color: blue; }
w_ { color: firebrick; }
x_ { color: blueviolet; }
y_ { color: fuchsia; }
n_ { }

</style></head>

<body onload="javascript:startup()" onunload="javascript:say_worker()">

<h1 style="margin:20px 0 25px 0"><g_>8kun</g_> <r_>Bread Launcher</r_> <g_>v3x</g_></h1>

<g_>Enter URL:</g_>&nbsp; <input type=text id="url" size=55 style="margin-bottom: 5px"
  onclick="javascript:input_onclick('url')" onblur="javascript:input_onblur('url')"> &nbsp;
  <button onclick="javascript:fetchpost()">Go</button> &nbsp;
  <button onclick="javascript:playvideo()">Play Video</button>
<p>

<p class="listbox" style="margin-right:15px">
<r_>Time Offset:</r_> &nbsp;<input type=text class="small" maxlength=5 style="width:48px" value="0">
</p>

<p class="listbox" style="margin-right:15px;text-align:center">
<g_>HTML <input type=radio name="html-json" value="0" checked> &nbsp;
JSON <input type=radio name="html-json" value="1"></g_><br>
<g_>Board Moderator</g_> <input type=checkbox name="moderator" value="1"><br>
<!-- <g_>Tor Onion Post</g_> <input type=checkbox name="onion" value="1"> -->
</p>

<p class="listbox">
<r_>Pick a proxy:</r_>
</p>

<p class="listbox">
<input type=radio name="proxy" value="LOCAL" checked> Kraker Local Proxy Server<br>
<input type=radio name="proxy" value="!https://kraker-remote.vercel.app/?url="> kraker-remote.vercel.app<br>
<!-- <input type=radio name="proxy" value="https://api.allorigins.win/raw?url="> api.allorigins.win<br> -->
<input type=radio name="proxy" value=""> None<br>
</p>

<p><a class="ref" href="https://8kun.top/alleycat/res/10.html">Your feedback is appreciated</a>
&nbsp;|&nbsp; <a href="#help" target=_self>Instructions</a>
&nbsp;|&nbsp; <a href="#bake" target=_self>QR Baker Hints</a>
&nbsp;|&nbsp; <a href="#proxy" target=_self>Kraker Control Panel</a>
&nbsp;|&nbsp; <a href="javascript:cap_login(1)" target=_self>Moderator Login</a>

<p><hr><p>

<g_>Font:</g_>&nbsp;
<input type=radio name="font" value="font1" checked> Verdana &nbsp;
<input type=radio name="font" value="font2"> Helvetica &nbsp;
<input type=radio name="font" value="font3"> Times New Roman &nbsp; &nbsp;

<g_>Page width:</g_>&nbsp;
<input type=radio name="width" value="" checked> 100% &nbsp;
<input type=radio name="width" value="90%"> 90% &nbsp;
<input type=radio name="width" value="75%"> 75% &nbsp;
<input type=radio name="width" value="60%"> 60%

<p><hr><p>

<big><b_>Alleycat Player</b_> Remote Viewer:&nbsp;
<input type=radio name="viewer" value="1"> 1
<input type=radio name="viewer" value="2"> 2
<input type=radio name="viewer" value="3" checked> 3
</big>

<p><hr><p><div style="text-align:left;color:maroon">

<b>Release notes for v3x (unofficial release)</b>
<p>
Just a few quick notes because this is not an official version. I have implemented a new remote proxy server based on
Kraker. This allows the app to work without installing a local proxy. It works quite nicely because the Launcher does
not require streaming support from the proxy (unlike Alleycat Player). Scroll down to the Video Player section for more.
<p>
This app is broken into modules for improved browser compatibility. There are three modules for loading breads, for
media support and for moderator login. The media support includes support for reading Twitter threads. I don't feel
like writing documentation for that right now. Just put a Twitter link in the URL input and press Go. You can enter
a full URL or just the tweet number.
<p>
Have fun and please be kind enough to provide feedback on my Alleycat board.

<p><hr><p>

<a href="https://8chananon.github.io/Alleycat-Player/archive/launcher/notes-v1b-v2e.htm"
  >Release notes for versions 1b to 2e</a><br>

<p><hr><p id="help">

<b><b_>Introduction</b_></b>
<p>
The <g_>8kun Bread Launcher</g_> is an app for reading threads on the free speech web site <g_>8kun.top</g_> without the
speed drawbacks of the site's normal client. Improved handling of images, headers and text makes for a sharper and more
customizable appearance. The term "bread" is not a synonym for "thread" but I like the sound of "Bread Launcher" so I'm
using my creative license.
<p>
This app, while it is quick, gets most of its speed advantage by allowing you to retrieve an individual post and its replies
instead of the entire thread (which is a capability not supported by the current 8kun client). Threads are also kept
in cache (memory) to reduce the need to access the site. There is no mouse hover functionality so reply
links must be clicked on and viewed in a new tab.
<p>
To access 8kun, you need a URL with or without the domain name. The ".html" extension is not required. Examples are below.
If you wish to see a specific post, then append "#" and the post number. To view a thread beginning at a certain post,
append "$" and the post number. To view a board catalog, just type the name of the board. <b>Note:</b> do not close the
Launcher while daughter tabs are still open because they link to the code inside the Launcher.
<p>
Full URL: <g_>https://8kun.top/alleycat/res/10.html</g_> &nbsp;
Partial URL: <g_>/alleycat/res/10</g_> &nbsp; Catalog: <g_>alleycat</g_>
<p>
If you are not familiar with the need for a proxy server, then please refer to the Alleycat Player installation instructions
<a class="ref" href="https://8chananon.github.io/Alleycat-Player/current/installation-v1.htm">here</a>
for an explanation. The most reliable way to use this app is to install the local proxy server. The remote proxy server
currently running as a Vercel cloud application is intended for those users who cannot install the local proxy or as
a backup when you need to access 8kun while you are away from your machine.

<p><hr><p>

<b><b_>The Menu Options</b_></b>
<p>
To access the bread options menu, click on the status bar at the top. These are the options:
<ul><li>
<b>Update</b> - refresh the page with new posts
</li><li>
<b>Reset</b> - reset the post counter to zero (this value appears in the window title)
</li><li>
<b>Go Live / End Live</b> - starts or ends auto-updating. The window title will show the number of new posts loaded,
the number of posts loaded in total and the current time base (which depends on posting frequency). Only one
auto-update session is permitted per thread. Slices in the same thread are included in the auto-update.
</li><li>
<b>Mark / Restore</b> - marks or restores your current position on the page. This is useful if you wish to explore
the thread and then return to your current position.
</li><li>
<b>Post Office</b> - opens the Post Office in a new tab (instructions below).
</li><li>
<b>Quick Reply</b> - opens a reply box to reply to the thread. You are permitted one image or file. You can
also embed from Youtube and other sites. There is an input for a name and a text area for your message. When you press
the Reply button, your post will be submitted and a progress bar will appear near the bottom of the screen to report
on the progress.
</li></ul>
In a Slice tab, only the Post Office and Quick Reply options are available.

<p><hr><p>

<b><b_>Hints on Posting</b_></b>
<ul><li>
The 8kun captcha has gone away but, in times of stress, you may be required to use a Proto Pass (get it
<a href="https://shop.isitwetyet.com/p/proto-membership">here</a>). To activate your Proto Pass, type your email address
and password (<g_>**email_address**proto_password</g_>) in the URL input line and press Go.
</li><li>
There is a button at the right side of each post header. Click this to open the Quick Reply box while adding the
post number to the text input.
</li><li>
You can add an image to your reply and the chosen image will appear in the reply box. The supported formats are:
jpg, jpeg, png, gif. You can also attach the following file types: mp4, webm, pdf. Non-image files have
no associated thumbnail but the file name will be shown.
</li><li>
There is limited space for the file name so a long name will be truncated. To see the full name, hover your mouse
over the file name box.
</li><li>
A progress bar will appear when you hit the Reply button. It will disappear once the post submission has completed.
If an error is returned by the server, the bar will remain on the screen but you can click on it to hide it.
</li><li>
The Clear button will clear the input fields except for the Name field. The Copy button will copy the text
inside the text area.
</li><li>
If you post a reply from a Slice tab, it is safe to close the tab while your post is being submitted. This is not
recommended since the Bread Launcher will be unable to notify you of a posting failure.
</li></ul>

<p><hr><p>

<b><b_>The Post Office</b_></b>
<ul><li>
When you first open the Post Office, it will be tied to the thread that you opened it from. You can open the menu by
clicking on the status bar at the top. You can prepare up to 6 posts in a single instance of the Post Office. Each
post can have up to 5 images/files (this may be restricted to a lesser number by the board owner).
</li><li>
The Clear and Copy buttons work the same as in a Quick Reply box.
</li><li>
The current thread number can be changed by entering the number in the input line and pressing Change. The Launcher
does not verify that the thread number is correct. You will be notified by the server if you try to post. You can test
the thread number by sending a blank post.
</li><li>
You can create a new thread with the New Thread button. Caveat: this will not work if the board requires a captcha to
create a thread. When the new thread has been created, the Post Office will be tied to it and additional posts will go
to that thread.
</li></ul>

<p><hr><p>

<b><b_>Video Player</b_></b>
<p>
A special feature is available for viewing videos via Alleycat Player. In order for this to work, both apps must be
opened in the same domain (due to browser restrictions). Each app loads a small Javascript shared worker which allows
the Bread Launcher to send commands to Alleycat Player. Select one of the three Alleycat viewers and prepare your
options in that viewer. It is best to configure the player to open the video in a popup.
<p>
Chrome-based browsers present two potential problems. Autoplay should work if you configure your browser to allow it but
some Chrome versions (Brave, for example) may be stubborn about it. Also, the Chrome browsers that I have tested
disallow focusing an already opened popup (this is stupid but I think it has to do with the fact that the user action
occurs in a tab that is not the tab which wants to operate the popup). For this reason, the popup will be destroyed on
each iteration. If you wish to keep the popup open beside your browser window then check the "No Play" option in the
Alleycat viewer.
<p>
To play a video in Alleycat Player, click on the red or green banner below the embed thumbnail. This capability is
not implemented for videos with a blue banner. Instead, click on the thumbnail to play the embedded video in a new tab.
These are the currently supported sites: YouTube, BitChute, Rumble, Vimeo and Twitter. You can also open videos from
the URL input, including mp3, mp4, webm, m3u8 and mpd.
<p>
If you are using the Kraker remote proxy server, there are some limits on YouTube videos. Some videos will not play
due to an IP address mismatch (the proxy server IP is different from yours). Also, the DASH format will be unavailable.
<p>
<b>Special note about YouTube livestreams</b>
<p>
It may take three to four hours for YouTube to move a finished livestream to VOD (video on demand) status. Until that happens,
only the last minute of an ended livestream will be viewable. This is a known issue with Alleycat Player.

<p><hr><p id="bake">

<b><b_>Hints on Baking with the Launcher</b_></b>
<p>
This is not a general lesson on baking. Only issues relevant to the <g_>8kun Bread Launcher</g_> are discussed here.
You should already be thoroughly familiar with the features of the Launcher. If you are not, then go practice for
a while before attempting to bake.
<p>
The first step to baking is to retrieve the dough for the current bread (which should already be open in the
Launcher). Copy the dough from the upload site to a text editor (Notepad works fine). Open the Post Office and copy
each section from the dough to a post. The first post is the intro which seldom changes from bread to bread. Add an
image or YouTube link to the post. The second post may be the globals or the tool links. Not all bakers post the
globals and it may be missing from the current dough. The next few posts will contain the notables.
<p>
At this point, you have the posts prepared in the Post Office and you will begin scanning the current bread for notables.
It is advisable to not get too far ahead with the notables since you want to also monitor the replies. Anons may
want to warn about the credibility of a potential notable or supply additional information. You should be making
liberal use of the Launcher's slicing feature to open a notable post and check for replies. Auto-update should
be enabled for the bread so that any Slices will also auto-update (you can update manually if you prefer).
If you are uncertain about a potential notable, then leave the Slice open for a while to collect replies.
<p>
The Quick Reply box in the main bread tab should be used to collect the notables. To collect a notable, open the post in
a Slice, gather the information in the Quick Reply box (including any anon replies that may be helpful) and then copy the
information to your main reply box (this is why there is a Copy button). Close the Slice if you're done with it.
From time to time, you should copy your collected notables to the dough and save the dough file just in case you have
a system failure. Also, you will at certain points post your collected notables to the bread to inform the anons of
your progress. Before you post, copy the notables to your dough. After the post has been submitted, don't forget
to re-open the Quick Reply box and paste your notables back in (because, unlike the Post Office, there is no option
to prevent auto-clear).
<p>
When the bread is nearly full, begin preparing for the next bread. Complete whatever changes you need to make to
the dough and then save the dough on the dough upload site. Leave the site open in a tab. Make sure that
your posts in the Post Office are the same as what you have in the dough. Now create a new thread with your intro post.
<p>
<b>Special note:</b> you may get a server error upon creating the new thread. I have tested this a few times on the
<g_>/test/</g_> board and got no errors. Perhaps this problem occurs due to the high level of traffic on the
<g_>/qresearch/</g_> board. If you get an error, then the Launcher won't have the thread number so you will need to go
get it. Open the catalog and look for the new thread. If you can't find it, then you may need to retry the post.
If you find it, then open the thread in the Launcher and copy the thread number from the status bar. Change the
current thread number in the Post Office. This is not necessary if the thread was created without error since the
Post Office will be tied automatically to the new thread.
<p>
Finish posting the remainder of your posts. You can prepare up to 6 posts in the Post Office. If you need more space,
then open another copy of the Post Office (warning: remember to change the thread number before you start
posting from this extra copy). Lastly, you need to post the link for your saved dough. If you have not already
opened the new thread, then do so now and check to make sure that everything posted correctly. Copy the dough link
from the upload site that you left open in another tab. Make a Quick Reply with the new dough link.
<p>
One final note. You are using the Quick Reply box in the main bread tab for your notables. If you want to post any
other reply to the bread, then open a Slice in order to get a fresh reply box. This might seem obvious but it is easy
to overlook this shortcut. Trust me, I had to learn this the hard way, kek.
<p>
Oh, one more thing. The font used on the default 8kun client is Helvetica. You can select this font in the Launcher in
order to see your posts in the Post Office as they would be seen in the default client. I mention this due to the
usage of spaces and hyphenation characters to line up some items. Select Helvetica before you open the Post Office.
You can change back to another font afterward without affecting the Post Office.

<p><hr></div><p id="proxy">

<div class="command" style="margin-top:36px">

<h1><r_>Kraker</r_> <g_>Local Proxy Server</g_> <r_>Control Panel</r_></h1>
<br>
<p>
<button onclick="javascript:dns_lookup()">DNS lookup</button>
<br><br>
<button onclick="javascript:dns_servers()">Servers list</button>
<br><br>
<button onclick="javascript:dns_activate()">Activate</button>
<br><br>
<button onclick="javascript:dns_reload()">Reload</button>
<br><br>
<button onclick="javascript:dns_flags()">Flags</button>
<br><br>
</p>
<p>
<input id="cmd1" type=text>
<br><br>
<input id="cmd2" type=text>
<br><br>
<input id="cmd3" type=text>
<br><br>
<input id="cmd4" type=text>
<br><br><g_>
<input id="flg1" type=checkbox> Console &nbsp;
<input id="flg2" type=checkbox> TOR Alt Port &nbsp;
<input id="flg3" type=checkbox> TOR for All
</g_><br><br>
</p>
<p style="text-align:left">
Perform DNS lookup (by URL or IP address)
<br><br>
Activate DNS server group and/or show Servers list
<br><br>
Activate group(s) and resolve DNS (console output)
<br><br>
Reload settings file (default is <g_>_settings.txt</g_>)
<br><br>
<input id="flg4" type=checkbox> <g_>Show DNS/DoH activity</g_> (sockets if console is on)
</p>

</div><div style="width:90vw;height:75vh"></div>

<!-- ///// Post Form ///// -->

<form id="postform" style="display:none">
<input type=text name="name">
<input type=text name="subject">
<input type=text name="embed">
<input type=text name="board">
<input type=text name="thread">
<input type=text name="post" value="reply">
<input type=text name="mod" value = "0">
<input type=text name="email">
<input type=text name="password">
<input type=text name="json_response" value="1">
<input type=text name="domain_name_post" value="8kun.top">
</form>

<!-- ///// Quick Reply ///// -->

<div id="quickreply" class="overlay">
<span style="display:none">
<input type=file accept=".jpg,.jpeg,.png,.gif,.mp4,.webm,.pdf">
</span>
<div style="display:flex;margin-top:0">
<button>Clear</button><button>Copy</button>
<span style="flex-grow:1"></span>
<span>Name: <input type=text style="width:250px"></span>
<span style="flex-grow:1"></span>
<button>Reply</button><button>Close</button></div>

<span class="overlay2"><span><img><p></p></span>
<textarea name="body" wrap=hard></textarea></span>

<div style="margin-bottom:0">
<input type=text style="display:none">
Embed (YouTube, Bitchute, Vimeo or other):
<input type=text style="width:400px"></div>
</div>

<!-- ///// Post Office ///// -->

<div id="postoffice" style="display:none">
<span style="display:none">
<input type=file accept=".jpg,.jpeg,.png,.gif,.mp4,.webm,.pdf">
<input type=file accept=".jpg,.jpeg,.png,.gif,.mp4,.webm,.pdf">
<input type=file accept=".jpg,.jpeg,.png,.gif,.mp4,.webm,.pdf">
<input type=file accept=".jpg,.jpeg,.png,.gif,.mp4,.webm,.pdf">
<input type=file accept=".jpg,.jpeg,.png,.gif,.mp4,.webm,.pdf">
</span><span class="status overlay" style="margin:0;border-width:0 0 1px 0"></span>

<div style="display:flex;padding:8px 9px 6px 8px">
<div class="editor">
<span><img><p></p></span>
<span><img><p></p></span>
<span><img><p></p></span>
<span><img><p></p></span>
<span><img><p></p></span>
</div><span style="flex-grow:1"></span>
<div class="editor">
<textarea name="body" wrap=hard></textarea>
</div></div>

<div class="editor" style="font-size:17px">
Name:<input type=text style="width:calc(24vw - 130px)">&nbsp;
Subject:<input type=text style="width:calc(38vw - 130px)">&nbsp;
Embed:<input type=text style="width:calc(38vw - 130px)">
<input type=checkbox><small><r_> Auto-clear</r_></small>
</div></div>

<!-- ///// Captcha ///// -->

<div id="captcha" class="captcha">
<span id="cap_banner">Captcha</span><br>
<img id="cap_image" onclick="javascript:cap_pop(0)"><br>
<button onclick="javascript:cap_image()">New Image</button> &nbsp;
<input type=text id="cap_answer" style="width:120px" autofocus> &nbsp;
<button onclick="javascript:cap_answer()">Answer</button>
&nbsp; &nbsp; <g_>Contrast:</g_>&nbsp;
<button onclick="javascript:cap_contrast(-1)">&lt;</button>
<input type=text id="cap_contrast" class="static" style="width:28px">
<button onclick="javascript:cap_contrast(+1)">&gt;</button> &nbsp; &nbsp;
<button onclick="javascript:cap_login(1)" class="cap_login">LOG IN</button>&nbsp;
<button onclick="javascript:cap_login(0)" class="cap_login">LOG OUT</button>
<br><br>Answer is case-insensitive. Click on the image to close.
</div>

<!-- ///// SCRIPTS ///// -->

<script>

var localhost, localpath, response, textData, jsonData, busy = 0;
var cors_bypass, cors_kraker, worker, video_win, cookies = [];
var cookie = access_key = "";

var bread, breadURL, post_count, post_font, post_width, post_timeofs, post_mod;
var breads = [], opentabs = [], slicing = [], sliced = [], visited = [], posted = [], live = [];

var posturl = document.getElementsByTagName ("input")[0];
var timeofs = document.getElementsByTagName ("input")[1];

var url_bread = "launch-8kun_bread.htm";
var url_login = "launch-8kun_login.htm";
var url_media = "launch-8kun_media.htm";

var domain_8kun  = "https://8kun.top/";
var media_server = "https://media.128ducks.com/";
var image_server = "https://8chananon.github.io/img/";

var sys_8kun     = "**https://sys.8kun.top/";
var tor_8kun	 = "**http://sys.w7m432cocr665kf5tlpcxojwldajr3njd2etcxwhpbrt44eemuxhp7ad.onion/";

var captcha_url  = "";
var captcha_tor  = "";
var posting_url  = sys_8kun + "post.php";
var posting_tor  = tor_8kun + "post.php";
var modlogin_url = sys_8kun + "mod.php";
var modlogin_tor = tor_8kun + "mod.php";

var vid_embed = ["", "YouTube", "invidio", "YouTube", "hooktube", "YouTube",
  "bitchute", "!BitChute", "twitter", "!Twitter", "rumble", "!Rumble", "vimeo", "!Vimeo",
  "tora3", "Tora3", "tvgab", "!Gab TV", "odysee", "Odysee"
];

var say_worker = function (id, msg)
{
  worker.postMessage ({ id: id ? id : "", app: "launch-8kun", msg: msg ? msg : "goodbye" });
}
////////////////////

var say_player = function (id, msg)
{
  worker.postMessage ({ id: id, app: "alleycat", msg: msg });
}
////////////////////

var msg_worker = function (id, app, msg, info)
{
  if (app == "alleycat")
  {
    var doc, box; if (!video_win) return;
    try { doc = video_win.document; } catch (e) { }

    if (doc && (box = doc.getElementById ("player")))
    {
      if (msg == "okay")  box.style.display = "none";
      if (msg == "retry") box.innerHTML = "Alleycat Player: Busy";
      if (msg == "error") box.innerHTML = "Alleycat Player: Error";
    }
    video_win = null; return;
  }

  if (!id)
  {
    if (msg == "start") say_worker ("", "hello");
    if (msg == "hello") say_worker ("", "master");
    if (msg == "ready") document.title = "***";
  }
  else if (busy) say_worker (id, "retry"); else
  {
    say_worker (id, "close"); fetchpost (null, msg);
  }
  console.log ("Shared worker says " + msg);
}
////////////////////

const startup = async () =>
{
  localhost = location.hostname == "localhost" ? location.origin + "/" : "";

  if (!localhost) localpath = ""; else
  {
    var w = location.pathname; w = w.substr (1, w.lastIndexOf ("/"));
    if (w [0] == "~") w = w.substr (1); localpath = localhost + "~" + w;
  }

  document.topwindow = window;
  worker = new SharedWorker (localhost + "worker.js").port;
  worker.onmessage = function (e) { msg_worker (e.data.id, e.data.app, e.data.msg); }

  document.getElementById ("cap_answer").value = "";
  document.getElementById ("cap_contrast").value = "2";

  if (localhost) return;

  document.getElementsByName ("proxy")[0].checked = false;
  document.getElementsByName ("proxy")[1].checked = true;
}
////////////////////

var localhost_missing = function ()
{
  if (localhost) return false;
  alert ("The Kraker Local Proxy Server is not available."); return true;
}
////////////////////

var input_onclick = function (id)
{
  var doc = document.getElementById (id);
  if (!doc.checked && doc.selectionStart >= doc.selectionEnd - 1) doc.select();
  doc.checked = true;
}
////////////////////

var input_onblur = function (id)
{
  document.getElementById (id).checked = false;
}
////////////////////

var dns_lookup = function ()
{
  if (localhost_missing()) return;
  var name = document.getElementById ("cmd1").value;
  window.open (localhost + "?dnslookup=" + name, "_blank", "");
}
////////////////////

var dns_servers = function ()
{
  if (localhost_missing()) return;
  var name = document.getElementById ("cmd2").value;
  window.open (localhost + "?servers=" + name, "_blank", "");
}
////////////////////

var dns_activate = function ()
{
  if (localhost_missing()) return;
  var name = document.getElementById ("cmd3").value;
  window.open (localhost + "?activate=" + name, "_blank", "");
}
////////////////////

var dns_reload = function ()
{
  if (localhost_missing()) return;
  var name = document.getElementById ("cmd4").value;
  window.open (localhost + "?reload=" + name, "_blank", "");
}
////////////////////

var dns_flags = function ()
{
  if (localhost_missing()) return;
  var a = document.getElementById ("flg1").checked;
  var b = document.getElementById ("flg2").checked;
  var c = document.getElementById ("flg3").checked;
  var d = document.getElementById ("flg4").checked;

  var n = a + (b << 1) + (c << 2) + (d << 4);
  window.open (localhost + "?flags=" + n, "_blank", "");
}
////////////////////

var pullstring = function (s, t, u)
{
  var m = t.length, n = s.indexOf (t) + m;
  m = n < m ? -1 : (u ? s.indexOf (u, n) : s.length);
  return (m < 0 ? "" : s.substr (n, m - n));
}
////////////////////

var get_checked = function (name, value)
{
  var i = 0, j = value, k = document.getElementsByName (name);
  if (k && k.length) for (; i < k.length; i++) if (k [i].checked) j = k [i].value;
  if (j == "" || isNaN (i = j * 1)) return (j); else return (i);
}
////////////////////

var allow_cookie = function (source, cookie)
{
  if (!cors_kraker) return ({});
  if (source) if (cookie) cookies [source] = cookie; else cookie = cookies [source];
  if (!cookie) cookie = "null"; return ({ headers: { 'Accept': '**' + cookie } });
}
////////////////////

var get_captcha_url = function ()
{
  return (get_checked ("onion", 0) ? captcha_tor : captcha_url);
}
////////////////////

var get_posting_url = function ()
{
  return (get_checked ("onion", 0) ? posting_tor : posting_url);
}
////////////////////

var get_modlogin_url = function ()
{
  return (get_checked ("onion", 0) ? modlogin_tor : modlogin_url);
}
////////////////////

var cap_pop = function (mode)
{
  document.getElementById ("captcha").style.display = mode ? "block" : "none";
}
////////////////////

var cap_msg = function (mode, msg)
{
  var p = document.getElementById ("cap_banner");
  var color = ["indianred", "cornflowerblue", "forestgreen", ""][mode];
  p.innerHTML = msg; p.style.backgroundColor = color;
}
////////////////////

const cap_image = async () =>
{
  var resp, data; cookie = ""; cap_msg (1, "Waiting...");

  document.getElementById ("cap_answer").value = "";
  document.getElementById ("cap_contrast").value = "2";
  document.getElementById ("cap_image").style.filter = "contrast(2)";

  try {
    resp = await fetch (get_captcha_url(), { headers: { accept: '**' }});
    data = await resp.text(); } catch (e) { data = ""; }

  data = pullstring (data, 'src="data:', '"');
  if (!data) { cap_msg (0, "Error"); return; }

  document.getElementById ("cap_image").src = "data:" + data;
  cap_msg (2, "Ready"); document.getElementById ("cap_answer").focus();

  cookie = resp.headers.get ("zz-set-cookie") || "";
  cookie = "tkn=" + pullstring (cookie, "tkn=", ";");
}
////////////////////

const cap_answer = async () =>
{
  var resp, data; if (!cookie) return; cap_msg (1, "Sending...");
  var p = document.getElementById ("cap_answer").value.trim();

  var head = { accept: "**" + cookie, 'content-type':'application/x-www-form-urlencoded' };
  var body = "captcha_text=" + p + "&tos_agree=on";

  try {
    resp = await fetch (get_captcha_url(), { method: 'POST', headers: head, body: body });
    data = await resp.text(); } catch (e) { data = ""; }

  if (!data.includes ("Success!")) { cap_msg (0, "Error"); return; }

  cap_msg (2, "Success!"); cookies ["posting"] = cookie + ";ans=" + p;
}
////////////////////

var cap_contrast = function (mode)
{
  var p = document.getElementById ("cap_contrast"), q = p.value * 1 - 1.5;
  q += mode * 0.5; if (q < -1) q = -1; if (q > 1) q = 1; p.value = q += 1.5;
  document.getElementById ("cap_image").style.filter = "contrast(" + q + ")";
}
////////////////////

const cap_login = async (mode) =>
{
  var resp, data, key = cookies ["logoutid"], url = get_modlogin_url();
  if (mode) { window.open (localpath + url_login + "?" + url); return; }

  cap_msg (3, "Logged out"); cookies ["moderator"] = cookies ["logoutid"] = "";

/*
  cap_msg (1, "Logging out...");

  if (key) try
  {
    data = cookies ["moderator"] || "";
    resp = await fetch (url + "?/logout/" + key, { headers: { accept: "**" + data }});
    data = await resp.text(); if (resp.status == 200 || resp.status == 303) key = "";
  } catch (e) { }

  if (key) cap_msg (3, "Error"); else
  {
    cap_msg (3, "Logged out"); cookies ["moderator"] = cookies ["logoutid"] = "";
  }
*/
}

var site_login = function (a, b)
{
  cap_msg (3, "Logged in"); cookies ["moderator"] = a; cookies ["logoutid"] = b;
}
////////////////////

var setup_cors = function ()
{
  cors_kraker = ""; cors_bypass = get_checked ("proxy", "");
  if (cors_bypass [0] == "!") cors_bypass = cors_kraker = cors_bypass.substr (1);
  if (cors_bypass == "LOCAL") cors_bypass = cors_kraker = localhost || "http://localhost:8080/";
}
////////////////////

var check_bread_cache = function (time, url)
{
  var a = -1, b = 0, c = 0, i, j, k, json;

  for (i = 0, j = time; i < breads.length; i++)
  {
    if (url == breads [i].url) { a = i; breads [i].time = time; }
    c += breads [i].size; if ((k = breads [i].time) < j) { b = i; j = k; }
  }

  if (c > 25000000) { breads.splice (b, 1); if (b < a) a--; } return (a);
  // note: bread size is the HTML size which is about 3 * JSON size
}
////////////////////

var bread_top = function (doc)
{
  var b = doc; if (!b || !(b = b.body)) return (null);
  b = b.children; return (b.length > 1 ? b [1] : null);
}
////////////////////

var bread_box = function (doc)
{
  var b = doc; if (!b || !(b = b.body)) return (null);
  b = b.children; return (b.length > 8 ? b [8] : null);
}
////////////////////

var message = function (msg, win)
{
  win = win ? win.document : bread;
  var b = bread_top (win); if (b) b.children [1].innerHTML = msg;
}
////////////////////

var make_title = function (title, item1, url, item2)
{
  var m = url.split ("/");
  var u = item1 ? "<w_>(" + item1 + ")</w_>&nbsp;" : "";
  var v = "<g_><b>" + m[1] + "</b></g_>" + (m[3] ? "&nbsp;#" + m[3] : "");
  var w = item2 ? "&nbsp;<g_>(" + item2 + ")</g_>" : "";

  return ("<p>" + title + "</p> <span>" + u + v + w + "</span>");
}
////////////////////

var mod_tools = function (win, url)
{
  var doc = win.document, target = doc.name.split ("/");
  target = "https://sys.8kun.top/mod.php?/" + target [1] + "/";
/*
  var insert = "<big><w_>Moderator options for post #" + url + "</w_></big><p>" +
    "<a href='" + target + "delete/" + url + "'>Delete this post</a> -- " +
    "<a href='" + target + "deletebyip/" + url + "/thread'>Delete all by IP in this thread</a> -- " +
    "<a href='" + target + "deletebyip/" + url + "'>Delete all by IP on this board</a><p>" +
    "<a href='" + target + "ban&delete/" + url + "'>Ban + delete post</a> -- " +
    "<a href='" + target + "ban&deletebyip/" + url + "'>Ban + delete all in this thread</a> -- " +
    "<a href='" + target + "ban&deletebyip/" + url + "/global'>Ban + delete all on this board</a><p>" +
    "<a href='" + target + "ban/" + url + "'>Ban IP</a> -- " +
    "<a href='" + target + "banrange/" + url + "'>Range ban</a> -- " +
    "<a href='" + target + "edit/" + url + "'>Edit this post</a> -- " +
    "<a href='https://sys.8kun.top/mod.php?/'>Dashboard</a>";
*/
  var insert = "<big><w_>Moderator options for post #" + url + "</w_></big><p>" +
    "<a href='" + target + "ban/" + url + "'>Ban IP</a> -- " +
    "<a href='" + target + "delete/" + url + "'>Delete post</a> -- " +
    "<a href='" + target + "ban&delete/" + url + "'>Ban IP + delete post</a><p>" +
    "<a href='" + target + "banrange/" + url + "'>Range ban</a> -- " +
    "<a href='" + target + "edit/" + url + "'>Edit post</a> -- " +
    "<a href='https://sys.8kun.top/mod.php?/'>Dashboard</a>";

  var box = doc.getElementById ("moderator"); if (box) doc.body.removeChild (box);
  box = document.createElement ("SPAN"); box.id = "moderator"; box.innerHTML = insert;
  box.classList.add ("status3"); box.classList.add ("status4");
  box.onclick = function() { box.style.display = "none"; }
  doc.body.appendChild (box);
}

var createwindow = function (win, url)
{
  var doc, bdy, box, top, catalog = !url.includes ("/");

  doc = win.document; doc.head.innerHTML = document.head.innerHTML;
  bdy = doc.body; bdy.value = -1; bdy.classList.add ("bread");
  if (catalog) bdy.style.backgroundColor = "wheat";

  bdy.groyper = function (w, x, v)
  {
    if (v == 1) fetchpost (w, x); if (v == 2) playvideo (w, x); if (v == 3) postbox (w, x);
    if (v == 4) mod_tools (w, x); if (v == 5) showmedia (w, x); if (v == 6) updatebread (w, x, 0);
  }

  box = document.createElement ("SPAN");
  box.id = catalog ? "CaTaLoG" : "LaUnChEr";
  box.classList.add ("status"); box.classList.add ("overlay");
  if (!catalog) box.onclick = function (e) { launchmenu (win, e.target, 0); }
  if (!catalog) box.onmousedown = function (e) { if (e.detail > 1) return false; }
  box.innerHTML = "<span class='status1'></span><span></span><span class='status2'></span>";
  bdy.appendChild (box); box.children [1].innerHTML = "<big><w_>Launching...</w_></big>";

  box = document.createElement ("SCRIPT");
  box.innerHTML = "var getpost = function (x) { document.body.groyper (window, x, 1); }";
  bdy.appendChild (box);

  box = document.createElement ("SCRIPT");
  box.innerHTML = "var getvideo = function (x) { document.body.groyper (window, x, 2); }";
  bdy.appendChild (box);

  box = document.createElement ("SCRIPT");
  box.innerHTML = "var quickreply = function (x) { document.body.groyper (window, x, 3); }";
  bdy.appendChild (box);

  box = document.createElement ("SCRIPT");
  box.innerHTML = "var moderate = function (x) { document.body.groyper (window, x, 4); }";
  bdy.appendChild (box);

  box = document.createElement ("SCRIPT");
  box.innerHTML = "var popfetch = function (x) { document.body.groyper (window, x, 5); }";
  bdy.appendChild (box);

  box = document.createElement ("SCRIPT");
  box.innerHTML = "var timeout = function (x) " +
    "{ setTimeout (function() { document.body.groyper (window, x, 6); }, 1000); }";
  bdy.appendChild (box);

  box = document.createElement ("DIV"); bdy.appendChild (box);

  if (catalog) return;

  top = document.getElementById ("quickreply").cloneNode (true);
  box = top.getElementsByTagName ("img")[0].parentNode;
  box.onclick = function() { postbox (win, -1); }
  box = top.getElementsByTagName ("button");
  box [0].onclick = function() { postbox (win, -2); }
  box [1].onclick = function() { postbox (win, -3); }
  box [2].onclick = function() { postbox (win, -4); }
  box [3].onclick = function() { postbox (win, -5); }

  bdy.appendChild (top);
}
////////////////////

var createJSON = function (data)
{
  var i, j, n, s, t, v, w, pid, uid, time, name, cap, trip, post;
  var json = {"posts" : []}; var posts = json.posts;

  var doc = new DOMParser(); doc = doc.parseFromString (data, "text/html");

  // Waterfox does not like this:
  // var doc = document.implementation.createHTMLDocument();  <-- this is fine
  // doc.open(); doc.write (textData); doc.close();  <-- this is not??

  doc = doc.getElementsByName ("postcontrols")[0].children[1];
  var box = doc.getElementsByTagName ("div");

  for (n = 0; n < box.length; n++) if (s = box[n].id)
  {
    pid = s.substr (s.indexOf ("_") + 1);
    s = box[n].getElementsByClassName ("intro")[0].innerHTML;

    time = pullstring (s, 'unixtime="', '"');
    name = pullstring (s, 'class="name"', '<');
    subj = pullstring (s, 'class="subject"', '<');
    trip = pullstring (s, 'class="trip"', '<');
    uid  = pullstring (s, 'class="poster_id"', '<');
    cap  = pullstring (s, 'class="capcode"', '<');

    name = pullstring (name, '>', '');
    subj = pullstring (subj, '>', '');
    trip = pullstring (trip, '>', '');
    uid  = pullstring (uid, '>', '');
    cap  = pullstring (cap, '>', '');

    if (!cap)
    {
       cap = pullstring (s, 'class="capcode" title="', '"');
       if (cap) cap = pullstring (s, 'style="color:red">', '<');
    }
    if (!uid) uid = pullstring (s, 'hidden service.">', '<');

    w = posts.length ? box[n] : doc;
    w = w.getElementsByClassName ("files");
    w = w && w[0] ? w[0].innerHTML : "";
    v = ["", ""]; w = w.split (">File: <a ");

    for (i = 1; i < w.length; i++)
    {
      s = pullstring (w[i], '', '='); if (s != "href" && s != "title") continue;
      t = pullstring (w[i], '"postfilename"', '<'); s = pullstring (t, 'title="', '"');
      if (!s) s =  pullstring (t, '>', ""); t = pullstring (w[i], '"', '"');

      v.push (s); s = pullstring (w[i], 'src="', '>');
      t = t.split ("/"); j = t.length - 1; t = (j ? "/" : "") + t [j];
      if (s.includes (".jpg") || t.includes (".mp4") || t.includes (".webm"))
        t = t.substr (0, t.indexOf (".")) + ".jpg";

      v.push (t); t = pullstring (s, 'style="', '"');
      v.push (pullstring (t, "width:", "px")); v.push (pullstring (t, "height:", "px"));
    }

    for (i = 6, t = []; i < v.length; i += 4)
      t.push ({ filename: v[i], tim: v[i+1], tn_w: v[i+2], tn_h: v[i+3] });

    w = posts.length ? box[n] : doc; w = w.children;

    for (i = 0; i < w.length; i++)
    {
      if (!(s = w[i].getAttribute ("class")) || s.substr (0,15) != "video-container") continue;
      s = w[i].outerHTML; v = pullstring (s, 'src="', '"');
      v = [s, v, "", "", "255", "143"]; break;
    }

    if (v.length < 6) v = ["", "", "", "", "", ""];
    s = box[n].getElementsByClassName ("body")[0].innerHTML;

    post = { no: pid, name: name, sub: subj, capcode: cap, trip: trip, id: uid, time: time,
             com: s, files: "", fsize: "", ext: "", embed: v[0], embed_thumb: v[1], filename: v[2],
             tim: v[3], tn_w: v[4], tn_h: v[5], extra_files: t };

    posts.push (post);
  }

  return (json);
}
////////////////////

var getimage = function (v, multi)
{
  var s, t, u, title = "", banner = "", w = v.tn_w, h = v.tn_h;
  if (!w || w < 64) w = 64; if (!h || h < 64) h = 64;

  var name = v.filename ? "/" + v.filename : "", ext = v.ext ? v.ext : "";
  if (!ext) ext = name.substr (name.lastIndexOf (".")); else name += ext;
  var type = "image"; name = name.replace (/'| |"/g, "_");

  if (!v.tim)
  {
    s = v.v_url; t = v.v_img; title = v.type; banner = "blue"; type = "frame";

    u = s.indexOf ("?"); if (u > 0) s = s.substr (0, u);
    if (s.substr (-1) == "/") s = s.substr (0, s.length - 1);

    if (title == "BitChute") { banner = "red"; s = s.replace ("/video/", "/embed/"); }
    if (title == "Rumble")   { banner = "red"; }
    if (title == "Twitter")  { banner = "red"; type = "tweet"; }
    if (title == "Vimeo")    { banner = "red"; }
    if (title == "YouTube")  { banner = "red"; }
  }
  else
  {
    if ((u = (v.fpath === 0 ? "/" : "") + v.tim) [0] == "/")
    {
      s = media_server + pullstring (breadURL, "/", "/");
      t = s + "/thumb" + u; s = s + "/src" + u; name = "";
    }
    else
    {
      s = media_server + "file_dl/" + u;
      t = media_server + "file_store/thumb/" + u;
    }

    ext = ext.toLowerCase(); s += ext;
    u = u.includes (".") ? u.substr (u.indexOf (".")) : "";

    if (u) s = s.substr (0, s.indexOf (u)) + ext; else
      if (ext == ".gif" || ext == ".png" || ext == ".jpeg" || ext == ".webp") t += ext; else t += ".jpg";

    if (ext == ".mp3")
    {
      title = "MP3"; banner = "green"; w = 120; h = 140;
      t = media_server + "static/file.png"; type = "video";
    }
    if (ext == ".mp4")
    {
      title = "MP4"; banner = "green"; type = "video";
    }
    if (ext == ".webm")
    {
      title = "WEBM"; banner = "green"; type = "video";
    }
    if (ext == ".pdf")
    {
      title = "PDF"; banner = "blue"; w = 120; h = 140;
      t = media_server + "static/file.png"; type = "file";
    }
    if (ext == ".gif")
    {
      title = "GIF"; banner = "blue";
    }
  }

  var img = "<span class='image' onclick=javascript:popfetch(this)" +
    " data='" + type + "'><a href='" + s + name + "' onclick='return false'>" +
    "<img src='" + t + "' width=" + w + " height=" + h + "></a>";

  if (!banner) t = ""; else
  {
    t = "<span class='banner banner_" + banner + "'>" + title + "</span>";
    s = "<a class='banner' href=javascript:getvideo('" + s + "') target=_self";
    if (banner != "blue") t = s + " onclick='event.stopPropagation()'>" + t + "</a>";
  }

  return (img + t + "</span>");
}
////////////////////

var newcrumb = function (post, target, bread)
{
  var i, j, n, p, s, t, v, box, img = "";
  var pid = post.no, data = post.com ? post.com : "", str = "highlightReply('";
  var islive = target.substr (0,1) == "#"; if (islive) target = target.substr (1);
  var hidepost = target && pid != target && data.indexOf (str + target + "'") < 0;

  var url = bread.name + "#" + pid, catalog = "/catalog#";
  if (url.includes (catalog)) url = url.replace (catalog, "/res/"); else catalog = "";

  if (!catalog) while ((s = pullstring (data, str, '>')))
  {
    t = pullstring (s, 'href="', '"').replace (".html", "");
    p = pullstring (t, "#", "");

    if (hidepost) data = data.replace (str, ""); else
    {
      v = posted.includes (t) ? 'class="in-posted" ' : "";
      if (!v) v = visited.includes (t) ? 'class="in-visited" ' : "";
      t = 'target=_self href="javascript:getpost(' + "'" + t + "'" + ')"';
      data = data.replace ('onclick="' + str + s, v + t);
    }

    box = bread.getElementById ("msg" + p); if (!box) continue;
    box = box.children[0].getElementsByTagName ("span")[0];

    t = ">#" + pid + "</"; v = " <n_" + t + "n_>";
    if (!box.innerHTML.includes (t)) box.innerHTML += v;
  }

  if (hidepost) return; post_count++;

  if (target && !islive)
  {
    if (n = !sliced.includes (url)) sliced.push (url);
    if (n || target == pid) slicing.push (url);
  }

  var name = post.name ? post.name.trim() : "";
  var time = post.time * 1 + post_timeofs;
  var trip = post.trip, uid = post.id;

  trip = trip ? " <x_>" + trip + "</x_>" : "";
  uid = uid ? "  <b_>" + uid + "</b_>" : "";

  name = (name && name != "Anonymous") ? "  <y_>" + name + "</y_>" : "";

  if (p = post.capcode)
  {
    if (p.substr (0,2) != "##") p = "## " + p;
    name = "  <x_>" + p + "</x_>" + name;
  }

  s = ["Sun", "Mon", "Tues", "Wed", "Thu", "Fri", "Sat"];
  time = new Date (time * 1000); s = s [time.getDay()];

  time = "<b_>" + time.toLocaleDateString() + " (" + s + ")</b_> " +
         "<w_>" + time.toLocaleTimeString() + "</w_>";

  s = posted.includes (url) ? 'class="in-posted" ' : "";
  if (!s) s = visited.includes (url) ? 'class="in-visited" ' : "";
  s = '<a ' + s + 'target=_self href="javascript:getpost(' + "'" + url + "'" + ')">';

  var head = "<p class='header'># " + s + pid + "</a>  ";
  var multi = post.tim && post.extra_files && post.extra_files.length;

  if ((t = post.embed_thumb) && (p = post.embed))
  {
    s = pullstring (p, 'class="', '"');
    if (s.substr (0,15) != "video-container") s = "?"; else s = s.substr (16);

    for (j = 0, v = ""; j < vid_embed.length; j += 2)
      if (s == vid_embed [j]) { v = vid_embed [j + 1]; break; }

    if (t.includes ("media.8kun.top")) t = image_server + "unknown.png";
    if (v [0] == "!") { v = v.substr (1); t = image_server + s + ".png"; }
    if (!v) v = s; s = pullstring (p, 'href="', '"');

    if (v == "YouTube")
    {
      s = pullstring (p, 'data-video="', '"');
      t = "https://i.ytimg.com/vi/" + s + "/mqdefault.jpg";
      s = "https://www.youtube.com/embed/" + s;
    }
    img = getimage ({ v_url: s, v_img: t, type: v, tn_w: 255, tn_h: 143 }, multi);
  }

  // It is possible for a post to contain files and images as well as an embedded video.
  // The extra components are ignored by the default client. That behaviour is duplicated.

  if (post.tim)
  {
    img = getimage (post, multi);
    if (multi && (v = post.extra_files)) for (n = 0; n < v.length; n++)
      if (v [n].tim) img = img + getimage (v [n], true);
  }

  p = '<p class="body-line empty "></p>';
  if (!data.indexOf (p)) data = data.substr (p.length);

  // for links of the form ">>>/<board name>/"
  data = data.replace (/\<a href="\//g, '<a href="' + domain_8kun);

  s = multi ? (data ? "multi2" : "multi1") : "left";
  if (img) img = "<div class='imgbox " + s + "'>" + img + "</div>";

  s = post.sub ? post.sub.trim() : "";
  t = "<div" + (data ? " class='" + post_font + "'" : "") + ">";
  p = '<a target=_self class="reply" href="javascript:quickreply(' + "'" + pid + "'" + ')"></a>';
  if (post_mod) p += '<a target=_self class="moderate" href="javascript:moderate(' + "'" + pid + "'" + ')"></a>';

  if (catalog)
  {
    v = post.last_modified * 1 + post_timeofs; v = new Date (v * 1000);
    v = "<b_>" + v.toLocaleDateString() + "</b_> <w_>" + v.toLocaleTimeString() + "</w_>";
    uid += "  <g_>[" + (post.replies + 1) + "]</g_>  " + v;

    p = ""; if (!s) s = "No Title"; if (!(n = post.tn_h) || n < 190) n = 200;
    if (data) t = t.substr (0, t.length - 1) + " style='overflow-y:auto;max-height:" + n + "px'>";

    if (post.cyclical != "0") p += "<i class='fa fa-refresh icon'></i>";
    if (post.bumplocked != "0") p += "<i class='fa fa-anchor icon'></i>";
    if (post.locked) p += "<i class='fa fa-lock icon'></i>";
    if (post.sticky) p += "<i class='fa fa-thumb-tack icon'></i>";
  }

  s = " <span></span>" + p + "</p>" + (s ? "<p class='subject'>" + s + "</p>" : "");

  box = document.createElement ("SPAN"); box.classList.add ("postbox");
  box.innerHTML = head + time + name + trip + uid + s + img + t + data + "</div>";
  box.setAttribute ("id", "msg" + pid); if (post_width) box.style.width = post_width;

  bread_box (bread).appendChild (box); if (!img) return;

  s = box.getElementsByTagName ("div"); t = s[0].getElementsByTagName ("img");

  if (multi)
  {
    for (i = 0, j = 1, p = 0, n = t.length, v = []; i <= n; i++, j++)
      if (i == n || (p += (s = t[i].width)) > box.clientWidth - j * 8)
      { 
        if (i == n) s = 0; else if (j < 2) j++; else i--;
        p = j > 2 ? (box.clientWidth - p + s) / j / 2 : 4;
        for (; j > 1; j--) v.push (p); p = j = 0;
      }

    while (n > 0)
    {
      s = t[--n].parentNode.parentNode;
      s.style.marginLeft = v[n] + "px"; s.style.marginRight = v[n] + "px";
    }
  }
  else
  {
    v = t[0].parentNode.parentNode.parentNode;
    t = s[1]; n = v.clientHeight - t.clientHeight - 4;

    if (n >= 0) t.style.paddingTop = (n / 4) + "px"; else
      if (catalog) v.style.paddingTop = (1 - n / 2) + "px"; else
        { v.classList.remove ("left"); v.classList.add ("right"); }
  }
}
////////////////////

var bakebread = function (target, catalog)
{
  var box, top, str, url = "javascript:getpost('" + breadURL;

  if (target && post_count <= 0)
  {
    box = document.createElement ("DIV");
    box.innerHTML = "<p><big><g_>Post # <r_>" + target + "<g_> was not found in this bread.<p><hr><p>" +
      "<b_>Perhaps the post was deleted or the cache (if used) is out of date.</big><p><hr><p>" +
      "<button onclick=" + url + "!" + target + "')>Retry with Fresh Bread</button>";
    bread.body.appendChild (box); return;
  }

  box = document.createElement ("DIV");
  box.style = "display:inline-block;width:calc(100% - 22px);height:60vh";
  bread.body.appendChild (box);

  if (catalog) { box.innerHTML = "<p><hr>";  return; }

  box.innerHTML = "<p><hr><br><big><g_>Click on the status bar for options.</g_></big>";

  var i, j, k, p, q, r, s, t, u, v, w, win; str = url + "#" + target + "')";

  for (i = 0; i < opentabs.length; i++) try
  {
    win = opentabs [i]; if (!win || win.closed) throw ("");
    win = win.document; p = win.title; if (win == bread) p = "";

    q = win.name; w = bread_box (win); win = bread_top (win);
    if (!w || !win || win.id != "LaUnChEr") throw ("");

    if (!p || !target) if (q != breadURL) continue;
    if (q.split ("/")[1] != breadURL.split ("/")[1]) continue;

    for (j = 0, w = w.children; j < w.length; j++) if (w[j].id)
    {
      if (p && target)
      {
        t = w[j].getElementsByTagName ("a");
        for (k = 0; k < t.length; k++) if (s = t[k].href)
          if (s == str) t[k].classList.add ("in-visited");
      }
      if (q != breadURL) continue;

      t = w[j].children[0].getElementsByTagName ("span")[0];
      r = t.innerHTML; s = r.replace (/n_/g, "");

      while (v = pullstring (s, "<>", "</>"))
      {
        u = sliced.includes (breadURL + v) ? "g_>" : "n_>";
        if (!p && slicing.includes (breadURL + v)) u = "r_>";
        s = s.replace ("<>" + v + "</>", "<" + u + v + "</" + u);
      }

      if (r != s) t.innerHTML = s; s = breadURL + "#" + w[j].id.substr (3);

      if (p == "Slice" || !sliced.includes (s)) continue;
      if (!p && slicing.includes (s)) continue;

      w[j].classList.add ("in-sliced");
      w[j].firstElementChild.classList.add ("in-sliced");
    }

  } catch (e) { if (e) console.log ("[Baker] " + e); opentabs.splice (i--, 1); }
}
////////////////////

var fetchpost = function (win, url)
{
  if (!url) url = posturl.value.trim();
  if (!url || busy < 0 || busy + 1000 > Date.now()) return;

  if (url.substr (0,2) == "**")
  {
    access_key = url.substr (2);
    posturl.value = access_key ? "Got the Access Key" : "Access Key removed";
    return;
  }

  if (url.includes ("twitter.com"))
  {
    if (url.includes ("?")) url = url.substr (0, url.indexOf ("?"));
    url = url.substr (url.lastIndexOf ("/") + 1);
  }

  if (url.replace (/\d/g, "") == "")
  {
    url = localpath + url_media + "?tweet#" + url;

    if (!win) win = window; try { win = win.open (url, "_blank"); }
      catch (e) { win = window.open (url, "_blank"); };

    win.focus(); return;
   }

  busy = Date.now(); var link = pullstring (url, "'", "'");
  link = localpath + url_bread + "##" + (link ? link : url);

  // the new window must call fetchbread()

  if (!win) win = window; try { win = win.open (link, "_blank"); }
    catch (e) { win = window.open (link, "_blank"); }; win.focus();
}
////////////////////

var fetchbread = async (win, url) =>
{
  var m, n, data, lastid = "", target = ""; if (!win) return;

  createwindow (win, url); if (!opentabs.includes (win)) opentabs.push (win);
  for (n = live.length - 1; n >= 0; n--) if (win == live [n].win) live.splice (n, 1);
  if (busy < 0) { message ("Busy - please retry", win); return; }

  bread = win.document; breadURL = domain_8kun;
  var type = get_checked ("html-json", 0) ? ".json" : ".html";
  var catalog = !url.includes ("/"); if (catalog) { type = ".json"; url = "/" + url; }

  if (url [0] == "/") url = breadURL + url.substr (1);
  if (url.indexOf (breadURL) != 0) { message ("Bad URL"); return; }

  var time = (busy || Date.now()) / 1000; busy = -1;

  if ((m = url.indexOf ("$")) > 0) { lastid = url.substr (m + 1); url = url.substr (0, m); }
  if ((m = url.indexOf ("#")) > 0) { target = url.substr (m + 1); url = url.substr (0, m); }
  if ((n = url.indexOf ("!")) > 0) { target = url.substr (n + 1); url = url.substr (0, n); }

  if (catalog) { m = -1; target = lastid = ""; }

  n = url.indexOf (".", breadURL.length); if (n > 0) url = url.substr (0, n);
  bread.title = catalog ? "Catalog" : (target ? "Slice" : (lastid ? "CHUNK" : "BREAD"));
  if (catalog) url += "/catalog"; bread.name = breadURL = url.substr (breadURL.length - 1);
 
  if ((n = check_bread_cache (time, breadURL)) >= 0)
    if (lastid || m < 0) breads.splice (n, 1); else { time = 0; jsonData = breads[n].json; }

try
{
  if (time)
  {
    setup_cors(); response = await fetch (cors_bypass + url + type);
    if (!response.ok) throw ("Status " + response.status + " (" + response.statusText + ")");

    textData = await response.text();
    jsonData = type == ".json" ? JSON.parse (textData) : createJSON (textData);
  }

  if (!catalog) data = jsonData.posts; else
  {
    for (n = 0, data = []; n < jsonData.length; n++)
      for (m = 0; m < jsonData[n].threads.length; m++) data.push (jsonData[n].threads[m]);
  }

  if (!data || !data.length) throw ("Error in JSON");

  n = textData.length * (type == ".json" ? 3 : 1);
  if (time) breads.push ({ time: time, url: breadURL, json: jsonData, size: n });

  slicing = []; post_count = 0; post_timeofs = timeofs.value * 3600;
  if (sliced.length > 500) sliced.splice (0, 50); if (visited.length > 500) visited.splice (0, 50);

  post_font = get_checked ("font", "font1"); post_width = get_checked ("width", "");
  post_mod = get_checked ("moderator", 0);

  if (lastid && target) lastid = ""; if (target) visited.push (breadURL + "#" + target);

  if (lastid) for (n = data.length - 1; n >= 0 ; n--) if (data[n].no <= lastid)
  {
    for (; n < data.length; n++) newcrumb (data[n], "", bread); break;
  }

  if (!lastid) for (n = 0; n < data.length; n++)
  {
    if (!target) newcrumb (data[n], "", bread); else if (target == data[n].no) break;
  }

  if (!lastid && target && n < data.length)
  {
    for (; n < data.length; n++) newcrumb (data[n], target, bread);
  }

  var s = post_count + "&nbsp;of&nbsp;" + data.length;
  var t = data [0].sub, u = time ? "" : "cache"; if (!t) t = "No Title";

  message (make_title (catalog ? "Catalog" : t, catalog ? post_count : s, breadURL, u));

  bakebread (target, catalog); bread.body.style.pointerEvents = "auto";

} catch (err) { console.log (err); message (err); }

  busy = 0; bread = null;
}
////////////////////

const updatebread = async (win, url, mode) =>
{
  var n, p, q, w, time, res, dat, json, doc;

  for (n = 0; n < live.length; n++) if (url == live [n].url)
  {
    if ((w = live [n].win) != win)
    {
      try { w = w.closed ? null : w.document; } catch(e) { w = null; }
      if ((w = bread_top (w)) && w.id == "LaUnChEr") return;
      live.splice (n, 1); n = live.length;
    }
    break;
  }

  if (!win.closed) try { doc = win.document; } catch(e){}
  if (!(w = bread_top (doc)) || w.id != "LaUnChEr" || !(w = w.children)) return;

  if (n < live.length)
  {
    if (mode == 2) { live [n].time -= live [n].count; live [n].count = 1; }
    if (mode == 3) { live [n].running = 0; doc.title = "BREAD"; }
    if (mode == 4)
    {
      p = pullstring (w [1].innerHTML, ">", "<");
      w [1].innerHTML = make_title (p, "IDLE", doc.name, "");
      w [0].innerHTML = 0; live.splice (n, 1); doc.title = "BREAD";
    }
    if (mode) return;
  }
  else if (!mode || mode > 2)
  {
    if (mode == 3) doc.title = "BREAD"; return;
  }
  else
  {
    if (mode > 1) { q = "UPDATE"; r = 1; } else { q = "LIVE"; r = 6; }

    p = pullstring (w [1].innerHTML, ">", "<"); q = make_title (p, q, doc.name, ""); 
    w [1].innerHTML = q; w [2].innerHTML = bread_box (doc).children.length;

    live.push ({ url: url, win: win, count: r, time: 0, total: 0, running: 0 });
  }

  if ((p = --live [n].count) > 0)
  {
    win.timeout (url); w [0].innerHTML = p; return;
  }

  w [0].innerHTML = w [2].innerHTML = "--"; doc.title = "BREAD (update)";

  setup_cors(); p = get_checked ("html-json", 0) ? "json" : "html";
  q = (mode < 2 ? cors_kraker : cors_bypass) + domain_8kun + url.substr (1) + "." + p;

  try
  {
    res = await fetch (q);
    if (!res.ok) throw ("Status " + res.status + " (" + res.statusText + ")");
    dat = await res.text(); json = (p == "json") ? JSON.parse (dat) : createJSON (dat);

  } catch (err) { console.log (err); json = null; }

  finishbread (win, url, mode, json, dat ? dat.length * (p == "json" ? 3 : 1) : 0);
}
////////////////////

var finishbread = function (win, url, mode, json, size)
{
  var n, p, q, r, s, w, posts, doc, livedocs = [];

  if (busy) { setTimeout (function() {finishbread (win, url, mode, json, size);}, 150); return; }

  if (!win.closed) try { doc = win.document; } catch(e){}
  for (n = live.length - 1; n >= 0 && win != live [n].win; n--);
  if (n < 0 || !(w = bread_top (doc)) || w.id != "LaUnChEr") return;

  if (!json) { p = 0; console.log ("[Update] " + url); } else
  {
    for (q = 0; q < opentabs.length; q++) try
    {
      w = opentabs [q]; if (w.closed) continue;
      w = w.document; if (w.name != doc.name) continue;
      if (bread_top (doc).id == "LaUnChEr") livedocs.push (w);
    } catch(e){}

    w = bread_box (doc).children; q = (p = w.length) ? w [p-1].id.substr (3) : "0";

    posts = json.posts; p = posts.length; post_timeofs = timeofs.value * 3600;
    post_font = get_checked ("font", "font1"); post_width = get_checked ("width", "");
    post_mod = get_checked ("moderator", 0);

    for (r = p - 1; r >= 0; r--) if ((s = posts [r].no) && s <= q) break;

    for (s = r + 1; s < p; s++) for (q = 0; q < livedocs.length; q++)
    {
      if ((w = livedocs [q]) == doc) newcrumb (posts [s], "", doc);
      if (w.title != "Slice" || !(w = bread_box (w)) || !(w = w.children [0])) continue;
      newcrumb (posts [s], "#" + w.id.substr (3), livedocs [q]);
    }

    w = bread_box (doc).children; s = w.length - p;
    p -= r + 1; q = live [n].deleted; if (!q) q = 0;

    if (s > q)  // posts deleted?
    {
      live [n].deleted = s; r = w.length - 1; s = posts.length - 1;

      for (var a, b; r >= 0 && s >= 0; --r, --s)
      {
        a = w [r].id.substr (3); b = posts [s].no;
        if (a < b) r++; else if (a > b) { s++; w [r].classList.add ("is-deleted"); }
      }
    }

    for (r = 0; r < breads.length; r++) if (url == breads [r].url) break;
    breads [r] = { time: Date.now(), url: url, json: json, size: size };
  }

  r = 0; s = live [n].time; if (!s) s = 20; else r = live [n].total += p;
  q = s * 4 / (r + 1); if (q > s) q = s; q = Math.floor (q / 2);
  if (q < 10) q = 10; if (q > 240) q = 240;

  if (s > q * 4) { s = Math.floor (s / 2); live [n].total = Math.floor (r / 2); }

  r = live [n].running += p; live [n].count = q;
  live [n].time = q + s; s = bread_box (doc).children.length;

  doc.title = "BREAD (" + p + (mode > 1 ? "" : "-" + r + "-" + q) + ")";

  if (mode > 1) { q = 0; live.splice (n, 1); } else win.timeout (url);

  w = bread_top (doc).children; w [0].innerHTML = q; w [2].innerHTML = s;
}
////////////////////

var launchmenu = function (win, item, cmd)
{
  var n, box, top, doc = win.document, url = doc.name, input = doc.getSelection();

  if (item.nodeName == "INPUT" || input.anchorOffset != input.focusOffset) return;
  while (item && !item.id) item = item.parentNode; if (!item) return;

  if (box = doc.getElementById ("posting")) box.style.display = "block";
  top = item.children [1]; box = taglist (top, "input");
  input = box.length ? box [0].value : "";

  if (cmd == 0)
  {
    if (top.value)
    {
      top.innerHTML = top.value; top.value = ""; return;
    }
    top.value = top.innerHTML; top.innerHTML = "";

    if (doc.title.includes ("BREAD"))
    {
      for (n = live.length - 1; n >= 0 && win != live [n].win; n--);

      box = document.createElement ("BUTTON"); box.innerHTML = "Update";
      box.onclick = function (e) { launchmenu (win, e.target, 2); }
      top.appendChild (box);

      box = document.createElement ("BUTTON"); box.innerHTML = "Reset";
      box.onclick = function (e) { launchmenu (win, e.target, 3); }
      top.appendChild (box);

      box = document.createElement ("BUTTON");
      box.innerHTML = n < 0 ? "Go Live" : "End Live";
      box.onclick = function (e) { launchmenu (win, e.target, n < 0 ? 1 : 4); }
      top.appendChild (box);

      box = document.createElement ("BUTTON");
      box.innerHTML = doc.body.value < 0 ? "Mark" : "Restore";
      box.onclick = function (e) { launchmenu (win, e.target, 5); }
      top.appendChild (box);
    }

    if (doc.title != "Post Office")
    {
      box = document.createElement ("BUTTON"); box.innerHTML = "Post Office";
      box.onclick = function (e) { launchmenu (win, e.target, 11); }
      top.appendChild (box);

      box = document.createElement ("BUTTON"); box.innerHTML = "Quick Reply";
      box.onclick = function (e) { launchmenu (win, e.target, 10); }
      top.appendChild (box);
    }
    else
    {
      box = document.createElement ("BUTTON"); box.innerHTML = "Clear";
      box.onclick = function (e) { launchmenu (win, e.target, 12); }
      top.appendChild (box);

      box = document.createElement ("BUTTON"); box.innerHTML = "Copy";
      box.onclick = function (e) { launchmenu (win, e.target, 13); }
      top.appendChild (box);

      box = document.createElement ("BUTTON"); box.innerHTML = "1";
      box.onclick = function (e) { launchmenu (win, e.target, 21); }
      top.appendChild (box);

      box = document.createElement ("BUTTON"); box.innerHTML = "2";
      box.onclick = function (e) { launchmenu (win, e.target, 22); }
      top.appendChild (box);

      box = document.createElement ("BUTTON"); box.innerHTML = "3";
      box.onclick = function (e) { launchmenu (win, e.target, 23); }
      top.appendChild (box);

      box = document.createElement ("BUTTON"); box.innerHTML = "4";
      box.onclick = function (e) { launchmenu (win, e.target, 24); }
      top.appendChild (box);

      box = document.createElement ("BUTTON"); box.innerHTML = "5";
      box.onclick = function (e) { launchmenu (win, e.target, 25); }
      top.appendChild (box);

      box = document.createElement ("BUTTON"); box.innerHTML = "6";
      box.onclick = function (e) { launchmenu (win, e.target, 26); }
      top.appendChild (box);

      box = document.createElement ("BUTTON"); box.innerHTML = "Post";
      box.onclick = function (e) { launchmenu (win, e.target, 14); }
      top.appendChild (box);

      box = document.createElement ("INPUT"); box.type = "text";
      box.style = "text-align:center"; box.size = 8; box.value = url.split ("/")[3];
      top.appendChild (box);

      box = document.createElement ("BUTTON"); box.innerHTML = "Change";
      box.onclick = function (e) { launchmenu (win, e.target, 16); }
      top.appendChild (box);

      box = document.createElement ("BUTTON"); box.innerHTML = "New Thread";
      box.onclick = function (e) { launchmenu (win, e.target, 15); }
      top.appendChild (box);
    }
    return;
  }

  top.innerHTML = top.value; top.value = "";

  if (cmd <= 4) updatebread (win, url, cmd);

  if (cmd == 5)
  {
    if ((n = doc.body.value) >= 0) win.scrollTo (0, n);
    doc.body.value = n < 0 ? win.pageYOffset : -1;
  }

  if (cmd == 10) postbox (win, 0);
  if (cmd == 11) postoffice (win, -1);
  if (cmd == 12) postoffice (win, -2);
  if (cmd == 13) postoffice (win, -3);
  if (cmd == 14) postoffice (win, -4);
  if (cmd == 15) postoffice (win, -5);
  if (cmd == 16) postalcode (doc, input, 0);
  if (cmd >= 21 && cmd <= 26) postoffice (win, cmd);
}
////////////////////

var taglist = function (top, name)
{
  return (top.querySelectorAll (name));
}
////////////////////

var clear_images = function (top)
{
  var n, box = taglist (top, "input[type=file]"), img = taglist (top, "img");

  for (n = 0; n < box.length; n++) box [n].value = "";

  for (n = 0; n < img.length; n++)
  {
    box = img [n]; box.src = box.value = ""; box = box.nextElementSibling;
    box.title = box.innerHTML = box.style.backgroundColor = "";
  }
}
////////////////////

var clear_inputs = function (top)
{
  var n, box = taglist (top, "input[type=text]");

  for (n = 1; n < box.length; n++) box [n].value = "";

  box = taglist (top, "textarea")[0].value = "";
}
////////////////////

var postbox = function (win, postnum)
{
  var url, frm, box, top, doc = win.document;

  top = doc.getElementById ("quickreply");

  if (postnum >= 0)
  {
    top.style.display = "block";
    box = taglist (top, "textarea")[0]; box.focus();
    if (postnum) box.value += ">>" + postnum + "\n";
  }

  if (postnum == -1) if ((box = taglist (top, "img")[0]).value)
  {
    clear_images (top);
  }
  else
  {
    box = taglist (top, "input[type=file]")[0];
    box.onchange = function (e) { loadimage (top, e, 0); }
    box.click();
  }  

  if (postnum == -2) clear_inputs (top);

  if (postnum == -3)
  {
    taglist (top, "textarea")[0].select(); doc.execCommand ("copy");
  }

  if (postnum == -4) sendform (top, win, doc, false);

  if (postnum == -4 || postnum == -5) top.style.display = "none";
}
////////////////////

var postoffice = function (win, cmd)
{
  var n, p, q, box, top, doc = win.document;

  if (cmd == -1)
  {
    var postwin = win.open ("", "_blank"), post = postwin.document;
    post.open(); post.write ("<!DOCTYPE html>"); post.close();

    post.name = doc.name; post.head.innerHTML = document.head.innerHTML;
    post.title = "Post Office"; post.body.classList.add ("postoffice");
    post.onfocus = function() {
      post.getElementById (post.value).querySelector ("textarea").focus(); }

    p = pullstring (bread_top (doc).children [1].innerHTML, ">", "<");
    q = get_checked ("font", "font1");

    for (n = 1; n <= 6; n++)
    {
      top = document.getElementById ("postoffice").cloneNode(true);
      top.id = "post" + n; box = top.children [1];

      if (n == 1) { post.value = top.id; top.style.display = "block"; }
      box.onclick = function (e) { launchmenu (postwin, e.target, 0); }
      box.onmousedown = function (e) { if (!e.target.value && e.detail > 1) return false; }
      box.innerHTML = make_title (p, "POST " + n, post.name, "");

      box = taglist (top, "img");
      box [0].parentNode.onclick = function() { postoffice (postwin, 0); }
      box [1].parentNode.onclick = function() { postoffice (postwin, 1); }
      box [2].parentNode.onclick = function() { postoffice (postwin, 2); }
      box [3].parentNode.onclick = function() { postoffice (postwin, 3); }
      box [4].parentNode.onclick = function() { postoffice (postwin, 4); }

      box = taglist (top, "textarea")[0]; box.classList.add (q);
      post.body.appendChild (top);
    }
    return;
  }

  if (!(top = doc.getElementById (doc.value))) return;

  if (cmd >= 0 && cmd <= 4) if ((box = taglist (top, "img")[cmd]).value)
  {
    box.src = box.value = ""; box = box.nextElementSibling;
    box.title = box.innerHTML = box.style.backgroundColor = "";
    taglist (top, "input[type=file]")[cmd].value = "";
  }
  else
  {
    box = taglist (top, "input[type=file]")[cmd];
    box.onchange = function (e) { loadimage (top, e, cmd); }
    box.click();
  }

  if (cmd >= 21 && cmd <= 26)
  {
    doc.value = "post" + (cmd - 20); top.style.display = "none";
    top = doc.getElementById (doc.value); top.style.display = "block";
    doc.onfocus();
  }

  if (cmd == -2) clear_inputs (top);

  if (cmd == -3)
  {
    taglist (top, "textarea")[0].select(); doc.execCommand ("copy");
  }

  if (cmd == -4) sendform (top, win, doc, false);

  if (cmd == -5) sendform (top, win, doc, true);
}
////////////////////

var postalcode = function (doc, num, title)
{
  var n, box, p = doc.name.split ("/"), q;

  if (title == 2)
  {
    box = doc.getElementById (doc.value).children [1];
    q = pullstring (box.value ? box.value : box.innerHTML, ">", "<");
    q = make_title (q, "POST " + doc.value.substr (4), doc.name, num);
    if (box.value) box.value = q; else box.innerHTML = q;
    return;
  }

  if (title == 1) title = "New Thread";
  if (title == 0) title = "Unknown Title";
 
  if (!num || num == p [3]) return;
  p [3] = num; p = doc.name = p.join ("/");

  for (n = 1; n <= 6; n++)
  {
    q = make_title (title, "POST " + n, p, "");
    box = doc.getElementById ("post" + n).children [1];
    if (box.value) box.value = q; else box.innerHTML = q;
  }
}
////////////////////

var loadimage = function (top, e, num)
{
  var n, box, img, src = e.target.files [0], name = src.name;

  img = taglist (top, "img")[num]; box = img.nextElementSibling;
  img.value = box.title = box.innerHTML = name;
  box.style.backgroundColor = "pink";

  if (name.search (".jpg|.jpeg|.png|.gif") < 0)
    img.src = "launch-8kun.ico"; else img.src = URL.createObjectURL (src);

  taglist (top, "input[type=file]")[num].onchange = null;
}
////////////////////

const sendform = async (top, win, doc, thread) =>
{
  var n, p, q, box, frm, posturl = doc.name, url = posturl.split ("/");

  if (box = doc.getElementById ("posting"))
  {
    box.style.display = "block"; box.style.backgroundColor = "pink"; return;
  }
  if (box = doc.getElementById ("posterror")) doc.body.removeChild (box);
  frm = document.getElementById ("postform").cloneNode(true);

  frm.appendChild (taglist (top, "textarea")[0].cloneNode(true));
  box = taglist (top, "input[type=file]");

  for (n = p = 0; n < box.length; n++) if ((q = box [n]).value)
  {
    frm.appendChild (q = q.cloneNode(true)); q.name = "file" + (p++ ? p : "");
  }

  box = taglist (top, "input[type=text]");
  frm.children [0].value = box [0].value.trim();
  frm.children [1].value = box [1].value.trim();
  frm.children [2].value = box [2].value.trim();
  frm.children [3].value = url [1];

  if (!thread) frm.children [4].value = url [3]; else
  {
    frm [4].name = "page"; frm [4].value = "1"; frm [5].value = "New Thread";
  }

  box = document.createElement ("SPAN");
  box.onclick = function() { box.style.display = "none"; }
  box.id = "posting"; box.innerHTML = "Submitting your post...";
  box.classList.add ("status3"); doc.body.appendChild (box);

  if (doc.value) { box.style.position = "absolute"; postalcode (doc, "", 2); }
  var resp, data, head, postnum, error, statusText, status = 0; setup_cors();

  var err_message = function (msg) { if (!win.closed)
  {
    box.id = "posterror"; box.style.display = "block";
    box.innerHTML = msg; box.style.backgroundColor = "yellow";
  }}

  if (!cors_kraker) { err_message ("Need Kraker Proxy to post."); return; }

  if (!get_checked ("moderator", 0)) q = ""; else
    if (q = cookies ["moderator"]) frm [6].value = "1"; else
      { err_message ("Moderator cookie is missing."); return; }

  if ((p = access_key.split ("**")).length > 1)
  {
    frm [7].value = p [0]; frm [8].value = p [1];
  }

  data = new FormData (frm);
  head = { method: 'POST', headers: { accept: "**" + q }, body: data };

  try {
    resp = await fetch (cors_kraker + get_posting_url(), head);
    data = await resp.text(); } catch (e) { data = ""; }

  if (data)
  {
    p = resp.headers.get ("zz-set-cookie") || "";
    if (p.includes ("mod=deleted")) cookies ["moderator"] = "";
    status = resp.status; statusText = resp.statusText;
  }

  if (status == 200) if (postnum = pullstring (data, '"id":"', '"'))
  {
    if (thread) postalcode (doc, postnum, 1);
    posted.push (doc.name + "#" + postnum);
  }
  else
  {
    error = pullstring (data, '"error":"', '"');
    if (!error && data.includes ("captcha")) error = "Captcha needed to post.";
  }

  if (!win.closed) if (postnum)
  {
    if (!doc.value) n = 1; else
    {
      n = taglist (top, "input[type=checkbox]")[0].checked;
      postalcode (doc, postnum, 2);
    }
    if (n) { clear_images (top); clear_inputs (top); }
    doc.body.removeChild (doc.getElementById ("posting"));
  }
  else
  {
    if (!status) error = "Status unknown (possible CORS block)"; else
      if (!error) error = "Status: " + status + " (" + statusText + ")";

    error = error.replace (/\\//g, "/");
    error = error.replace (/\\u/g, "&#x"); err_message (error);
  }
}
////////////////////

var playvideo = function (win, url)
{
  var m, n, s, doc, box, src; if (!win) win = window;
  if (!url && !(url = posturl.value.trim())) return;
  doc = win.document; box = doc.getElementById ("player");

  if (box) box.style.display = "inline-block"; else
  {
    box = document.createElement ("SPAN");
    box.classList.add ("status3"); box.classList.add ("status5");
    box.onclick = function() { box.style.display = "none"; }
    box.id = "player"; doc.body.appendChild (box);
  }
  if (video_win)
  {
    if (win != video_win) box.innerHTML = "Please wait..."; return;
  }

  if ((n = url.indexOf ("?")) >= 0) { s = url.substr (n); url = url.substr (0, n); }
  if (url.substr (-1) == "/") url = url.substr (0, url.length - 1);

  if (url.includes (".mp3"))  src = "raw_mp3"; else
  if (url.includes (".mp4"))  src = "raw_mp4"; else
  if (url.includes (".webm")) src = "raw_webm"; else
  if (url.includes (".m3u8")) src = "raw_m3u8"; else
  if (url.includes (".mpd"))  src = "raw_dash"; else
    
  if (url.includes (src = "youtube") || url.includes ("youtu.be"))
  {
    if (s)
    {
      m = pullstring (s, "?v=", "");
      if (!m) m = pullstring (s, "&v=", "");
      if ((n = m.indexOf ("&")) >= 0) m = m.substr (0, n);
      if (m) url = "/" + m;
    }
  }
  else if (url.includes (src = "rumble"))
  {
    if ((n = url.indexOf ("-")) > 0) url = url.substr (0, n);
    if ((n = url.indexOf ("\u2013")) > 0) url = url.substr (0, n);
  }
  else if (
    !url.includes (src = "bitchute") &&
    !url.includes (src = "twitter") &&
    !url.includes (src = "vimeo")) src = "";

  if (!src) { box.innerHTML = "Invalid source."; return; }

  if (src.substr (0, 4) != "raw_")
    url = (n = url.lastIndexOf ("/")) < 0 ? "" : url.substr (n + 1);

  if (url.length < 5) { box.innerHTML = "Parsing error."; return; }

  video_win = win; box.innerHTML = "Waiting for Alleycat Player...";
  say_player ("launch-8kun", get_checked ("viewer", 1) + " " + src + " " + url);
}
////////////////////

var showmedia = function (win, item)
{
  if (!item) return; var url = item.getAttribute ("data");
  url = localpath + url_media + "?" + url + "##" + item.children [0].href;

  if (!win) win = window; try { win = win.open (url, "_blank"); }
    catch (e) { win = window.open (url, "_blank"); }; win.focus();
}

</script>

</body></html>
